"""
SMR replacement function
The python class is developed to perform the SMR replacement. The Optimal Power Flow (OPF) analysis is intergarted as a part of this class. 
OPF can be used solely without SMR retrofitting by set the class attribute `withRetrofit:bool` to be False.
"""
import math, json
from pathlib import Path
from logging import raiseExceptions
from pickle import TRUE
import sys, os, numpy, uuid, time
BASE = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE) 
import queryOPFInput 
from datetime import datetime
import pytz
from rfc3987 import parse
from UK_Digital_Twin_Package import UKPowerGridModel as UK_PG
from UK_Digital_Twin_Package import UKDigitalTwin as UKDT
from UK_Digital_Twin_Package.jpsSingletons import jpsBaseLibGW
from UK_Digital_Twin_Package import demandLoadAllocator as DLA
from UK_Digital_Twin_Package import BranchPropertyInitialisation as BPI
from UK_Digital_Twin_Package import EndPointConfigAndBlazegraphRepoLabel as endpointList
import UK_Power_Grid_Model_Generator.SPARQLQueryUsedInModel as query_model
from UK_Power_Grid_Model_Generator.costFunctionParameterInitialiser import costFuncPara
from UK_Power_Grid_Model_Generator.model_EBusABoxGeneration import addUpConsumptionForAggregatedBus
from UK_Power_Grid_Model_Generator.model_EGenABoxGeneration import demandAndCapacityRatioCalculator, initialiseEGenModelVar
import UK_Power_Grid_Model_Generator.initialiseEBusModelVariable as InitialiseEbus
from UK_Digital_Twin_Package.DistanceCalculator import DistanceBasedOnGPSLocation as GPS_distance
from UK_Digital_Twin_Package import UKDigitalTwinTBox as T_BOX
from UK_Digital_Twin_Package import UKPowerPlant as UKpp
from UK_Digital_Twin_Package.OWLfileStorer import readFile
from UK_Digital_Twin_Package import CO2FactorAndGenCostFactor as ModelFactor
from SMRSitePreSelection import SitePreSelection_pymoo as sp_pymoo
from pypower.api import ppoption, runopf, isload ## numpy <1.23 otherwise will raise error message, if the pypower and numpy has conflicts again, try to uninstall both and `pip uninstall numpy pypower`, donwgrade the numpy to 1.22.0 and install h5py as well
from numpy import False_, r_, c_, ix_, zeros, pi, ones, exp, union1d, array, linalg, where, logical_or, arange, \
                    ones, sort, exp, pi, diff, min, \
                    argmin, argmax, real, imag, any, delete
from numpy import flatnonzero as find
from pypower.idx_bus import BUS_I, PD, QD, VM, VA, GS, BUS_TYPE, PV, PQ, REF
from pypower.idx_brch import PF, PT, QF, QT, F_BUS, TAP, SHIFT, T_BUS, BR_R, BR_X, BR_STATUS
from pypower.idx_gen import PG, QG, VG, QMAX, QMIN, GEN_BUS, GEN_STATUS
import matplotlib.pyplot as plt
from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.optimize import minimize
from pymoo.operators.crossover.sbx import SBX
from pymoo.operators.mutation.pm import PM
from pymoo.operators.repair.rounding import RoundingRepair
from pymoo.operators.sampling.rnd import IntegerRandomSampling
from SMRSitePreSelection.populationDensityCalculator import populationDensityCalculator
from visualisationColourCreator import gen_fuel_col
from UK_Digital_Twin_Package.DistanceCalculator import DistanceBasedOnGPSLocation
from SMRSitePreSelection.demandingAndCentroidList import demandingAndCentroid
from UK_Power_Grid_Topology_Generator.SPARQLQueriesUsedInTopologyABox import queryWithinRegion
import shapely.geometry
import matplotlib.pyplot as plt
from pymoo.decomposition.asf import ASF ##Augmented Scalarization Function (ASF)
import pandas as pd
import seaborn
from adjustText import adjust_text
import matplotlib as mpl
import geojson
import ast
from shapely.geometry import mapping, shape
from colourPicker import sequentialHEXColourCodePicker, createColourBarLegend 
from matplotlib.ticker import MultipleLocator
from regionalBreakdownOverlayFactory import energyBreakdownOverlayerFactory

## create configuration objects
SLASH = '/'

markersList = ['o', 'v', 's', '*', 'X', 'P', 'D', '1', '2', '3']
lineStyleList = ['solid', 'dotted', 'dashed', 'dashdot', (0, (3,1,1,1)), (0, (1,10)), (5, (10, 3)), (0, (5,10)), (0, (3, 10, 1, 10)), (0, (3,5,1,5)), (0, (3,5,1,5,1,5)), (0, (3,10, 1,10,1,10)), (0, (3,1,1,1,1,1))]

genTypeLabel = ['Solar', 'Wind', 'Hydro', 'Oil', 'NaturalGas', 'Coal', 'Nuclear', 'SMR', 'Others']

# officialRegionNameList = ["North East", "North West", "Yorkshire & Humber", "East Midlands", "West Midlands", "East England", 
#                           "London", "South East", "South West", "Wales", "Scotland"]

officialRegionNameList = ["NE", "NW", "YH", "EM", "WM", "EE", "LDN", "SE", "SW", "WALES", "SCOT"]
labelFontSize = 14
legendFontSize = 12
dotLabel = 12
annotateSize = 12

highLevelRegions = ["K03000001", "K02000001", "W92000004","S92000003", "E12000001", "E12000002", "E12000003", "E12000004", "E12000005", 
                                    "E12000006", "E12000007", "E12000008", "E12000009", "E13000001", "E13000002"]

dt = UKDT.UKDigitalTwin()
ukmf = ModelFactor.ModelFactor()
t_box = T_BOX.UKDigitalTwinTBox()
ukpp = UKpp.UKPowerPlant()
## set up the derivationInstanceBaseURL
derivationInstanceBaseURL = dt.baseURL + SLASH + dt.topNode + SLASH
## read cost factors file## from ESO https://carbonintensity.org.uk/
modelFactorArrays = readFile(ukmf.CO2EmissionFactorAndCostFactor)

## Path to the files containing maps.
base_image_path = str(Path(__file__).resolve().parent.parent.parent) + "/resources/required_images/UKMapWithRegionalBoundaries.png"
arrow_image_path = str(Path(__file__).resolve().parent.parent.parent) + "/resources/required_images/arrow.png"
legend_path = str(Path(__file__).resolve().parent.parent.parent) + "/resources/required_images/breakdownLegend.png"

## Looking for the area boundaries for the obsolete LA Code
def boundarySearchForObsoleteLACode(LACode):
    idx = int(LACode[-1])
    
    if idx == 0:
        geometry = {"type": "Polygon", "coordinates": [[[-0.6641580950651887, 52.45446083132446], [-0.6702829554951434, 52.45510076062515], [-0.6696648136616343, 52.45564136237522], [-0.6690968673747317, 52.457539180719834], [-0.6707581124667609, 52.458429968564005], [-0.6724111135863384, 52.46190083540659], [-0.6690392733062004, 52.462572372845756], [-0.6698931815016489, 52.46373990481318], [-0.6735458273463583, 52.463471639104185], [-0.6764680079959438, 52.462476766925796], [-0.6764864550831596, 52.46196276850589], [-0.6769626841681916, 52.461788244862625], [-0.6818486590615022, 52.46230665949084], [-0.6837721377962074, 52.4621671903778], [-0.6838584279724667, 52.46243158920283], [-0.6816005231566922, 52.46267887502949], [-0.6817885568158402, 52.46318528793334], [-0.6766056821511948, 52.463924031401284], [-0.6728727094247632, 52.4651516813076], [-0.6729467781764511, 52.465671211322736], [-0.6762073410726049, 52.46719391097404], [-0.6756295132401406, 52.46800562382252], [-0.6744791400933665, 52.4685177299325], [-0.6713259109463218, 52.468903177862565], [-0.6728954703647738, 52.471296058958025], [-0.6769358505417666, 52.47343524883634], [-0.6757229905417566, 52.47450419605625], [-0.6743760969292832, 52.474933209713136], [-0.6848221089230468, 52.47825401071829], [-0.6855755251116794, 52.47723208894324], [-0.6866474457770145, 52.47678542487194], [-0.6881971383580243, 52.476760373793084], [-0.6895759757263338, 52.47554753360324], [-0.6928899319934004, 52.47655336649094], [-0.6932740943047391, 52.47660893167597], [-0.6950045866456679, 52.47266315772938], [-0.6973471133044388, 52.46916558886833], [-0.7018371161325558, 52.464563203452244], [-0.704699692129634, 52.462974493645866], [-0.7046631127805718, 52.4624633943752], [-0.7057299964661855, 52.46222331826733], [-0.7079197165548788, 52.46042763371316], [-0.7167712366037605, 52.457397056870164], [-0.7202364724826743, 52.45676292197583], [-0.7228061049380868, 52.45976481942376], [-0.7286507343442717, 52.45843688501559], [-0.7314008623311609, 52.458099609328094], [-0.7329495606490872, 52.45854601227223], [-0.7344869920679267, 52.457900774337496], [-0.7378949137709515, 52.45813042331198], [-0.7385598345773013, 52.462931251390884], [-0.7398159847340207, 52.46409815483403], [-0.739796649964337, 52.465544561683835], [-0.741581508927371, 52.47011542348349], [-0.7490506795870568, 52.469615629247805], [-0.7552403154228291, 52.46985267285266], [-0.7581346427473272, 52.470059342338466], [-0.7616053444684895, 52.47118622755411], [-0.7670832827010443, 52.47182064425517], [-0.7688113542341357, 52.472306999542305], [-0.771647217191495, 52.472031695773644], [-0.7718517692660806, 52.473779813779366], [-0.7748111581203749, 52.477172067019495], [-0.7757347314296689, 52.47737037315994], [-0.7769671568508931, 52.476942620618324], [-0.7781148820513573, 52.477130641820736], [-0.7796647981286642, 52.47773193064879], [-0.781452260534983, 52.47907013739757], [-0.7785973724568168, 52.48071119493149], [-0.7771282652008571, 52.48212725547712], [-0.7784724980253453, 52.48308963387573], [-0.7780892899101813, 52.48347593240321], [-0.782489465445572, 52.48635688110133], [-0.7815890918885928, 52.48696346459853], [-0.7821828707392936, 52.487376818265155], [-0.781376076022298, 52.488010428334604], [-0.7798856980233251, 52.48811371073598], [-0.7813199846390763, 52.48934581175577], [-0.7807569891400988, 52.48978599168663], [-0.7824591950659835, 52.4910243428226], [-0.782209694078168, 52.491365293022945], [-0.7849722335714783, 52.49235116916264], [-0.7857575949385943, 52.493568370352946], [-0.7855652494839026, 52.49440074155382], [-0.7866767023347802, 52.495549468893245], [-0.7915660858229423, 52.49547807119539], [-0.7928599317428187, 52.495676516120724], [-0.793813267826884, 52.49620231978803], [-0.7949513371928897, 52.49778634252886], [-0.798007945666907, 52.49881445054441], [-0.8014246871419008, 52.50182669208668], [-0.8079456944303274, 52.50654691110807], [-0.8057281565105092, 52.50839906181279], [-0.8049621664496648, 52.51029459622774], [-0.8026310180097694, 52.50997165097396], [-0.8016909736499622, 52.51305665247387], [-0.7993275564258028, 52.51256245679679], [-0.7961738014214805, 52.516347830550224], [-0.7957922608727648, 52.51591235293629], [-0.796212183983327, 52.515699119215675], [-0.7954842609424156, 52.5152628134933], [-0.7933478103329853, 52.51541011423378], [-0.7888743844811728, 52.51367147428776], [-0.7877950632087708, 52.513694580007304], [-0.7883590805921323, 52.514728025299284], [-0.7878310054178097, 52.51506874076794], [-0.787478983023245, 52.51452658356707], [-0.7868637948043339, 52.51465518757265], [-0.7870041297563981, 52.51549806842332], [-0.7839753222846869, 52.5155695416056], [-0.7840652805242367, 52.51604781063666], [-0.7826229950271322, 52.51645640321729], [-0.7820005955767252, 52.51721783301058], [-0.7803058167990434, 52.51700525498808], [-0.7798821257357573, 52.517776809857075], [-0.7791248094139602, 52.518089957505744], [-0.7781089328562639, 52.517841207144095], [-0.7773914969718922, 52.517986592160405], [-0.7767474851651471, 52.51756191311574], [-0.7761897233930982, 52.51779890991999], [-0.7757308516426665, 52.51728886741173], [-0.7751129888335264, 52.517515349838526], [-0.7753858881967881, 52.51803605473813], [-0.7748800224322964, 52.51825911130997], [-0.7723418541514301, 52.5160526278651], [-0.7700574451475726, 52.515371719289455], [-0.7678288587982933, 52.5142265846632], [-0.7665714244673747, 52.51439594171077], [-0.766201781221881, 52.51333844143965], [-0.7610399299171314, 52.51416919790199], [-0.75840885565241, 52.51126110183396], [-0.7561696915883559, 52.51097775206635], [-0.7546390471609684, 52.511852625302204], [-0.7512588257387011, 52.51215953903342], [-0.7516292334851291, 52.513129914470895], [-0.7507670279757219, 52.51323855829407], [-0.7503646233215792, 52.51381241131073], [-0.7496754627767688, 52.51374401610523], [-0.7495732722463264, 52.51448911045526], [-0.7485542757418969, 52.514307570725904], [-0.7472739446649196, 52.5148136168688], [-0.7471162951318678, 52.515695726537636], [-0.7478421897135902, 52.51644338107045], [-0.7466646120003058, 52.516858831128296], [-0.744378621636161, 52.51619448504673], [-0.7421173395490916, 52.51704167167166], [-0.7392691003735825, 52.51743748403457], [-0.7394048612646595, 52.518616702979664], [-0.7335109014282749, 52.52057300605827], [-0.7303242551930861, 52.52124369722764], [-0.7301835398958231, 52.52085561840705], [-0.7296312194302687, 52.52089373266973], [-0.730060611443004, 52.5218990528235], [-0.7268867229022352, 52.522736963821075], [-0.7268468093316782, 52.523146561816006], [-0.7251707869612948, 52.523151892060866], [-0.725169070274396, 52.522803952367134], [-0.7236178793488579, 52.522624465341345], [-0.723599139931836, 52.522352738500324], [-0.7166191830137677, 52.522991085532134], [-0.7160917634417006, 52.52242802568532], [-0.7156423649096437, 52.52237371710678], [-0.7153123103968949, 52.52317742896337], [-0.7134414681300928, 52.52445172744494], [-0.7136717678943308, 52.52494694703801], [-0.7119284241324767, 52.525684950712645], [-0.7119302618630293, 52.52602929692762], [-0.7100351584629911, 52.52656429232061], [-0.7095736948728827, 52.527720859073256], [-0.708000195680237, 52.52789603687017], [-0.7078453454231056, 52.528550643288305], [-0.708366367938885, 52.52872988611439], [-0.7082221704770896, 52.529170607114516], [-0.7089212920497778, 52.52926191125139], [-0.7089085292342912, 52.529796642252485], [-0.706750492957636, 52.53014356689492], [-0.7076093854668513, 52.53051075527997], [-0.7076429237319354, 52.53082578796294], [-0.7063612589410233, 52.531195662205356], [-0.7061113942264147, 52.53061932392582], [-0.7055188243873441, 52.530917624406754], [-0.7057206883267129, 52.53122461140207], [-0.7046670675127935, 52.531109726224166], [-0.7048770319310502, 52.531637006980496], [-0.7037554276459134, 52.532179464551895], [-0.7028308666793502, 52.532234049578726], [-0.7028948115561028, 52.5331661660324], [-0.7014524859351186, 52.53353521592188], [-0.7017466644959688, 52.5345570414791], [-0.7006926064220412, 52.534454609653324], [-0.6996393654021374, 52.535670252714546], [-0.7002880122415078, 52.535724202788934], [-0.7005916237590806, 52.53637664143003], [-0.6999942173963754, 52.53673598041661], [-0.7006097713887528, 52.536811945216094], [-0.700557571714008, 52.5373283557251], [-0.701220395139086, 52.53725285047001], [-0.7011434564596131, 52.537660236564285], [-0.7005957158789974, 52.53788521519552], [-0.7002889714089042, 52.53758965142081], [-0.6992014263655344, 52.53771710923955], [-0.6986847559511178, 52.538638352029714], [-0.6971727267277693, 52.53831154980365], [-0.6964437897377074, 52.53852921165152], [-0.6967040245658389, 52.53895369934137], [-0.6979648571040975, 52.53934785088285], [-0.6970534397033368, 52.539799082191806], [-0.6961917188487898, 52.539721197431795], [-0.6962503952974334, 52.540079741628205], [-0.6982842528357428, 52.54096244324491], [-0.6992505006449875, 52.54224341245359], [-0.696980282399831, 52.54212227683259], [-0.6964105531721511, 52.54233989359582], [-0.6974943765846519, 52.54293801253473], [-0.6977272773858463, 52.54383954360411], [-0.6967656689106684, 52.544192252535446], [-0.6980412277333794, 52.54528959768122], [-0.697846661845972, 52.545684811956264], [-0.6966351053561318, 52.54630980045602], [-0.6939781358079506, 52.54534910540888], [-0.6931851485711124, 52.54588070720549], [-0.6936228524109475, 52.54643847274574], [-0.69256790790725, 52.546852045122414], [-0.6919967799329013, 52.54552685366798], [-0.6896211174504786, 52.546316054966795], [-0.6884618721015445, 52.546119776446844], [-0.6885021796182371, 52.546745959471735], [-0.6876309558709358, 52.54698266400984], [-0.6872146449215155, 52.547837560622916], [-0.6863898769816532, 52.547849085316585], [-0.6858831630100991, 52.548619297251896], [-0.6847683683359872, 52.54896023226586], [-0.6859899037724589, 52.549540212881396], [-0.6836127218498451, 52.55234040865599], [-0.6818428367463705, 52.551650040692245], [-0.679746981134281, 52.55341941477072], [-0.682319055426407, 52.55357839098224], [-0.6775759475187308, 52.55827426263795], [-0.6748778272568771, 52.55862078046217], [-0.6655937005463315, 52.55223487018412], [-0.6666011403133906, 52.55101811239909], [-0.667403033095043, 52.54752446191976], [-0.6683004673227333, 52.54593965466995], [-0.6694749679915266, 52.54489651089917], [-0.6692104171677905, 52.54467054732556], [-0.6667886054842644, 52.5434673203315], [-0.6643561189962496, 52.54417448530095], [-0.6616974913574951, 52.54334336798067], [-0.6595533882563106, 52.54324630874896], [-0.6582767747801774, 52.54221684068959], [-0.6584308266445245, 52.54142288569794], [-0.6537300360275585, 52.5407410862287], [-0.6514028227668656, 52.53935975640489], [-0.6467475101288999, 52.53764431317873], [-0.6450500940762587, 52.53664754776137], [-0.643148678817514, 52.53633995266674], [-0.6406900332750448, 52.534457890736604], [-0.6381601360066916, 52.53312151445113], [-0.6404443713652288, 52.53033651629511], [-0.6393739790460528, 52.52890996200323], [-0.6407999203855589, 52.52889488596712], [-0.6358578530704844, 52.52387523630808], [-0.6359106458943533, 52.52302621073904], [-0.6383184518542773, 52.52180514561513], [-0.6417589063799707, 52.520648106067966], [-0.6493896443235867, 52.51890403548309], [-0.652962527946972, 52.518843097098575], [-0.6578541052062424, 52.51937610613898], [-0.6616863984126399, 52.51912100941698], [-0.6647752127616212, 52.51820829406141], [-0.6682270062849074, 52.51600855314091], [-0.6696487611866462, 52.51446018811758], [-0.6711047487303468, 52.51382383932305], [-0.674682180938707, 52.5132049545912], [-0.6737589067682547, 52.50931783663436], [-0.6721481616728091, 52.50692812131524], [-0.6714480612034243, 52.50669008215145], [-0.6697995399337021, 52.50751490638228], [-0.6678265808242037, 52.507857715439535], [-0.6641768526490683, 52.50824359551266], [-0.6631771039828843, 52.50802828011877], [-0.6606159941720688, 52.50856934119875], [-0.6581939622429255, 52.50961983425639], [-0.657987089518265, 52.51041669898549], [-0.6569010374696397, 52.51148149804042], [-0.6538465179461371, 52.512244208516044], [-0.6515457805099091, 52.51346411159741], [-0.6494636155213571, 52.51408588680712], [-0.6457134916989941, 52.5144584601884], [-0.6453746145913756, 52.51426484545538], [-0.6431480893120248, 52.51497752424343], [-0.6396073642737422, 52.51481724986843], [-0.6383149393471855, 52.515055939403275], [-0.6381938864985129, 52.515493249999366], [-0.6360326616992329, 52.51589637164345], [-0.6320000137171558, 52.51543889830329], [-0.6312475998377084, 52.513426236773334], [-0.6296882629581501, 52.51125763365788], [-0.6271249900417618, 52.51236706767267], [-0.6240463871885435, 52.51256329659448], [-0.6240563117922316, 52.51153752045955], [-0.6221982003159778, 52.51144220251163], [-0.6158452602936073, 52.513236321812336], [-0.6123850812811823, 52.513519462514964], [-0.61035644144116, 52.51317379936775], [-0.6088786202331826, 52.513543013027125], [-0.607324488872632, 52.51343126041859], [-0.6055844137686971, 52.514257712865465], [-0.6030404947990349, 52.51362084308554], [-0.6020177845765616, 52.51292459805522], [-0.5997067775825836, 52.51210066911645], [-0.5989035981002444, 52.51228629368252], [-0.5977217996399046, 52.51201065526808], [-0.5981135493876456, 52.51169253625985], [-0.597697985168113, 52.51164806612216], [-0.5981928471599834, 52.5109606810025], [-0.5985500429460744, 52.5110791495242], [-0.5987570607076174, 52.510686037517985], [-0.599178396642769, 52.510690126263576], [-0.5997432198976924, 52.50988761814103], [-0.6033643326659424, 52.50954203296145], [-0.6038754445011775, 52.5091740724421], [-0.6051239241937683, 52.50906916312006], [-0.6061156432610072, 52.50906556714453], [-0.6065875431936156, 52.50966002009954], [-0.6085932309760438, 52.509279965852905], [-0.6093126694409335, 52.508615038851644], [-0.6086013360104986, 52.508230798994205], [-0.60814447295516, 52.506179211908], [-0.6036658150953205, 52.50263181546628], [-0.6033131092519749, 52.50185980459443], [-0.6005918101877401, 52.50089173062921], [-0.598486541555644, 52.496956834953316], [-0.5964030236667782, 52.496927645658936], [-0.5970176574505366, 52.49589924111401], [-0.5979345043147748, 52.49147764708838], [-0.5995596640918961, 52.488770095144446], [-0.6013953675654279, 52.48680301860284], [-0.6096509583132859, 52.48579810797629], [-0.6126566437615643, 52.48500621711366], [-0.6121016165022386, 52.48424992457206], [-0.6217329742635938, 52.482313501899476], [-0.6237938855744543, 52.481629053311366], [-0.6279986681873901, 52.479339465268446], [-0.6294572329465774, 52.4769414609596], [-0.6320589216093201, 52.474712243867366], [-0.6335578160562881, 52.471528919429666], [-0.635487680853386, 52.469486008619526], [-0.6333631614458932, 52.468592070991164], [-0.632576880483538, 52.46622209059315], [-0.6315160896751035, 52.46525142777353], [-0.6319107666783329, 52.464582516525425], [-0.6344321861192193, 52.46344472881231], [-0.6372874794871154, 52.46412227725504], [-0.638348959443015, 52.464928326008994], [-0.6403211543344481, 52.465701782182144], [-0.6436644601300225, 52.46377752821833], [-0.6488599901447053, 52.462687051622275], [-0.6526087795899811, 52.46086514718296], [-0.6579342792173335, 52.45998346730527], [-0.6633356219544012, 52.456594021834725], [-0.6641580950651887, 52.45446083132446]]]}             
    elif idx == 1:
        geometry = {"type": "Polygon", "coordinates": [[[-0.9012938835030461, 52.45973922017287], [-0.9007955863754757, 52.459121440827474], [-0.9014256112285859, 52.45911740691291], [-0.9014547823411291, 52.4588326726827], [-0.9009866029658795, 52.45883821121202], [-0.9015570212627703, 52.45809374325023], [-0.9041625209489215, 52.456414170340345], [-0.9040891701799524, 52.45575180616064], [-0.9045557514170284, 52.45557457317194], [-0.9046869233834283, 52.454914102924185], [-0.9057905022714149, 52.45456111597871], [-0.906263646408525, 52.453643069071596], [-0.9058641863203076, 52.453311228581505], [-0.9053554311082981, 52.44836805871351], [-0.9038730234292228, 52.44548909289175], [-0.9043971841647667, 52.44215486839291], [-0.8984370141909895, 52.44151602212958], [-0.8932593399843495, 52.441537796914574], [-0.8793036068009046, 52.43915789791648], [-0.8729697036596115, 52.43676203312167], [-0.8652292233049367, 52.43457973239151], [-0.8643415088082366, 52.43420891033253], [-0.868720240304047, 52.432840220542026], [-0.8709953450894161, 52.429287379270875], [-0.8734210280606305, 52.42656299588956], [-0.8750603775161646, 52.42351740682087], [-0.876677614626804, 52.42353727311856], [-0.8782945754550291, 52.422927780764674], [-0.8820158342338519, 52.4226078145953], [-0.8852739109373026, 52.42362759789787], [-0.8869503433847338, 52.42333860735017], [-0.8862618293580623, 52.420838161014714], [-0.8863640004004831, 52.420286186937744], [-0.8872744544354393, 52.41957644333534], [-0.8880184621881199, 52.41630546030902], [-0.8889784230474632, 52.41519881286313], [-0.8882625167152949, 52.41373019977048], [-0.8881853465608467, 52.411712944645934], [-0.8892954899692314, 52.409540480396984], [-0.8887026535862848, 52.40797685374696], [-0.8891790284206932, 52.407975937194884], [-0.8893022256393395, 52.406289521037], [-0.8903996250728811, 52.40368002300652], [-0.8902730963005456, 52.40040453100467], [-0.8906809570575095, 52.39902466574584], [-0.8905510647603412, 52.3985793526647], [-0.889399900766769, 52.398359037020924], [-0.8893574520503398, 52.39782457487195], [-0.8886704801293794, 52.39773273439013], [-0.8887695957251859, 52.398056422677215], [-0.8882012438321367, 52.3981580363845], [-0.8884719875586626, 52.39878901871991], [-0.8872307906321046, 52.39910828046361], [-0.8853261630992711, 52.40032375530785], [-0.8806231139888058, 52.40152990803884], [-0.8770243915284848, 52.40172326921574], [-0.8737094718867944, 52.402659112801885], [-0.8661518797308749, 52.39965240720589], [-0.8618218136942455, 52.3961647304543], [-0.8572675351173493, 52.39529993003298], [-0.8544122920195646, 52.39409730192807], [-0.8501065509960647, 52.39329664948597], [-0.8498454984106183, 52.39367169540865], [-0.8405839042466875, 52.39283235688161], [-0.8398571607583181, 52.391126048770026], [-0.833753197329307, 52.38424751876876], [-0.8329730105431039, 52.3811281717945], [-0.8317124030733879, 52.37684335781035], [-0.8295232439571003, 52.37507308316173], [-0.8263081301496292, 52.3735604270295], [-0.8190451140696888, 52.371542540217106], [-0.8167341242175319, 52.3702948982931], [-0.805556068187516, 52.36638034871683], [-0.8057815906443259, 52.36618569948667], [-0.799756507583005, 52.36386983732259], [-0.796331895212226, 52.36164938307189], [-0.7912181226694626, 52.35595376117185], [-0.7901809007223728, 52.35349856991213], [-0.7886708063216749, 52.34729309267491], [-0.7876906032251749, 52.34534547730503], [-0.7866772200536144, 52.34439644990306], [-0.7859710760593881, 52.34182507099277], [-0.7861040886015849, 52.33862936740628], [-0.7875554820060287, 52.33284082313104], [-0.786866867063261, 52.33134936776866], [-0.7857953944837965, 52.33060295401603], [-0.7893095418116615, 52.329176195688], [-0.7906037419018189, 52.32756394800778], [-0.7925892462841065, 52.32616188378699], [-0.7928637725151778, 52.32378310512592], [-0.7944598250995466, 52.32298750386576], [-0.7949778918906043, 52.32303503242722], [-0.8055484363089339, 52.31691989075942], [-0.8093835371802769, 52.31516502104506], [-0.8142490587964891, 52.31150976873018], [-0.8179661664697029, 52.30958167395846], [-0.8167627367954877, 52.308559001943], [-0.8171727709487788, 52.30797609341241], [-0.8157248740492085, 52.306776592093605], [-0.8159448708256344, 52.30584196482771], [-0.8149217656927147, 52.30444348828557], [-0.8148829314165595, 52.302768158929105], [-0.8141366332888172, 52.30226434439852], [-0.8136575393092159, 52.30027351373776], [-0.8122996038688591, 52.29889690595789], [-0.8125501456522822, 52.29863418503659], [-0.8110015450733058, 52.2953460220465], [-0.8083965613854507, 52.292859892982015], [-0.8059137739392349, 52.28824051927304], [-0.8059552177236617, 52.287296911291264], [-0.8071464476565526, 52.28628582472644], [-0.8076108917065916, 52.28449683495654], [-0.8077513493573044, 52.282920378755065], [-0.8070883945230388, 52.281515663744116], [-0.8076491907330694, 52.27842669733439], [-0.8091574084722345, 52.275313128050776], [-0.8153405740108196, 52.27500490988144], [-0.8160161424286249, 52.27561586932155], [-0.8190032070731907, 52.27423598189556], [-0.8199500108438776, 52.27423645805491], [-0.8247399194819625, 52.27783284081698], [-0.8253281325008393, 52.27870542156266], [-0.8268261152239824, 52.279764106758826], [-0.8271774982604486, 52.28088877992185], [-0.8275917447825296, 52.28096929237071], [-0.8307459520683977, 52.28037031047929], [-0.8326585002418185, 52.279214117099826], [-0.837519398094429, 52.281390187048544], [-0.8399940377130384, 52.280929067128035], [-0.8445234777979432, 52.280878102631306], [-0.8450531486041283, 52.279899710142836], [-0.8465325244585629, 52.28011649002944], [-0.8493268551730031, 52.27772072293276], [-0.8522330885606666, 52.27909848171114], [-0.8514987523918457, 52.280912880219184], [-0.8558279389969891, 52.28186027357301], [-0.8574951897298131, 52.27979062575569], [-0.8598172850378748, 52.281094234292624], [-0.8648417414850871, 52.2785936872035], [-0.8695936111610182, 52.28154152994155], [-0.8717784181945588, 52.28250015060243], [-0.873951820109792, 52.282691665926905], [-0.8757698049031583, 52.282222637027274], [-0.8796587892978897, 52.280304943107005], [-0.8823328594005171, 52.278079023617245], [-0.8851328762174323, 52.275374176271235], [-0.8884400059211245, 52.27629085771061], [-0.8883752170993781, 52.27771171950075], [-0.8946967908480432, 52.28031180806586], [-0.8980569368774528, 52.28065338454616], [-0.8981044599680815, 52.280033469212775], [-0.8991915614216627, 52.27934684736877], [-0.899447141880117, 52.27873336483606], [-0.9028483439353129, 52.28013515458922], [-0.9026535831652449, 52.27906079520553], [-0.904932486109428, 52.2791969937027], [-0.9050962611517861, 52.277725002078796], [-0.9056705684929514, 52.2776754078477], [-0.9056660979779985, 52.277322043559494], [-0.9104285963400996, 52.276712459737325], [-0.9161428003088805, 52.276383851724574], [-0.9226665861242689, 52.27668900443639], [-0.9229243992948044, 52.275366061292914], [-0.9225611815708059, 52.273783988509194], [-0.9241564463630845, 52.27363315021692], [-0.9251710969007116, 52.272646237565084], [-0.9246779869788317, 52.27170581813058], [-0.9282581730480358, 52.271162943129056], [-0.9290224337054978, 52.26992017098505], [-0.9323296122214135, 52.270975926237405], [-0.9329235359503618, 52.26900696906433], [-0.937171092993767, 52.269166609719015], [-0.9448490792822837, 52.26340955478557], [-0.9461983055029038, 52.2640374665154], [-0.9550540756514806, 52.26194041007012], [-0.9585419641135603, 52.261414678187926], [-0.9600474681417892, 52.260821069497204], [-0.9617700843850039, 52.25945889217298], [-0.967834597723688, 52.25831538000983], [-0.9693570287813318, 52.25830530750749], [-0.9714900791584432, 52.25761726120653], [-0.9726603571860603, 52.258391615296574], [-0.9734713656310328, 52.25854517338657], [-0.9750821671300393, 52.258265254635475], [-0.9755106694381533, 52.257598192555214], [-0.9761477248286622, 52.25748417602766], [-0.9793443214252022, 52.25800277589983], [-0.9831094729806282, 52.25775563878543], [-0.9872479214938132, 52.258030285700336], [-0.9895441044035382, 52.25736937874251], [-0.991226892808629, 52.256172712019925], [-0.991824045614092, 52.255940526874525], [-0.99239076186931, 52.25478554225282], [-0.9976062923773192, 52.25126696698765], [-0.9974195565636099, 52.247660980860076], [-1.0009390182884355, 52.24747959071766], [-1.001605691015249, 52.24845261654531], [-1.0037370924794693, 52.2477890525145], [-1.0088324790757235, 52.24833904043496], [-1.0110935200584485, 52.24685294444145], [-1.012470995285792, 52.246690104324905], [-1.0133211250494059, 52.244880181190645], [-1.0138078241806412, 52.244862675838135], [-1.0141167165062295, 52.242819838150005], [-1.013572083998146, 52.24162230163491], [-1.0152075816443624, 52.24157294714637], [-1.017542220409589, 52.24097203902863], [-1.0196249528064165, 52.2410981956651], [-1.0250581665407592, 52.2399042666729], [-1.0298862601859116, 52.23932008103666], [-1.0354790468447006, 52.23789949608278], [-1.0384986648863554, 52.23837730317864], [-1.0397806573951378, 52.23794444412353], [-1.040144311654093, 52.23819196621289], [-1.0406800894059938, 52.2378654693905], [-1.0413200062452508, 52.23806840434926], [-1.0413358311770318, 52.23767566426634], [-1.041920851418166, 52.23784858001984], [-1.0416249669428623, 52.23730761321449], [-1.0424470098571925, 52.23728372357374], [-1.0429519364245594, 52.236818460935396], [-1.0432112376378202, 52.23627040256284], [-1.042111579017095, 52.2325213693161], [-1.0432659021834747, 52.23229515133658], [-1.0439187802610812, 52.23162166041002], [-1.0432158210068334, 52.23108099519039], [-1.0434759338607063, 52.23056080533825], [-1.0451126490243499, 52.231598964798934], [-1.0461489705803266, 52.23154802054999], [-1.0459152480262714, 52.231930911138285], [-1.0462808100211896, 52.23202104965118], [-1.0471461081621174, 52.2319570298603], [-1.048407923178968, 52.23067076695986], [-1.049700739275453, 52.23115224475964], [-1.0503432287839425, 52.23096596841987], [-1.0506913367487227, 52.231461404034754], [-1.052211969218246, 52.23190522839616], [-1.0531576536951741, 52.23150098264303], [-1.0536511324956574, 52.23198598075478], [-1.0545118468111174, 52.231580144028875], [-1.0549770471689806, 52.23181135690018], [-1.0552517116560733, 52.23121926368827], [-1.0556327294095287, 52.2314066569491], [-1.0559090266641602, 52.23108430713094], [-1.0571178598637747, 52.230838616706556], [-1.0574070716151833, 52.23011091462017], [-1.056963090568426, 52.22998953601853], [-1.0583603258675995, 52.228585605728306], [-1.0585481640357042, 52.22738683637345], [-1.0602641479269044, 52.22710560892198], [-1.0605362021406273, 52.22760499450495], [-1.0615512912163503, 52.22758250834058], [-1.0621625582762508, 52.22831198352289], [-1.0628465204850692, 52.22815823617134], [-1.0640220537618446, 52.22879600718186], [-1.0652038340196928, 52.228223752060124], [-1.065115635511769, 52.22789391081903], [-1.0660704656995885, 52.227256843303685], [-1.0573579107840294, 52.21804771127888], [-1.0571552042342065, 52.216557305362656], [-1.0551513906667311, 52.21552526989519], [-1.043958486480309, 52.20324745616278], [-1.0423127329816844, 52.200910864411945], [-1.0421175444751365, 52.19910302688647], [-1.0384373327057141, 52.195659410541246], [-1.0421278097213957, 52.19406202759336], [-1.0433462882504627, 52.1938687787117], [-1.044412767843605, 52.19318605091977], [-1.0466796334992254, 52.1934281875189], [-1.046679045665318, 52.194002704052856], [-1.0471563605972105, 52.194256517998895], [-1.049307639414731, 52.193880994800764], [-1.050617348843718, 52.1940748953352], [-1.051281571030813, 52.19448569087295], [-1.0524959795721307, 52.194544970617905], [-1.0546891916260122, 52.19557488976981], [-1.0572629632526185, 52.19583554779136], [-1.0577685012889446, 52.196287283408694], [-1.0600133693433667, 52.196673786027155], [-1.060581733364657, 52.196367232299274], [-1.0647259664001005, 52.19590930303684], [-1.0662061714674342, 52.19543907988472], [-1.0674653467287878, 52.19546521399592], [-1.0696953632557664, 52.194744708136454], [-1.0724013387145777, 52.194560986675256], [-1.0787487561324558, 52.193319648942236], [-1.079787517865932, 52.193812391543766], [-1.083165866835572, 52.193511425578734], [-1.084575425364371, 52.19304941270841], [-1.084688776531307, 52.192657421511726], [-1.0854226120475328, 52.19268198525315], [-1.0862366644555261, 52.19172359663682], [-1.088072889100254, 52.19128461784269], [-1.0904604807115719, 52.18991401991223], [-1.089453745977099, 52.18634597552109], [-1.0898584670556324, 52.18615216798732], [-1.089232509458011, 52.182427875671735], [-1.0896651438242155, 52.18186927638279], [-1.0913699579161562, 52.181537180827775], [-1.0913321404253418, 52.18080687400932], [-1.09315229332147, 52.18041002762223], [-1.0931388126572184, 52.18014198873473], [-1.0954783663910432, 52.18002053742888], [-1.0955990819835413, 52.17890217145329], [-1.0977429697710217, 52.17941301878283], [-1.1026006994795021, 52.17966586242824], [-1.1082925331742377, 52.17879914034159], [-1.1127586978854629, 52.17881662338097], [-1.1202269702028582, 52.18166684634132], [-1.1246884836672875, 52.18394497915375], [-1.1244653727499438, 52.18420946153618], [-1.1269082270738335, 52.18569216895747], [-1.1270842938052992, 52.18349345483608], [-1.1282122056798238, 52.182063246921516], [-1.1280223909748022, 52.18099648504013], [-1.1251871501829682, 52.17678938271864], [-1.120908682456646, 52.17401279946117], [-1.123840157924921, 52.172849607479726], [-1.1251801382292583, 52.17147852507951], [-1.1264388452039482, 52.17082434663604], [-1.1275990180399256, 52.16981880027726], [-1.1286004978166253, 52.167880631487854], [-1.1335732974184487, 52.17209069996001], [-1.134816590338683, 52.172748043685125], [-1.137247342343654, 52.1732585676958], [-1.1385420049996773, 52.17080456588015], [-1.144215196139585, 52.16601788109214], [-1.1479251443626934, 52.167358250983455], [-1.1512403433739693, 52.169321415800596], [-1.1523405992843596, 52.168982294064485], [-1.153025374457851, 52.16972441492196], [-1.157533289090868, 52.169494141704085], [-1.1564915486488425, 52.165814969722625], [-1.1566214991533788, 52.16358262334624], [-1.154316134642176, 52.16256538682127], [-1.1520037099406852, 52.16200761663329], [-1.1507236939804883, 52.16212963799833], [-1.147461811808059, 52.16107670608907], [-1.1450130112946408, 52.15978141653073], [-1.1435503110063268, 52.157925007911224], [-1.1444833308872886, 52.15569130586626], [-1.145310981858889, 52.155141658002385], [-1.1448667650065254, 52.15451807912101], [-1.1455557129301994, 52.15403573373144], [-1.1444205430435828, 52.15294326916465], [-1.1404554202499648, 52.151253891859035], [-1.140582892738686, 52.150478874456034], [-1.139723313251416, 52.14927862540729], [-1.1387403746448739, 52.14924089478786], [-1.1380797988833011, 52.14870927518492], [-1.137303715065175, 52.14886179462484], [-1.137423999239415, 52.1464216736214], [-1.1384432339516042, 52.14616118410991], [-1.139856808630994, 52.146364833836394], [-1.1407749233230184, 52.14581677495354], [-1.141578230911976, 52.14599348753646], [-1.1489989461348313, 52.14562830939758], [-1.1693222715029765, 52.14320443379934], [-1.1725413756816847, 52.14321357364684], [-1.1764471975645185, 52.14378756081383], [-1.176518649229631, 52.14331699175621], [-1.1769079937522349, 52.143124576290695], [-1.1772733832639868, 52.14344090036642], [-1.177711321912021, 52.14314815403393], [-1.1783807443442027, 52.1437767733551], [-1.1792495107960126, 52.14365608827236], [-1.1792761838151242, 52.144348538782005], [-1.1802725770160831, 52.14420707171722], [-1.1809161270335091, 52.14457385295599], [-1.1805409858159153, 52.14478705255715], [-1.1810637373174744, 52.144974130226714], [-1.1815379195404354, 52.1447741994601], [-1.1819760270970348, 52.14526727038651], [-1.1826091500739033, 52.145007317579555], [-1.1828375311773776, 52.145307395191644], [-1.1833067135999007, 52.14522247034008], [-1.1837619728572621, 52.144864208386], [-1.1846732948446503, 52.14529043447221], [-1.1850432358608296, 52.144958542864], [-1.184779083153079, 52.14470316236458], [-1.1858705716070677, 52.1444670315883], [-1.1858763894848576, 52.14414790385645], [-1.1882222349129534, 52.14460906949017], [-1.187952349097972, 52.144906606805804], [-1.188839807380657, 52.145123123535605], [-1.1884316954304193, 52.145309157455145], [-1.1873098739037227, 52.14809215572357], [-1.1895033780476894, 52.14914474255353], [-1.186576213778501, 52.15250062307473], [-1.1871222081572292, 52.1537406099485], [-1.1855443721123553, 52.155461288300884], [-1.1866634775016727, 52.15685892766502], [-1.1865408436329767, 52.15941510727548], [-1.1884669450281202, 52.159532631948025], [-1.1899885884269552, 52.15897755613215], [-1.190013810141376, 52.15935442038017], [-1.1910347236865786, 52.15932637022421], [-1.1928315867747483, 52.16019910572549], [-1.194741578061453, 52.15999635165388], [-1.196007010265283, 52.15896748458462], [-1.1959692832321736, 52.158144547218726], [-1.1979987767125617, 52.15518249015353], [-1.2007272685171337, 52.15708994189805], [-1.202591429362117, 52.15706839983991], [-1.2049302118508587, 52.15747974785879], [-1.206337064168434, 52.15826785805353], [-1.2115170010370604, 52.159717668929915], [-1.2126168157853983, 52.157696761546326], [-1.2172433648538228, 52.15877851958479], [-1.2170501889465561, 52.159209654376404], [-1.2180732810533992, 52.15964085571994], [-1.223191176049314, 52.160399277958625], [-1.2237601866205894, 52.15962438527866], [-1.22335459306805, 52.159659555426806], [-1.223517030533382, 52.159315302477964], [-1.2230498567194321, 52.159280769083566], [-1.2242254235652161, 52.15875811708954], [-1.224972611785088, 52.15781900935464], [-1.2241151700389374, 52.15627416525808], [-1.2255546586105017, 52.15628901439259], [-1.2258933029514476, 52.156568159497446], [-1.2260889714081602, 52.156244883033374], [-1.2274435748478552, 52.15601818211074], [-1.2275555223561163, 52.15470270002478], [-1.2283941091114743, 52.15396190646996], [-1.229586805804869, 52.15404798602758], [-1.2302178125241263, 52.15365015721426], [-1.2314893314293323, 52.153994689865605], [-1.2316590374528364, 52.153475295380325], [-1.2320971681754256, 52.15366779554275], [-1.2329344599451963, 52.1530879382076], [-1.2332139845981234, 52.15323904668501], [-1.23265482562993, 52.151835517691254], [-1.2314322460899243, 52.15136728008662], [-1.2306810443448217, 52.15043454473085], [-1.2309204629364803, 52.14960353871921], [-1.23159746640312, 52.149070371775295], [-1.2324901512623831, 52.14917505139282], [-1.2339448766278946, 52.147782902198195], [-1.2343384188035922, 52.1489496837177], [-1.235910429757446, 52.14949484568123], [-1.2356982372278056, 52.14968410843015], [-1.2376643909398979, 52.14966168451107], [-1.2386330608811091, 52.15010314271585], [-1.2394224617972611, 52.15267235369399], [-1.241478420277469, 52.15381934458002], [-1.2415176815591475, 52.15417561505402], [-1.2429090938631608, 52.15469786036543], [-1.247032711539614, 52.154775567624455], [-1.2506316639249457, 52.15353619361401], [-1.253727750292336, 52.15579447425117], [-1.2530358230841063, 52.156782648640345], [-1.2548810641009205, 52.15885222272504], [-1.253555810031261, 52.15995782824837], [-1.2541693560042348, 52.16094347337081], [-1.2543764543580216, 52.162637683217326], [-1.2550655089738447, 52.16304577818042], [-1.2545703196695999, 52.16319095432251], [-1.255288960006099, 52.16463672639214], [-1.259124071786981, 52.16426530205397], [-1.2611838127799493, 52.16436540031888], [-1.2643073636002649, 52.16583235008639], [-1.2750995869679171, 52.16767032034557], [-1.2744599925788318, 52.169327829008814], [-1.2735216952083384, 52.169483930887765], [-1.2740383892756972, 52.170707147071916], [-1.2735684708145714, 52.171187002657994], [-1.2747770404725816, 52.17159098798743], [-1.274969322631585, 52.17271953848092], [-1.2757155376807634, 52.172962393034446], [-1.2769133444233127, 52.172859184982826], [-1.2760904237895059, 52.17427460887297], [-1.2769408340409483, 52.17468167680924], [-1.2773080325863873, 52.175392451825886], [-1.2778514190283639, 52.17524558817324], [-1.2780495176378535, 52.17556596555451], [-1.277763408270142, 52.17590045719308], [-1.2781940577998538, 52.176215964639205], [-1.2777094745848108, 52.17687829353237], [-1.278608841628982, 52.177699278211236], [-1.2780445321655782, 52.17804195573967], [-1.2784208541905535, 52.178556754344804], [-1.2781485439590574, 52.180205739839295], [-1.27911043580268, 52.18013971480933], [-1.2793055081333116, 52.18055983716363], [-1.2807909607458399, 52.18095187768039], [-1.2811239569620978, 52.1822503376881], [-1.279439180925636, 52.184146063477854], [-1.2789246472411477, 52.186111925024406], [-1.2812090966946512, 52.19193912100307], [-1.281151804863584, 52.1957615476705], [-1.2775874453784184, 52.19579470411271], [-1.274088664368788, 52.19538567800135], [-1.2714378735080238, 52.19635380207313], [-1.2680175248926864, 52.19651698659856], [-1.2625537254113068, 52.195948012844596], [-1.25499660720695, 52.197817341588845], [-1.2547945922853663, 52.19887521220583], [-1.257374655625037, 52.2056002028781], [-1.2573223897043746, 52.20856231582175], [-1.2598758335149787, 52.211839192616814], [-1.2609310906636764, 52.215978745270995], [-1.264166816411374, 52.21654200959637], [-1.2677537147686955, 52.21774299299594], [-1.270970257529916, 52.21921840985762], [-1.2722503144602149, 52.22025219270301], [-1.273379645780968, 52.22065920277553], [-1.2737959311494178, 52.22133963580043], [-1.275290040241028, 52.22199972337129], [-1.2763741138619111, 52.223123935708344], [-1.2769221162823547, 52.22516719869395], [-1.2756898516703268, 52.226307767562105], [-1.273524691979252, 52.22675024514943], [-1.2726077718334283, 52.22749626196663], [-1.278446131740977, 52.228692698072635], [-1.278631976915932, 52.23005236120731], [-1.2801610994917785, 52.233370154623415], [-1.282727484140951, 52.23630496258333], [-1.2839860181009732, 52.237087630437685], [-1.284657894279681, 52.238562576549754], [-1.2799839834658775, 52.2386177594711], [-1.2753866648666117, 52.23801692755394], [-1.266905185899583, 52.23522784022001], [-1.2663671204657398, 52.23668998305149], [-1.2676350038498416, 52.23742335972105], [-1.2660792657373952, 52.238872892420204], [-1.2667829231055117, 52.23945446868285], [-1.266165929655325, 52.240815364790656], [-1.2648129598898605, 52.241865997966784], [-1.2580835668629455, 52.24465960521455], [-1.254493680452958, 52.24755259319696], [-1.251759917082699, 52.248625809154724], [-1.2509933124293044, 52.248658698958316], [-1.2504971659122166, 52.24828695674028], [-1.2466958240776902, 52.249084536733406], [-1.2405821959670424, 52.24794579751712], [-1.237780804921083, 52.24841957042491], [-1.2351738434041266, 52.249255940465055], [-1.2347184594995841, 52.25043247700887], [-1.2323833268330275, 52.25121212550116], [-1.2325921301410896, 52.251507478425935], [-1.2320721428516161, 52.25167037517655], [-1.2323545052930918, 52.252035502923185], [-1.231714162728885, 52.25229917970722], [-1.2319464611765014, 52.252674768605786], [-1.2324404426974187, 52.252402858913804], [-1.2330133078988652, 52.253243537517896], [-1.2328220502567493, 52.25354797427031], [-1.232394040127074, 52.25347508791002], [-1.2324728778371286, 52.25408606010265], [-1.23150772336756, 52.25457969271403], [-1.2320944827515006, 52.254791130601056], [-1.2310963267516462, 52.254816993192755], [-1.2311584041287613, 52.25512487437257], [-1.2301561158960426, 52.25480277858891], [-1.2301797460125312, 52.25538463175078], [-1.2280262919886369, 52.255886662837725], [-1.2270335968090271, 52.257035478569925], [-1.2264489214959549, 52.25687067650269], [-1.2265592966858685, 52.257685076778024], [-1.2257856277497259, 52.258196904063865], [-1.2253627221025585, 52.258335331392054], [-1.2246939149805496, 52.25804144153027], [-1.223955394350756, 52.25871805604068], [-1.2242305731913126, 52.25890510504687], [-1.223702057734518, 52.25904454000552], [-1.224355083824279, 52.25923946503161], [-1.2237229597979138, 52.25995093071718], [-1.221870154675706, 52.26033429709808], [-1.2217249197646396, 52.26059138372157], [-1.2206444486157402, 52.26063279333884], [-1.2198756897963878, 52.26152588170993], [-1.219337125354972, 52.2613200054721], [-1.2179120830767491, 52.261788016577704], [-1.218384295461623, 52.26209861940856], [-1.2170952637752723, 52.26266189396263], [-1.215899108868611, 52.26401958453495], [-1.2163305666289126, 52.26423015911757], [-1.2158802788735694, 52.2645049868985], [-1.2165703153361822, 52.265344724608234], [-1.2159217631960932, 52.265728788934005], [-1.2157449480215496, 52.26636234224655], [-1.2166329307131427, 52.2666937771469], [-1.2169178369812572, 52.26749577085561], [-1.2176050256290605, 52.267745784998475], [-1.2177275590680512, 52.26819788062196], [-1.2174701811888227, 52.26841197542022], [-1.217056655924651, 52.26826452950625], [-1.2170194975804516, 52.268796458247834], [-1.21788363779428, 52.26898922150786], [-1.2176892195723414, 52.269291815264666], [-1.218707252878193, 52.26965276704684], [-1.2185737010701299, 52.270163476548774], [-1.219350111363256, 52.27034477273247], [-1.2187886282085554, 52.27110710129063], [-1.2195778468962672, 52.27214979246969], [-1.2187486901416562, 52.272210822041295], [-1.2201468266793711, 52.27296443981732], [-1.2197542020004541, 52.273454564130844], [-1.2209751268305506, 52.27353902004629], [-1.220161673551306, 52.27395716259904], [-1.2208802021514253, 52.274018527935766], [-1.2204895090811514, 52.27473606177282], [-1.220897809734588, 52.27502016649221], [-1.22060836882187, 52.27556580065483], [-1.2199720941301797, 52.27573956100862], [-1.2200386624104793, 52.27603669175925], [-1.2217055200867446, 52.27643515398919], [-1.221579718663109, 52.27742874725079], [-1.2206653434329218, 52.27774727082277], [-1.2217877371592485, 52.27868968242387], [-1.2211876408333628, 52.27938966002552], [-1.2223113543619883, 52.28050823693192], [-1.2235274821129893, 52.28078865975325], [-1.2228935341917873, 52.28099849305163], [-1.2233847991871085, 52.281657120827994], [-1.222557039302416, 52.28222258701068], [-1.2228503124346037, 52.28338701104317], [-1.2224347489877108, 52.284686982302844], [-1.2228311538570367, 52.28464824633923], [-1.223848622805815, 52.2854029079012], [-1.2234966310379685, 52.286247523266894], [-1.224245186378047, 52.28628299968144], [-1.2235818314353624, 52.28682249907554], [-1.2242119766694333, 52.286841918112486], [-1.2254309548404658, 52.28814821706513], [-1.227686540370276, 52.28928224458573], [-1.2276042352107268, 52.288620917953025], [-1.2282245944693424, 52.288947726874824], [-1.22871300392814, 52.288680291246614], [-1.229818235166332, 52.28886015888476], [-1.2296058639802636, 52.28927050910481], [-1.2309649884469662, 52.28875788731787], [-1.2311173943925553, 52.28910149739156], [-1.2318502754157026, 52.28920063765741], [-1.2307628454824777, 52.28951362047612], [-1.2316007304601142, 52.28981126912654], [-1.2316979123531269, 52.29021015388247], [-1.2324662023757915, 52.28978633652559], [-1.2337971281954367, 52.29031186818505], [-1.2318448466868432, 52.29426131596755], [-1.2288733269896301, 52.29515449678432], [-1.228970162515167, 52.29794037965599], [-1.2265055178930453, 52.29816883064117], [-1.2264293705853246, 52.30060377394492], [-1.224808364612564, 52.30147243254845], [-1.2238960587755787, 52.3027385858286], [-1.2231849338376672, 52.30281480317208], [-1.2229801032679126, 52.303125425360165], [-1.2209157438673606, 52.303340212855055], [-1.2209203197903522, 52.305835993185596], [-1.2175505485656999, 52.30596750856694], [-1.2171291573225638, 52.307247644166274], [-1.2154229435969202, 52.308930988680856], [-1.2125556245530202, 52.310407045478435], [-1.210504669848197, 52.313558882916304], [-1.209275673491013, 52.3146950881599], [-1.209247908677425, 52.31518761725488], [-1.2120268227158586, 52.31606478937015], [-1.213005898991153, 52.31570631727347], [-1.2151743903987309, 52.31692897646622], [-1.2156750805403207, 52.3165771908763], [-1.216265999443945, 52.317088205322015], [-1.2231122610015162, 52.318535876530795], [-1.2259084462805814, 52.31870710907545], [-1.2259044002799009, 52.31893905854936], [-1.2313244208048122, 52.32000471394312], [-1.2342299079510368, 52.320144014581594], [-1.2350916348000731, 52.320538948258736], [-1.2370484529434014, 52.32030344396097], [-1.2421212252593643, 52.321886934825834], [-1.2425576651791943, 52.32166854310163], [-1.2437215500430925, 52.32190797282521], [-1.244741679518717, 52.32144695032163], [-1.2463971536605962, 52.321596021223975], [-1.246446427706991, 52.32197121694968], [-1.2476486914450624, 52.32193933100423], [-1.2487937879853306, 52.3232834635922], [-1.2492848291841936, 52.3231400827593], [-1.2500582491869465, 52.323388562780785], [-1.2507380279150726, 52.323100680576054], [-1.2513604462417665, 52.3236881140687], [-1.2519928111452108, 52.32360044326701], [-1.252376975319996, 52.32405594936176], [-1.2534087945659478, 52.324033712056746], [-1.2543738211803852, 52.32476089662156], [-1.2551405156440238, 52.324714410650415], [-1.2572915696470135, 52.325498474019454], [-1.2609060374685774, 52.32784780744549], [-1.2652791985453813, 52.32836059678437], [-1.2644340978631208, 52.32906106207402], [-1.2642098888724944, 52.330630284837675], [-1.2624658782075961, 52.33217295537516], [-1.2630868631170438, 52.332863676123964], [-1.2624564185021505, 52.33406626564516], [-1.2580283935072354, 52.3372427001188], [-1.2550458879617359, 52.33829654347828], [-1.253289401159415, 52.338279168285794], [-1.252995250550869, 52.33883733843353], [-1.2507562197912034, 52.33913693022576], [-1.2492678706590123, 52.33992047977463], [-1.249154563943787, 52.340629975619684], [-1.248589701601654, 52.34096172035568], [-1.2455860754412087, 52.3418560167686], [-1.2449553232881174, 52.34165515686135], [-1.2435583073686993, 52.341976166506726], [-1.2426722627598323, 52.342551193992186], [-1.2413460736908999, 52.342592211897966], [-1.2408708374649848, 52.34299999256421], [-1.2396054213698278, 52.34325798797525], [-1.239298876589597, 52.343933874787815], [-1.2382809243058692, 52.34379789475347], [-1.2381517850666344, 52.34413599209802], [-1.2334032857934656, 52.346499369761084], [-1.2314962301943848, 52.346847486468235], [-1.2311353355925123, 52.346663586286894], [-1.23031370983649, 52.3469782943101], [-1.2298355038769653, 52.34703989123345], [-1.2275491677587147, 52.346485524990364], [-1.2259124515888564, 52.34664747327433], [-1.2239322855995405, 52.347476016260025], [-1.2244231051852588, 52.347780418675725], [-1.224206553777378, 52.34807829145175], [-1.223959762539806, 52.34791848593048], [-1.223475703329424, 52.34814728272924], [-1.2237951689277557, 52.34860155691817], [-1.2226000690498766, 52.34885893242229], [-1.2225136982590936, 52.349180217705964], [-1.2202756683368214, 52.3497184051904], [-1.2169076876156615, 52.34955943592472], [-1.216581547017096, 52.34990429410678], [-1.2150094314943904, 52.34972399482841], [-1.214607217519237, 52.349968577135186], [-1.2141007641931574, 52.34963347172765], [-1.2136738069027793, 52.34994888961211], [-1.2128969393434628, 52.34971623849656], [-1.2131467225033465, 52.349535359189424], [-1.2126253387620183, 52.34913543530087], [-1.2121223805387962, 52.348938756771965], [-1.2113349812284235, 52.34912952921182], [-1.2107925630370342, 52.3487564207363], [-1.2106761920608764, 52.349112548964534], [-1.2096587726322825, 52.349277508122135], [-1.2093305449009046, 52.349566607463686], [-1.2081520958505743, 52.34962432979033], [-1.207788294128352, 52.35018291035095], [-1.2064127205989452, 52.35042534177916], [-1.2061954737016192, 52.35083570421458], [-1.204219209970759, 52.351253920870185], [-1.2034608997110192, 52.35178196951957], [-1.2024929179243669, 52.35181139347446], [-1.2023201080621424, 52.352353271193685], [-1.2003796351791631, 52.35249295294103], [-1.199999125322982, 52.35226020047595], [-1.1997582060939869, 52.35259660152768], [-1.1984853879037485, 52.35266626159821], [-1.198234293572412, 52.352915318299566], [-1.1969941639442743, 52.352723548834675], [-1.1967483812001478, 52.35299969232026], [-1.1956547222567449, 52.353068651260266], [-1.192423750004525, 52.35174572750403], [-1.1926381914410475, 52.3514235413864], [-1.192033116720139, 52.35102834708962], [-1.1915089783618555, 52.35175115817645], [-1.1893786992943134, 52.352551942096646], [-1.1889796970396123, 52.352453035990386], [-1.1882716464095342, 52.353193535067405], [-1.187839283430026, 52.3530718355761], [-1.18662975608379, 52.35425566239748], [-1.1842564932392197, 52.353651325911585], [-1.1838320949783803, 52.35460946272783], [-1.1792484048314769, 52.35436013060393], [-1.1782069540388416, 52.35509645714064], [-1.1749870788061898, 52.35627336182968], [-1.174706626852861, 52.360528298638854], [-1.1721403241876265, 52.361284474574255], [-1.1748205954950424, 52.36434908962562], [-1.1870967567811992, 52.378582255307265], [-1.2021995906111245, 52.39599148593089], [-1.2025982758518625, 52.396783567978574], [-1.2016265941108495, 52.396714996774804], [-1.1991135030060898, 52.39622147313517], [-1.1979538835231192, 52.395658980956405], [-1.1974123529689553, 52.39602029907968], [-1.1963547112778279, 52.395668795358624], [-1.194078006461147, 52.39616749037791], [-1.190399056805372, 52.3952262393656], [-1.1902509025567996, 52.396495552839426], [-1.1893949997299729, 52.39636565766821], [-1.1880606185386948, 52.39499899519634], [-1.1882723116125806, 52.393954813406445], [-1.1877848204477015, 52.39328978843824], [-1.1845875020085148, 52.39254588826672], [-1.1840054991153042, 52.39215441126648], [-1.1804637222955905, 52.39319793240953], [-1.178003681999886, 52.392878778909314], [-1.1774664718442054, 52.39316364091754], [-1.1772810580378967, 52.39404521720485], [-1.17598530673282, 52.394733824505], [-1.1752134881526677, 52.394510850876294], [-1.1741550194916668, 52.39500066534115], [-1.1739375584726317, 52.394608988785684], [-1.1735087576306045, 52.39513995497888], [-1.1712677386692332, 52.39599814930111], [-1.1693626182274146, 52.39562518301766], [-1.169410577351673, 52.396123620842545], [-1.168885821940855, 52.396366198698054], [-1.1684715233000407, 52.39620510137568], [-1.168228110863354, 52.39679676093347], [-1.1679078646244156, 52.39640255219514], [-1.1662889527846123, 52.39683433585502], [-1.1657670744213853, 52.39753996876307], [-1.1659824480187602, 52.39796858594961], [-1.1666629518759906, 52.39780971632276], [-1.1670118823819708, 52.39801269132454], [-1.1668901208618596, 52.39831391207762], [-1.1658525424801212, 52.398309293961134], [-1.1651850922284468, 52.39894469245777], [-1.1643496746035427, 52.398661879150815], [-1.164233965187342, 52.39918693431754], [-1.1638690927620876, 52.398974940703845], [-1.1627657615247173, 52.39933841867619], [-1.1623224163295076, 52.399079037663284], [-1.160386925053426, 52.39960745341752], [-1.1602441215218784, 52.399233357058996], [-1.1588840241891525, 52.39926862998191], [-1.158713365296982, 52.399894940861664], [-1.156595674480511, 52.40003444603178], [-1.1550790195073617, 52.399331383042735], [-1.1540898953239003, 52.399637175224115], [-1.1538482347967813, 52.39935943239639], [-1.1519800680858132, 52.399290326488924], [-1.1521467113910684, 52.398802496773754], [-1.1515121370324444, 52.39878077920858], [-1.1512020766332642, 52.39831739224756], [-1.151519671830996, 52.3977748329327], [-1.150874439143735, 52.397627296599616], [-1.1497364688795466, 52.39795445306839], [-1.1500096017755908, 52.397506848618406], [-1.1494830508587248, 52.39699156916331], [-1.1483113252806443, 52.39846207224664], [-1.1478552143935572, 52.39833556393158], [-1.146650521581468, 52.39884025815176], [-1.146326710306795, 52.39856460311573], [-1.1452732005781483, 52.39923395109876], [-1.1445147433288685, 52.398931781057634], [-1.1437895103350086, 52.399574729273155], [-1.143512376156865, 52.399311089216695], [-1.1422822138253252, 52.39968792776705], [-1.1403146384000056, 52.401554419669424], [-1.1385490418954927, 52.40202699993638], [-1.1388363566706794, 52.403049473053535], [-1.1381840687285396, 52.40318142559196], [-1.1379392837641331, 52.403901538282845], [-1.1386218140540836, 52.404551113994515], [-1.1381629386176682, 52.40539828219508], [-1.1363029167736003, 52.40640239642135], [-1.1366528854432232, 52.4075979864906], [-1.1348263314894749, 52.4096668313919], [-1.1349242952861447, 52.411276805422766], [-1.1344046811841886, 52.41228439514307], [-1.1333886467743024, 52.41296379810878], [-1.1322510115148912, 52.41287636430344], [-1.1326467337814912, 52.413237968374226], [-1.1323939961179286, 52.4136082977604], [-1.1290781940936108, 52.415196778468086], [-1.1288880414581937, 52.415815712943676], [-1.129282640004422, 52.416086542764745], [-1.1257164529485169, 52.41768027631595], [-1.1245874523384085, 52.41789221515032], [-1.123348371262415, 52.417498272447745], [-1.1235675309054032, 52.41786668649523], [-1.1227949529892138, 52.41804161233931], [-1.1222614559202235, 52.41780666960251], [-1.1222434176312912, 52.417237431249205], [-1.1216268598498786, 52.41748010756042], [-1.1207695245997518, 52.4171923303246], [-1.1196273338206775, 52.418212302627715], [-1.1204827222000122, 52.418750920641706], [-1.1198140326932766, 52.41887626903597], [-1.1194488800772453, 52.41949658123846], [-1.118915164085916, 52.41949170843182], [-1.1180034510093706, 52.420895539485244], [-1.1166551413773778, 52.42096097451285], [-1.1162415045740652, 52.421128652113815], [-1.1165404746240248, 52.42140240587651], [-1.1160174501411726, 52.42152261841248], [-1.1154829560515596, 52.42141607261438], [-1.1158923136463526, 52.421092788170576], [-1.1135739315242823, 52.42157533366259], [-1.1119254868305144, 52.42113506185519], [-1.1119569838994825, 52.42139594309453], [-1.111274946996299, 52.42131352508694], [-1.1107374762258961, 52.421789610874924], [-1.1098311222582948, 52.42173785490125], [-1.109545179815226, 52.42243243280352], [-1.108755542282019, 52.42199129889094], [-1.1070951739769557, 52.422359136904966], [-1.1063973115460886, 52.42334728297484], [-1.1055156617865525, 52.42331365590756], [-1.105344552814357, 52.42377621932683], [-1.1046253842377056, 52.42370606595723], [-1.1043372849528548, 52.42420917595479], [-1.1037055631910704, 52.42395803595799], [-1.1030539353162931, 52.42432977288899], [-1.1025952303899236, 52.42410330740492], [-1.1026188024572614, 52.42453687562102], [-1.1019808340067343, 52.42481433885782], [-1.101191608028208, 52.42507617943623], [-1.0982174147450139, 52.425038262221335], [-1.0975503387775798, 52.425943903473254], [-1.0964064704894516, 52.42650427526453], [-1.095571235745963, 52.426498789821096], [-1.0952596985212888, 52.42706281575227], [-1.0944600303999288, 52.426972211616054], [-1.0933721698851804, 52.4276660010829], [-1.0936163073356329, 52.42809577921173], [-1.0940601982687246, 52.42832306496687], [-1.0946082396558734, 52.43022062028258], [-1.0929856496429047, 52.43152165908048], [-1.0921089807863447, 52.43181072054857], [-1.092428806715412, 52.4320631237326], [-1.0918884023610107, 52.43259482620346], [-1.0912718655852889, 52.43239316922634], [-1.090896897772221, 52.43310589223994], [-1.0900434296779604, 52.43340859864598], [-1.088765241354592, 52.4329052417698], [-1.088753092969719, 52.433423831206596], [-1.088252711900887, 52.433294146916076], [-1.0870700587806879, 52.43386761069746], [-1.0863705615595542, 52.43383075384545], [-1.0864597820484894, 52.434073213310235], [-1.0858311938307366, 52.43466532245099], [-1.0846454389127347, 52.43516863427977], [-1.0843943706643213, 52.43628144129984], [-1.0827980879854953, 52.43600932934708], [-1.080818551757622, 52.43627447186944], [-1.0802992923471906, 52.435990826976635], [-1.0794040817980781, 52.43631739897482], [-1.078415359255931, 52.43575946999109], [-1.077751591798499, 52.4360608686441], [-1.07767722699031, 52.43567821989344], [-1.0762064289869375, 52.43531253573421], [-1.0766562498136474, 52.43490692505966], [-1.0743792645592567, 52.43448099566333], [-1.0740648773571753, 52.43404253931732], [-1.073850965353016, 52.434284432440926], [-1.072987084436931, 52.43423272644606], [-1.072889643246219, 52.43396943079119], [-1.0717432902484678, 52.43399378471309], [-1.0713843455682248, 52.43364565780315], [-1.0709324868249128, 52.43366188298268], [-1.0709119099598245, 52.43393683626551], [-1.0693377963441812, 52.43352980986233], [-1.0691558172875644, 52.43302039001152], [-1.069811128947454, 52.43284489062473], [-1.0699624004272867, 52.43230124254812], [-1.069096277177422, 52.43207593643639], [-1.0685139657715925, 52.431026704961404], [-1.0692657664456724, 52.43066762968007], [-1.0692465223476408, 52.430251255341574], [-1.0684855088103478, 52.430144511736536], [-1.0689447055488417, 52.42998544876307], [-1.0684439928629736, 52.42980705340885], [-1.068958112459652, 52.42956205004899], [-1.0684024480309031, 52.42947678529097], [-1.0681319532326385, 52.42884173649168], [-1.0663968431576012, 52.428827155000654], [-1.066089968196647, 52.428176534215716], [-1.0644663381489838, 52.42844780731803], [-1.0640200826402826, 52.42799569741923], [-1.0630666842112209, 52.42815172670775], [-1.0626606395271492, 52.427462562525385], [-1.0620786195823007, 52.42758108144112], [-1.0610664039838558, 52.4263503535514], [-1.0613720969502485, 52.42483708161432], [-1.059774914655552, 52.42387501658579], [-1.0599160929977092, 52.42346252141781], [-1.0590674328272016, 52.42312223631983], [-1.0582950891040428, 52.42354858127693], [-1.0561571924747581, 52.423123315141154], [-1.0548959418891928, 52.42192748554719], [-1.0532957482562384, 52.42187055785034], [-1.0531115315590716, 52.421549926291796], [-1.0519264765132557, 52.42201966231001], [-1.0509720048073736, 52.42188518948526], [-1.0498731617532546, 52.42224594488526], [-1.0500068717133693, 52.425192227351324], [-1.0495094834033565, 52.425823846874906], [-1.0449408429463225, 52.42932832209996], [-1.0422882085771443, 52.430657288108655], [-1.0392613501807175, 52.43072261910462], [-1.037655746236795, 52.433734854580436], [-1.0350285786078306, 52.43509163763276], [-1.0342864390267945, 52.43626873295569], [-1.0338408816079383, 52.44043209674229], [-1.035146428676972, 52.44322976941537], [-1.0372315154067844, 52.44443260366029], [-1.0382196045835368, 52.443717755061066], [-1.0396962268720549, 52.44333419960224], [-1.0427900780570016, 52.44347521618589], [-1.04411101779104, 52.44450996269947], [-1.044523001798553, 52.44573149157484], [-1.0411347806644762, 52.44836337482821], [-1.0378656885730202, 52.45152299287629], [-1.0357939201701367, 52.452322483553985], [-1.034661628198877, 52.45329588088833], [-1.0304185902295204, 52.45479584321584], [-1.028734348392242, 52.456096396989736], [-1.0277530737142362, 52.458487887117435], [-1.0269153884951965, 52.45896822647237], [-1.0250676992435674, 52.45899795456592], [-1.0246545909744924, 52.45870864934434], [-1.022710500016394, 52.46010053747246], [-1.0203712983619975, 52.46098832690412], [-1.0167848363030385, 52.461761363150615], [-1.0147185845903675, 52.46293810769232], [-1.0138069089959336, 52.46283074842385], [-1.0108448794523728, 52.46370956104902], [-1.010922848953245, 52.46404284952852], [-1.0056491467039699, 52.46500913995475], [-1.0043283279134418, 52.465945612189515], [-1.0044128650761528, 52.46630861934829], [-1.0034687614414792, 52.46627011348439], [-1.003447350842856, 52.466696941344146], [-1.0028393075691149, 52.4668950314424], [-1.001439052338479, 52.469577660955174], [-1.0010277319285361, 52.46966766233324], [-1.000704951842759, 52.470923581190824], [-0.99792620362222, 52.47101871934584], [-0.9963111039587257, 52.47037840466846], [-0.9949891113263066, 52.4694106161649], [-0.9940664900314126, 52.4696518270725], [-0.9940461335200266, 52.47002833081705], [-0.9928534538791749, 52.469523768141144], [-0.9923431014941727, 52.469825096965856], [-0.9908525954725238, 52.4694050693547], [-0.9904620647072093, 52.46987467349704], [-0.9894848876824359, 52.47005327807466], [-0.9897285011345786, 52.47027564753457], [-0.9893131383554411, 52.47048250380547], [-0.9852114003023367, 52.47132487255671], [-0.9842857024195106, 52.47182752511276], [-0.9842236942147762, 52.47157884073683], [-0.9827351976526082, 52.471583219388386], [-0.9821389077110061, 52.47056481141689], [-0.9799630026704763, 52.470435523929325], [-0.979334852018375, 52.47010016621701], [-0.9785391426545041, 52.470323476685095], [-0.9767991507449965, 52.47102045363329], [-0.9762379048147648, 52.470653301750176], [-0.975534172280913, 52.47122710219171], [-0.9750606047869607, 52.47101529361705], [-0.9750238505798544, 52.471771925040585], [-0.9720968512459661, 52.47241630285741], [-0.9716512076172787, 52.473027373597446], [-0.9727204418371329, 52.47320212573358], [-0.9728090483448703, 52.47376031664453], [-0.971679478307108, 52.47434567496432], [-0.9714365843123678, 52.47484517079355], [-0.9704371049576445, 52.4750298059985], [-0.9705073381168335, 52.475614801611385], [-0.9692640678941248, 52.47551401022586], [-0.9692458233236114, 52.476170227783314], [-0.9678614173840948, 52.47719292212803], [-0.9646765795167443, 52.47682347477633], [-0.9643223387905095, 52.47642023906516], [-0.9588988810876933, 52.47576498330212], [-0.9524204476176502, 52.477445592171875], [-0.9518888553382809, 52.477388756052946], [-0.9518606414484052, 52.477028006649356], [-0.9508242017305378, 52.477209362132825], [-0.9503445239300935, 52.47688415439065], [-0.9493885404366788, 52.47696473958351], [-0.9489080168006998, 52.47630867798905], [-0.9484974069648662, 52.476361652951155], [-0.9485837607291003, 52.475952398168204], [-0.947101639280083, 52.475683067118766], [-0.9464760768684032, 52.47530252940082], [-0.9465348155583914, 52.47444903326876], [-0.9461103685573757, 52.47427888978707], [-0.9466448488434677, 52.47390786914576], [-0.9464585965210036, 52.473197794116125], [-0.9453455766352798, 52.47313754718166], [-0.9455349626069325, 52.47279122813031], [-0.9450887588461546, 52.472486070224235], [-0.9444282618728521, 52.47283268014292], [-0.9438724257819232, 52.47274674046446], [-0.9442261653796525, 52.47063542967565], [-0.9426579081368875, 52.47083893074236], [-0.9422047792469821, 52.46775566271328], [-0.9358656601475172, 52.46721967962791], [-0.9360294465440465, 52.46690019797836], [-0.930244379006011, 52.46592651493498], [-0.9238047658555881, 52.464217503254446], [-0.9223218925439827, 52.464185131194796], [-0.9167592893115745, 52.46262932162299], [-0.9142425820037144, 52.46226282813959], [-0.911270021358039, 52.46348877396888], [-0.9099037381435262, 52.46147397418374], [-0.9077370671618683, 52.46147825870979], [-0.9065969016782021, 52.463061808474826], [-0.9045911519580588, 52.46286251002793], [-0.9015567490109844, 52.4608259541582], [-0.9012938835030461, 52.45973922017287]]]}             
    elif idx == 2:
        geometry = {"type": "Polygon", "coordinates": [[[-0.4950369971585954, 52.640217917420934], [-0.4947846494961343, 52.64029560344376], [-0.4939150557473425, 52.64005176548314], [-0.4922071654558945, 52.636854508660434], [-0.4911251114792169, 52.63634990121944], [-0.4908165944436947, 52.635351633743944], [-0.4889454000548846, 52.63343348042954], [-0.4888352076105792, 52.632812623861476], [-0.4880707312058649, 52.632486404689935], [-0.4861190621933837, 52.63440342559229], [-0.4851645099636505, 52.632817880427616], [-0.4767720111512203, 52.630545345372326], [-0.4753225220441737, 52.62888324674654], [-0.4735150819317147, 52.62821625295732], [-0.4709714407300196, 52.623749312322126], [-0.4710743254444502, 52.62134562977679], [-0.4721068096041935, 52.621266373377374], [-0.4709730724613884, 52.617935080456455], [-0.4748027049826183, 52.61689213519749], [-0.47374109684222, 52.61441502759095], [-0.4772318616957465, 52.61465858672396], [-0.4796487395301907, 52.61443167406058], [-0.4810361153760324, 52.602768827564546], [-0.4854515467537652, 52.602161872538936], [-0.4853412145570334, 52.60013671956238], [-0.485860417693979, 52.59891253734145], [-0.4886409115617606, 52.59689096099477], [-0.4907187517253419, 52.590516184998414], [-0.491440349071488, 52.59013880333355], [-0.4926718343612518, 52.59012931655273], [-0.4941618929794467, 52.58968520873208], [-0.4945529879407566, 52.58865449049336], [-0.4976635597098336, 52.58683292822704], [-0.4917373629524999, 52.58127148529557], [-0.4894351561821145, 52.58053640066086], [-0.4853444955346095, 52.579962754003056], [-0.478847095302733, 52.57742051766206], [-0.4807483794521095, 52.57693781953673], [-0.4814675099920813, 52.576286240943766], [-0.4788278709684706, 52.57362712814877], [-0.475399699605895, 52.57435259825063], [-0.4689212229109546, 52.57490824274276], [-0.4610185680602448, 52.57600696680477], [-0.4477063169329697, 52.57866616509607], [-0.4354080902015643, 52.58048763044492], [-0.4250407117512077, 52.582394726851554], [-0.4246456795616515, 52.581475111387306], [-0.4199955209211316, 52.581336759513654], [-0.4181897767814848, 52.57971591316683], [-0.4153946826148129, 52.578724633033005], [-0.4150919287284974, 52.575988279073194], [-0.4159052049020095, 52.573365728330955], [-0.4147316236355044, 52.572271175660745], [-0.4157090207158932, 52.57008602763363], [-0.4146471227606775, 52.56949998893525], [-0.4119453665193361, 52.56888836276461], [-0.4073737893817481, 52.56580253635963], [-0.4073050385574578, 52.56403669681434], [-0.4087418542862372, 52.56212571907279], [-0.4098641722562456, 52.561605822010456], [-0.4117860602760094, 52.56178091206346], [-0.4133811761651576, 52.56148582486726], [-0.4152678658156707, 52.56210449078141], [-0.4165965039376351, 52.561956795206655], [-0.4170730902670896, 52.56142280014436], [-0.4169224327974578, 52.56073211328969], [-0.4196082000189823, 52.558943758893726], [-0.4171151508423324, 52.5558680528971], [-0.4163828691985074, 52.55564155551213], [-0.416058148902292, 52.55269637392681], [-0.4153536364496547, 52.55153520244376], [-0.4140927876532395, 52.551528205915105], [-0.4117552040483091, 52.55079021832746], [-0.4112388373454302, 52.54993543521476], [-0.4033205876697125, 52.54890644637784], [-0.4020756253825575, 52.548303439225286], [-0.4022190135865419, 52.546789515973344], [-0.4036929735377055, 52.545145237696026], [-0.4038188953093749, 52.543748912255154], [-0.4036720337258736, 52.54279661061373], [-0.4025426468226689, 52.54185801782418], [-0.4024052048093755, 52.54068733764677], [-0.4012989194525658, 52.53866659520325], [-0.4026583005406858, 52.534893542808746], [-0.4046172402907424, 52.53356409078434], [-0.4046841117578041, 52.5322892067519], [-0.4071556202051627, 52.531459353887755], [-0.4100816725403985, 52.53118401801544], [-0.4119327982785767, 52.529729051122445], [-0.4122506981407374, 52.52876052297772], [-0.4133615588559695, 52.52841211563777], [-0.4138363910101733, 52.52742501348213], [-0.413618429543107, 52.525661752723536], [-0.4130801643423337, 52.52517528607795], [-0.4116910208876096, 52.52547762058965], [-0.4118622977176448, 52.52473551541173], [-0.4087354727634583, 52.52250066234411], [-0.4063101721518325, 52.52235738495574], [-0.4065124063714609, 52.52206160916499], [-0.4043243320126781, 52.52167430787682], [-0.4004868135370369, 52.5218589861674], [-0.3985082421302966, 52.52086212996954], [-0.39676531559621, 52.52059845715826], [-0.3946635230929308, 52.51978870844767], [-0.3907652160339684, 52.51942198675448], [-0.3908475792003076, 52.51870108127413], [-0.386640362469319, 52.516712586904326], [-0.3874784302021938, 52.5161621535923], [-0.3834569645770523, 52.513781308972774], [-0.3809112427885158, 52.512757528987706], [-0.381050536991784, 52.51253463861251], [-0.3794964339748423, 52.51191906339877], [-0.3779431144847524, 52.51063996491866], [-0.3752688834366083, 52.51091166606565], [-0.3730278204410173, 52.51078380287754], [-0.3714810818361159, 52.5103318990684], [-0.3686979059199317, 52.50876780486941], [-0.3622742661684801, 52.507357440240625], [-0.3582002401144352, 52.50576982925566], [-0.3558038655144192, 52.50590553721569], [-0.3543621098179253, 52.50647710504517], [-0.354095625606299, 52.50481370911473], [-0.3521923285367941, 52.503307295142136], [-0.3530576619016424, 52.502860848730066], [-0.3532431167515944, 52.50231586176045], [-0.3546641523485756, 52.50185996888172], [-0.3553116125593295, 52.501130850172245], [-0.3557001299089355, 52.50126298430399], [-0.3562345906294071, 52.50040375755272], [-0.3573478369563891, 52.499941758465994], [-0.3579920679134795, 52.49819213788709], [-0.3586070829360928, 52.49821055828848], [-0.3585317687140943, 52.49766284450893], [-0.359211720182777, 52.49732343904811], [-0.3591850246829611, 52.496141645283146], [-0.3597069492330003, 52.495853975529805], [-0.3589290786854968, 52.49474634537006], [-0.3591950988754221, 52.494366952852246], [-0.3581588137285655, 52.49387251177769], [-0.3584408256722604, 52.4929854133463], [-0.3576781512569533, 52.492104490551064], [-0.3583632133070173, 52.49123107516051], [-0.358142108392131, 52.49103745505076], [-0.3589819523395466, 52.49055636612549], [-0.3587763368565777, 52.490341390165916], [-0.3594359420529957, 52.49019315259191], [-0.359416609332966, 52.48984135143521], [-0.358351603609727, 52.48940673476326], [-0.3582462909976896, 52.488833436386614], [-0.3568185242394856, 52.48778148573416], [-0.3563950147409075, 52.48669844204832], [-0.3554126630232933, 52.48622539804205], [-0.3546319404941419, 52.48508434945997], [-0.3533336058115917, 52.48475340232159], [-0.3520981115430908, 52.48352780810167], [-0.3513196848781548, 52.48347202083128], [-0.3500854279406, 52.4825305430139], [-0.3498496299901814, 52.48158950103978], [-0.3502917515465624, 52.48071543850839], [-0.349254433230299, 52.4792768551355], [-0.3484622650894717, 52.47907785264571], [-0.3474985075104036, 52.477995410533396], [-0.349011017636737, 52.47354536279714], [-0.3497356366093428, 52.472870291356024], [-0.3482978897396155, 52.47123816334183], [-0.3422967433858871, 52.469086355000314], [-0.3430821513494504, 52.468480576858965], [-0.3416080409934435, 52.466925155331445], [-0.3448321626565136, 52.46582303778079], [-0.3494889454031014, 52.46214696944843], [-0.3505777360244726, 52.46290936026428], [-0.3535279451706846, 52.46025763908361], [-0.3540456952964588, 52.45801802223088], [-0.3554769807347801, 52.45614084588883], [-0.3602737865947631, 52.45248787687383], [-0.3634992988621596, 52.450593221330955], [-0.3618504386520391, 52.44898619367568], [-0.3618968300995153, 52.44820997073938], [-0.3635055643185966, 52.44708865111165], [-0.3630804749381175, 52.446567554543506], [-0.3673047349862374, 52.44355012627273], [-0.3688161774162952, 52.44119202938393], [-0.3702344991852597, 52.439913302620475], [-0.3688777661763564, 52.439603284160235], [-0.3700589412513297, 52.43789595868009], [-0.3712966305755309, 52.438041634975804], [-0.3718822069498522, 52.437042640820664], [-0.3718842471235326, 52.436826048098354], [-0.3703247101894478, 52.43683063308715], [-0.3693595189692412, 52.43492293604344], [-0.3677518514277121, 52.43447902194816], [-0.3665124359264751, 52.43501936717587], [-0.3644393842390823, 52.43403228075275], [-0.3624256848802819, 52.433514364625644], [-0.3659574279739581, 52.43164815356444], [-0.3723833016174918, 52.430428604852445], [-0.3794760533513322, 52.42794293844339], [-0.3869568141767689, 52.42386805401324], [-0.3895621548014249, 52.421749322237964], [-0.3923522260786244, 52.41992166237529], [-0.3979060181600926, 52.41831217373629], [-0.4009638691953941, 52.415447625991256], [-0.4074767340087945, 52.413476653082114], [-0.4108513350036017, 52.412777552424274], [-0.4130181836125852, 52.41258464392761], [-0.4170899694677274, 52.41158273646469], [-0.4184483415026309, 52.40813491108696], [-0.4196290671685623, 52.40730831018607], [-0.4202963069434117, 52.40504964204326], [-0.4159534177801748, 52.40378861800642], [-0.4161742129105997, 52.403573069183025], [-0.4219233705645651, 52.400896004296435], [-0.4215482620842752, 52.40073999169291], [-0.4224526648647823, 52.400110113781096], [-0.424571628397769, 52.399384875901205], [-0.4248515939520008, 52.399612507171916], [-0.4318972659188275, 52.39636331084612], [-0.4329367274399487, 52.39631327695528], [-0.4370148680264473, 52.38817113257558], [-0.4392720145415999, 52.386297578238164], [-0.4437783769624873, 52.383841327461646], [-0.4462386063549805, 52.38319758737651], [-0.4487727480863081, 52.38371273781536], [-0.4509028185601368, 52.38473595542881], [-0.4549544828947228, 52.38568629263116], [-0.4547632282675531, 52.384557281639985], [-0.4568723375220892, 52.3840777111432], [-0.4568485665837029, 52.382313345372104], [-0.4624908027123442, 52.3830297193378], [-0.464073378860647, 52.38158663054447], [-0.4683071899305929, 52.38287782763931], [-0.4699050273362674, 52.37988023436097], [-0.4748832221140682, 52.38025116617661], [-0.4758447497180167, 52.38010537365265], [-0.4769975562536649, 52.38067400546077], [-0.4779729985391613, 52.38072252293009], [-0.4788643222807822, 52.38013798023838], [-0.4847772355431664, 52.38161556849943], [-0.4854578628244089, 52.38130601437647], [-0.4867541198374123, 52.37901558149779], [-0.4896256278611367, 52.37921050359078], [-0.4942127450729856, 52.38118767805924], [-0.495962669531308, 52.379499929739445], [-0.4904772924041171, 52.37508737871562], [-0.4885353438187524, 52.37400795925477], [-0.4923202755522008, 52.37169883999661], [-0.4985464176926339, 52.36682318799608], [-0.4995032176122574, 52.36697744542117], [-0.4999018012070171, 52.36518519655571], [-0.4987162538841618, 52.36008040205493], [-0.4960221360604106, 52.35837296356435], [-0.4930053732558884, 52.35743992058566], [-0.4880302257776231, 52.35369455599067], [-0.4842944827838176, 52.352371787561665], [-0.484174411809405, 52.351762453819646], [-0.4820748457621313, 52.35047317446561], [-0.4806253942904565, 52.349800011993075], [-0.4782883142325135, 52.349320429324294], [-0.4773554701377765, 52.34839402374878], [-0.4784450941385731, 52.34633380947113], [-0.4805206920464329, 52.344415790346204], [-0.4832471843708575, 52.34092997783605], [-0.4724524979021629, 52.33955914295114], [-0.4677900038944774, 52.338426094397285], [-0.4666737988385651, 52.33891244891239], [-0.4671152138216416, 52.33527139645613], [-0.4652468988727037, 52.332599332389584], [-0.4648130142041247, 52.33029463565662], [-0.4645272227673407, 52.326086762292576], [-0.4653831532421966, 52.32293844891827], [-0.4741680206942567, 52.3197372177537], [-0.4762786743677817, 52.31804901833948], [-0.4781499994857429, 52.31926716424383], [-0.4818979613183258, 52.320747603875766], [-0.4871573396057648, 52.32106773734058], [-0.5066716670208515, 52.31989909589181], [-0.516856395539153, 52.317636669171065], [-0.5198465266168537, 52.31767776775043], [-0.5198132848505811, 52.316607463585946], [-0.5140679953444159, 52.314682287126054], [-0.5183281669946693, 52.31165367717624], [-0.5406217155579074, 52.29147767213648], [-0.542056243886871, 52.289717842474346], [-0.5419809391202831, 52.28884117252352], [-0.5411680231732363, 52.28787899164696], [-0.5359953477047932, 52.28285472428959], [-0.53493745044177, 52.28243784542037], [-0.5352526461071243, 52.28221524688377], [-0.5340203244708563, 52.281176713562225], [-0.5344712535256266, 52.27973031966111], [-0.5341822947441107, 52.277601238653176], [-0.5325411970285743, 52.2725252209188], [-0.53120773949421, 52.27038853807147], [-0.5364490733307058, 52.268194192829924], [-0.5393424708355327, 52.26608115318269], [-0.5376208530024632, 52.261754017783], [-0.5399169126651293, 52.257292342464744], [-0.5409212332166816, 52.25651269535041], [-0.5426990023809001, 52.25595741344523], [-0.5445370457797597, 52.25611311470304], [-0.54616122617938, 52.25671395909689], [-0.5499864611895804, 52.25645170765506], [-0.5523436350509091, 52.25690767402188], [-0.5547553386283854, 52.258166299290416], [-0.5580629783222245, 52.25633660599349], [-0.565709983905265, 52.25345466804849], [-0.5715996457970353, 52.25823375819547], [-0.579370041669336, 52.26642121071759], [-0.5809002761425445, 52.265218626024954], [-0.5876343884155297, 52.27031992336846], [-0.5881272944735223, 52.270764540767075], [-0.58635164910851, 52.27281754773143], [-0.5883649949911587, 52.273803659842635], [-0.595524108372406, 52.27582026546849], [-0.6021388546446589, 52.27857260976383], [-0.6057127784343035, 52.278845950027915], [-0.6076361227591146, 52.27884257591076], [-0.6106327236635172, 52.279483863339244], [-0.6147435914510135, 52.28289838190817], [-0.6152695061493192, 52.28488342313675], [-0.6159262686825818, 52.28568506170803], [-0.6202079409584106, 52.28872638907662], [-0.6212691883828478, 52.290105368196414], [-0.6223732825336827, 52.290717054635806], [-0.6275541811941868, 52.292165617628754], [-0.6342742946413282, 52.29507024842567], [-0.6362466574666603, 52.29626088851626], [-0.6381220640598252, 52.2992756313827], [-0.6382025459408482, 52.30172119671403], [-0.636950832101518, 52.30432217304171], [-0.6370165284978503, 52.30519147026913], [-0.6394243827937209, 52.31372457157525], [-0.6409687902653315, 52.315795809689604], [-0.6412668019394352, 52.31717938616551], [-0.6400950101881886, 52.31835990527935], [-0.6351300962520975, 52.32895050998974], [-0.6348851550613135, 52.333000665141945], [-0.6334930314481785, 52.33698012062411], [-0.6322170104718317, 52.33675682880686], [-0.6296645889277949, 52.33917808162454], [-0.6228119185550035, 52.34199262945631], [-0.6241573300654326, 52.342584538656475], [-0.6270875577092817, 52.344237044005816], [-0.6262172070340521, 52.34607536065441], [-0.6256333263711963, 52.34587532442821], [-0.6227284113156899, 52.35337400860031], [-0.6267116023840327, 52.35480401082042], [-0.6267019081243195, 52.355116778992816], [-0.6294474229179517, 52.3570753668984], [-0.6271541783212362, 52.35914633151735], [-0.6323764867334003, 52.361559725301476], [-0.6299257073774918, 52.36325941447671], [-0.6279925589051595, 52.36375039620327], [-0.628825156227253, 52.36446311660669], [-0.6283667477519346, 52.365087151636864], [-0.6222604425494925, 52.36804515738248], [-0.6211164131691292, 52.3693588358113], [-0.6209575812995968, 52.37196248622854], [-0.623937099137562, 52.37539574200061], [-0.6242696089752873, 52.380859673792884], [-0.624737136690847, 52.38066287939862], [-0.6250595704555442, 52.38115927304496], [-0.6255772710849515, 52.380953980944085], [-0.6264402031621598, 52.381174424904394], [-0.6269460886525281, 52.38177550064187], [-0.6280923040888354, 52.38195967399257], [-0.6277444666314969, 52.38227750401469], [-0.6283862254564967, 52.382666141698884], [-0.6274082285672705, 52.38298294795522], [-0.6265059411336633, 52.384170054046194], [-0.6264112938741235, 52.38447554102198], [-0.6270254641855487, 52.3863204004386], [-0.6268088076072381, 52.38719620977522], [-0.6256715132722575, 52.38847225781793], [-0.6244056061827404, 52.391755387523155], [-0.6217380074116386, 52.39582319615338], [-0.616220470163335, 52.39991874176706], [-0.6182930763814055, 52.400760275982925], [-0.6163864537876262, 52.402318548642036], [-0.6249917923294737, 52.4059477832584], [-0.624700212305727, 52.40704939583363], [-0.6233341582250572, 52.40885674524148], [-0.6215394515077091, 52.40837465324854], [-0.621177650682585, 52.408517840377286], [-0.6207286763679876, 52.40938831981233], [-0.6213634854395248, 52.41114176307477], [-0.6211051425908901, 52.412258044734536], [-0.619336675102589, 52.411968572809236], [-0.6189986527686042, 52.41153939537536], [-0.61826821068357, 52.41270956875535], [-0.6176016648343122, 52.41286626140408], [-0.6181544320688365, 52.4144649739439], [-0.6175502213448116, 52.41723695740185], [-0.6152558403604161, 52.41800583128259], [-0.6137919238900954, 52.41962407338103], [-0.6209257022680836, 52.41966254486699], [-0.6202380703902679, 52.42181230639066], [-0.6206572915414512, 52.42468162644049], [-0.6239199621326, 52.42631008769042], [-0.6279618858747237, 52.429094744033165], [-0.6283862776054528, 52.43077640060624], [-0.6273932117723593, 52.43409686352422], [-0.6276196468680949, 52.43485826844463], [-0.630831684606408, 52.434783146534095], [-0.6328453666056295, 52.433933426713295], [-0.6347445070790736, 52.433549911919506], [-0.6371912415275751, 52.43439173502637], [-0.6439736768050414, 52.435598060883784], [-0.6464812504460936, 52.436720007219996], [-0.653017692021658, 52.43462877267082], [-0.6587273797239471, 52.434266640148174], [-0.6585907514304693, 52.43605425814903], [-0.6594301052327688, 52.43709228159018], [-0.6600459412149444, 52.439146384755055], [-0.6601131376113648, 52.440957883178], [-0.6592613882925449, 52.4426511115141], [-0.6601685501172209, 52.44582519178728], [-0.6544991605486384, 52.448148696139334], [-0.6641580950651887, 52.45446083132446], [-0.6633356219544012, 52.456594021834725], [-0.6579342792173335, 52.45998346730527], [-0.6526087795899811, 52.46086514718296], [-0.6488599901447053, 52.462687051622275], [-0.6436644601300225, 52.46377752821833], [-0.6403211543344481, 52.465701782182144], [-0.638348959443015, 52.464928326008994], [-0.6372874794871154, 52.46412227725504], [-0.6344321861192193, 52.46344472881231], [-0.6319107666783329, 52.464582516525425], [-0.6315160896751035, 52.46525142777353], [-0.632576880483538, 52.46622209059315], [-0.6333631614458932, 52.468592070991164], [-0.635487680853386, 52.469486008619526], [-0.6335578160562881, 52.471528919429666], [-0.6320589216093201, 52.474712243867366], [-0.6294572329465774, 52.4769414609596], [-0.6279986681873901, 52.479339465268446], [-0.6237938855744543, 52.481629053311366], [-0.6217329742635938, 52.482313501899476], [-0.6121016165022386, 52.48424992457206], [-0.6126566437615643, 52.48500621711366], [-0.6096509583132859, 52.48579810797629], [-0.6013953675654279, 52.48680301860284], [-0.5995596640918961, 52.488770095144446], [-0.5979345043147748, 52.49147764708838], [-0.5970176574505366, 52.49589924111401], [-0.5964030236667782, 52.496927645658936], [-0.598486541555644, 52.496956834953316], [-0.6005918101877401, 52.50089173062921], [-0.6033131092519749, 52.50185980459443], [-0.6036658150953205, 52.50263181546628], [-0.60814447295516, 52.506179211908], [-0.6086013360104986, 52.508230798994205], [-0.6093126694409335, 52.508615038851644], [-0.6085932309760438, 52.509279965852905], [-0.6065875431936156, 52.50966002009954], [-0.6061156432610072, 52.50906556714453], [-0.6051239241937683, 52.50906916312006], [-0.6038754445011775, 52.5091740724421], [-0.6033643326659424, 52.50954203296145], [-0.5997432198976924, 52.50988761814103], [-0.599178396642769, 52.510690126263576], [-0.5987570607076174, 52.510686037517985], [-0.5985500429460744, 52.5110791495242], [-0.5981928471599834, 52.5109606810025], [-0.597697985168113, 52.51164806612216], [-0.5981135493876456, 52.51169253625985], [-0.5977217996399046, 52.51201065526808], [-0.5989035981002444, 52.51228629368252], [-0.5997067775825836, 52.51210066911645], [-0.6020177845765616, 52.51292459805522], [-0.6030404947990349, 52.51362084308554], [-0.6055844137686971, 52.514257712865465], [-0.607324488872632, 52.51343126041859], [-0.6088786202331826, 52.513543013027125], [-0.61035644144116, 52.51317379936775], [-0.6123850812811823, 52.513519462514964], [-0.6158452602936073, 52.513236321812336], [-0.6221982003159778, 52.51144220251163], [-0.6240563117922316, 52.51153752045955], [-0.6240463871885435, 52.51256329659448], [-0.6271249900417618, 52.51236706767267], [-0.6296882629581501, 52.51125763365788], [-0.6312475998377084, 52.513426236773334], [-0.6320000137171558, 52.51543889830329], [-0.6360326616992329, 52.51589637164345], [-0.6381938864985129, 52.515493249999366], [-0.6383149393471855, 52.515055939403275], [-0.6396073642737422, 52.51481724986843], [-0.6431480893120248, 52.51497752424343], [-0.6453746145913756, 52.51426484545538], [-0.6457134916989941, 52.5144584601884], [-0.6494636155213571, 52.51408588680712], [-0.6515457805099091, 52.51346411159741], [-0.6538465179461371, 52.512244208516044], [-0.6569010374696397, 52.51148149804042], [-0.657987089518265, 52.51041669898549], [-0.6581939622429255, 52.50961983425639], [-0.6606159941720688, 52.50856934119875], [-0.6631771039828843, 52.50802828011877], [-0.6641768526490683, 52.50824359551266], [-0.6678265808242037, 52.507857715439535], [-0.6697995399337021, 52.50751490638228], [-0.6714480612034243, 52.50669008215145], [-0.6721481616728091, 52.50692812131524], [-0.6737589067682547, 52.50931783663436], [-0.674682180938707, 52.5132049545912], [-0.6711047487303468, 52.51382383932305], [-0.6696487611866462, 52.51446018811758], [-0.6682270062849074, 52.51600855314091], [-0.6647752127616212, 52.51820829406141], [-0.6616863984126399, 52.51912100941698], [-0.6578541052062424, 52.51937610613898], [-0.652962527946972, 52.518843097098575], [-0.6493896443235867, 52.51890403548309], [-0.6417589063799707, 52.520648106067966], [-0.6383184518542773, 52.52180514561513], [-0.6359106458943533, 52.52302621073904], [-0.6358578530704844, 52.52387523630808], [-0.6407999203855589, 52.52889488596712], [-0.6393739790460528, 52.52890996200323], [-0.6404443713652288, 52.53033651629511], [-0.6381601360066916, 52.53312151445113], [-0.6406900332750448, 52.534457890736604], [-0.643148678817514, 52.53633995266674], [-0.6450500940762587, 52.53664754776137], [-0.6467475101288999, 52.53764431317873], [-0.6514028227668656, 52.53935975640489], [-0.6537300360275585, 52.5407410862287], [-0.6584308266445245, 52.54142288569794], [-0.6582767747801774, 52.54221684068959], [-0.6595533882563106, 52.54324630874896], [-0.6616974913574951, 52.54334336798067], [-0.6643561189962496, 52.54417448530095], [-0.6667886054842644, 52.5434673203315], [-0.6692104171677905, 52.54467054732556], [-0.6694749679915266, 52.54489651089917], [-0.6683004673227333, 52.54593965466995], [-0.667403033095043, 52.54752446191976], [-0.6666011403133906, 52.55101811239909], [-0.6655937005463315, 52.55223487018412], [-0.6748778272568771, 52.55862078046217], [-0.6743327971121763, 52.559327688951726], [-0.6731193099452958, 52.558868117718795], [-0.6726768262208126, 52.559013345897604], [-0.6726572663837765, 52.56039492481039], [-0.6735902077766714, 52.56032538747663], [-0.6738430609578039, 52.56079388234291], [-0.6730968100984911, 52.56108131283801], [-0.6733225676689523, 52.561472209652], [-0.6721143560333221, 52.561811171793046], [-0.6718738225516852, 52.56215549603033], [-0.6713931339968685, 52.56205024829998], [-0.6715600754478783, 52.56257989009037], [-0.6704822468210921, 52.56255970359786], [-0.6707770207422094, 52.56325436132319], [-0.67159071902879, 52.56312777531779], [-0.6718945465476772, 52.56298369224582], [-0.6713006595417514, 52.564088292682456], [-0.6703724586041276, 52.56423965534011], [-0.6698757044839186, 52.563788187386876], [-0.6696043663478941, 52.56456277072634], [-0.6689541641290969, 52.56474429943543], [-0.6685521655675652, 52.56535383288832], [-0.6662900859857769, 52.56633528921994], [-0.6641286307779656, 52.566772183421655], [-0.6632159684017118, 52.56655776905969], [-0.6630565965242035, 52.567238330566504], [-0.661944428302163, 52.567711295061024], [-0.6609262538246594, 52.568927890934944], [-0.6586292106134334, 52.568384010649424], [-0.6545263198029898, 52.57034769647125], [-0.6516004679504576, 52.57005646522563], [-0.6493597425878203, 52.57056400154499], [-0.6479693109550534, 52.57115679498236], [-0.647473171947613, 52.57212568732919], [-0.6477460127329372, 52.57242010068568], [-0.6467102488888692, 52.57255935542379], [-0.6467533975025633, 52.57316940766846], [-0.6473224982454311, 52.57328196652215], [-0.6469094862149136, 52.57375468516528], [-0.6449361166841322, 52.57386604052323], [-0.6437259327815291, 52.57339092795503], [-0.6430064804831965, 52.573656008012804], [-0.6422465906304842, 52.57298471016622], [-0.6416687091665035, 52.57292056027874], [-0.64063381061022, 52.57169316124164], [-0.6402532296714128, 52.57183538519966], [-0.6389638177113288, 52.57149422194944], [-0.6378610134081115, 52.57179441064019], [-0.6362860041659799, 52.57271848577549], [-0.6334397019750404, 52.57365933428829], [-0.6335949898300076, 52.574170830628404], [-0.6330255546475815, 52.57426141813522], [-0.6334650447635568, 52.57469530300814], [-0.6329330690844168, 52.575243897266915], [-0.6339902911795483, 52.57531811324082], [-0.6330306215245116, 52.5755695760219], [-0.6325217470588793, 52.576321561438604], [-0.6313070800899816, 52.57651613889706], [-0.6305953748235519, 52.576098871444486], [-0.6295772034857519, 52.57652399574155], [-0.6281160865226875, 52.5765286494888], [-0.627781866801065, 52.57716309876235], [-0.6284067474019431, 52.577476914851324], [-0.62782292670777, 52.57821363112069], [-0.6260405894298736, 52.57805635059283], [-0.6251711029016147, 52.57858391671685], [-0.6255150180676836, 52.57886662353303], [-0.624847783409452, 52.579151973638204], [-0.6216913177864648, 52.57979943921924], [-0.6200017632968897, 52.57969698463226], [-0.6188621133305123, 52.581302062958855], [-0.6176031825692552, 52.58144286500505], [-0.6178965810134373, 52.5820154040958], [-0.6165115321112468, 52.58226895944598], [-0.6172172199153814, 52.58329400399547], [-0.6141315649921336, 52.58407161230896], [-0.6127270599731056, 52.583909474474225], [-0.6118858258813846, 52.58442379265279], [-0.610750353316912, 52.58415513183694], [-0.6084937059832929, 52.584708540244044], [-0.6073622661429636, 52.58543422714592], [-0.6073677188639899, 52.58586499231407], [-0.6055050006045467, 52.58646881363108], [-0.6050216671793067, 52.58690721505609], [-0.6051508094369863, 52.58748953512407], [-0.6038211989548493, 52.5877103400466], [-0.6030319982390178, 52.588573042266844], [-0.5979823702199962, 52.58874804876564], [-0.5967789156278279, 52.58834722602257], [-0.5941267461852469, 52.58828611425456], [-0.5919380588312048, 52.58721086298365], [-0.5906679284320225, 52.58723359502663], [-0.5889471448441099, 52.58675903507905], [-0.5869852222956718, 52.58741081776736], [-0.5852998950342646, 52.58845163434864], [-0.583310674583838, 52.591270650618185], [-0.58280360674153, 52.593258646666925], [-0.5838083245960232, 52.59314123870441], [-0.5845075050085121, 52.59339047282041], [-0.5837098501793565, 52.595051433509056], [-0.5828457294914423, 52.59515614280532], [-0.581485267963717, 52.59586536294626], [-0.5790245835262765, 52.5953917747505], [-0.5775603963572944, 52.593283875671084], [-0.577967329605048, 52.59179460790489], [-0.5783290342535535, 52.5912469112384], [-0.5789889358051821, 52.59106419656368], [-0.5791970039239839, 52.59042657114096], [-0.5778740703322992, 52.59038912275827], [-0.5790138554437937, 52.58960898852604], [-0.5784729140412036, 52.589264371232225], [-0.578779655488096, 52.58881586922846], [-0.5779685545818768, 52.58788010500129], [-0.5767952329189554, 52.587874101037535], [-0.5765215755657476, 52.58752648445979], [-0.5770163345747754, 52.58715394717723], [-0.5755811886351803, 52.5864363545683], [-0.571916518104548, 52.58578535575997], [-0.5699559271943947, 52.586071872467095], [-0.5685779562932193, 52.585688337736514], [-0.56778143788826, 52.5863035506514], [-0.5652950439731367, 52.58636971811], [-0.5644876396994645, 52.58591574914407], [-0.5625310408730189, 52.58625710840993], [-0.5616368525812153, 52.58705714590255], [-0.5606545489351208, 52.58892603222885], [-0.561069350961308, 52.59104387124505], [-0.5605745071557171, 52.59127972414952], [-0.5617687096338947, 52.59218242103297], [-0.5599368064904918, 52.593619356593834], [-0.5581300092088831, 52.594465880494695], [-0.55504506323426, 52.5947177875649], [-0.5531886644713719, 52.59455662106887], [-0.547173532817277, 52.59327105412745], [-0.5467286190176164, 52.59257603939762], [-0.5451883948476887, 52.59347866647602], [-0.544676903182149, 52.592876300773284], [-0.5441854639115357, 52.592870261213754], [-0.5426930622180065, 52.59473632559277], [-0.5429412422073496, 52.59566540912685], [-0.5435798349640069, 52.59613182927921], [-0.5445975996504279, 52.59611827431903], [-0.5449480491403557, 52.596633186790925], [-0.54901985051299, 52.598341056366834], [-0.5492398316152611, 52.599232839657326], [-0.5523476590771152, 52.600003652018216], [-0.5529506238907719, 52.601330809627896], [-0.5521145481506657, 52.60223673495709], [-0.551416164703658, 52.60429326657138], [-0.5502170978050813, 52.60483243448323], [-0.5495783113660353, 52.605703905272215], [-0.5475704756146168, 52.60693797511347], [-0.5476663329046624, 52.60761432486978], [-0.5484872076720843, 52.60820159279145], [-0.5484816122963078, 52.6098881116032], [-0.549342173640751, 52.61119956681654], [-0.5500668318433696, 52.61161667077535], [-0.55014244925127, 52.612232551617666], [-0.5449441612357793, 52.614576414626065], [-0.544631578627472, 52.61504911510572], [-0.5437922896938487, 52.614702562432775], [-0.5429478747197821, 52.61495471782521], [-0.5430350811385453, 52.61602202909861], [-0.5415527116337141, 52.61662593398121], [-0.5406443855517348, 52.61750931746898], [-0.5390685014463762, 52.61785759095782], [-0.5388961249194176, 52.61877699886807], [-0.5395652607469642, 52.61971037754127], [-0.53807399749985, 52.621106146888096], [-0.5391295202667326, 52.62312590305042], [-0.5411694314206666, 52.624602050300666], [-0.5402721029467713, 52.6259477254552], [-0.5385214283428231, 52.62701035679643], [-0.5381251745380966, 52.62790542888011], [-0.5374333895617504, 52.62782768499243], [-0.5369597101070889, 52.62736506982375], [-0.5373251885993562, 52.62615504386171], [-0.535648942824942, 52.627065666653436], [-0.5345640828317099, 52.628092516430506], [-0.5346981459013552, 52.62859039810602], [-0.5340977686924337, 52.6288284318949], [-0.5356499405968976, 52.62933495160972], [-0.5349956332274552, 52.63043624204773], [-0.5338549308733327, 52.6305246848472], [-0.5335232200608252, 52.631427641037874], [-0.5309038460542412, 52.632079442662814], [-0.5288637101228263, 52.63197584434071], [-0.5236418417575576, 52.63486882121721], [-0.5207651078277582, 52.637486898551685], [-0.5208414075724596, 52.63886255555264], [-0.521444454813661, 52.63951649363453], [-0.5207398889645701, 52.64007313042189], [-0.5210791460160064, 52.6407085872773], [-0.5200644580365597, 52.64143400705744], [-0.5182898833015309, 52.64172469952011], [-0.5174081651454052, 52.64236098144521], [-0.5168824123469961, 52.64243798950616], [-0.5158972922191791, 52.642023805069044], [-0.5146853124510342, 52.64311620242066], [-0.5134636445916727, 52.64261634317311], [-0.5126372482238098, 52.64284064767109], [-0.5119581464365153, 52.64360077017685], [-0.5113390314060732, 52.6431605838233], [-0.5105459645272606, 52.6433609354554], [-0.5104327752956975, 52.642951370616025], [-0.5095550451175554, 52.64316152713252], [-0.5096475161955624, 52.64244158763331], [-0.5090459666955726, 52.642399866129175], [-0.506949738003663, 52.641021326596224], [-0.5040229467208169, 52.64008265123463], [-0.5032347370663904, 52.64005561982571], [-0.5022758208529472, 52.64048139620295], [-0.4991749016663934, 52.639276063342514], [-0.4970939760968328, 52.64005608651595], [-0.4950369971585954, 52.640217917420934]]]}                              
    elif idx == 3:
        geometry = {"type": "Polygon", "coordinates": [[[-0.7961738014214805, 52.516347830550224], [-0.7993275564258028, 52.51256245679679], [-0.8016909736499622, 52.51305665247387], [-0.8026310180097694, 52.50997165097396], [-0.8049621664496648, 52.51029459622774], [-0.8057281565105092, 52.50839906181279], [-0.8079456944303274, 52.50654691110807], [-0.8014246871419008, 52.50182669208668], [-0.798007945666907, 52.49881445054441], [-0.7949513371928897, 52.49778634252886], [-0.793813267826884, 52.49620231978803], [-0.7928599317428187, 52.495676516120724], [-0.7915660858229423, 52.49547807119539], [-0.7866767023347802, 52.495549468893245], [-0.7855652494839026, 52.49440074155382], [-0.7857575949385943, 52.493568370352946], [-0.7849722335714783, 52.49235116916264], [-0.782209694078168, 52.491365293022945], [-0.7824591950659835, 52.4910243428226], [-0.7807569891400988, 52.48978599168663], [-0.7813199846390763, 52.48934581175577], [-0.7798856980233251, 52.48811371073598], [-0.781376076022298, 52.488010428334604], [-0.7821828707392936, 52.487376818265155], [-0.7815890918885928, 52.48696346459853], [-0.782489465445572, 52.48635688110133], [-0.7780892899101813, 52.48347593240321], [-0.7784724980253453, 52.48308963387573], [-0.7771282652008571, 52.48212725547712], [-0.7785973724568168, 52.48071119493149], [-0.781452260534983, 52.47907013739757], [-0.7796647981286642, 52.47773193064879], [-0.7781148820513573, 52.477130641820736], [-0.7769671568508931, 52.476942620618324], [-0.7757347314296689, 52.47737037315994], [-0.7748111581203749, 52.477172067019495], [-0.7718517692660806, 52.473779813779366], [-0.771647217191495, 52.472031695773644], [-0.7688113542341357, 52.472306999542305], [-0.7670832827010443, 52.47182064425517], [-0.7616053444684895, 52.47118622755411], [-0.7581346427473272, 52.470059342338466], [-0.7552403154228291, 52.46985267285266], [-0.7490506795870568, 52.469615629247805], [-0.741581508927371, 52.47011542348349], [-0.739796649964337, 52.465544561683835], [-0.7398159847340207, 52.46409815483403], [-0.7385598345773013, 52.462931251390884], [-0.7378949137709515, 52.45813042331198], [-0.7344869920679267, 52.457900774337496], [-0.7329495606490872, 52.45854601227223], [-0.7314008623311609, 52.458099609328094], [-0.7286507343442717, 52.45843688501559], [-0.7228061049380868, 52.45976481942376], [-0.7202364724826743, 52.45676292197583], [-0.7167712366037605, 52.457397056870164], [-0.7079197165548788, 52.46042763371316], [-0.7057299964661855, 52.46222331826733], [-0.7046631127805718, 52.4624633943752], [-0.704699692129634, 52.462974493645866], [-0.7018371161325558, 52.464563203452244], [-0.6973471133044388, 52.46916558886833], [-0.6950045866456679, 52.47266315772938], [-0.6932740943047391, 52.47660893167597], [-0.6928899319934004, 52.47655336649094], [-0.6895759757263338, 52.47554753360324], [-0.6881971383580243, 52.476760373793084], [-0.6866474457770145, 52.47678542487194], [-0.6855755251116794, 52.47723208894324], [-0.6848221089230468, 52.47825401071829], [-0.6743760969292832, 52.474933209713136], [-0.6757229905417566, 52.47450419605625], [-0.6769358505417666, 52.47343524883634], [-0.6728954703647738, 52.471296058958025], [-0.6713259109463218, 52.468903177862565], [-0.6744791400933665, 52.4685177299325], [-0.6756295132401406, 52.46800562382252], [-0.6762073410726049, 52.46719391097404], [-0.6729467781764511, 52.465671211322736], [-0.6728727094247632, 52.4651516813076], [-0.6766056821511948, 52.463924031401284], [-0.6817885568158402, 52.46318528793334], [-0.6816005231566922, 52.46267887502949], [-0.6838584279724667, 52.46243158920283], [-0.6837721377962074, 52.4621671903778], [-0.6818486590615022, 52.46230665949084], [-0.6769626841681916, 52.461788244862625], [-0.6764864550831596, 52.46196276850589], [-0.6764680079959438, 52.462476766925796], [-0.6735458273463583, 52.463471639104185], [-0.6698931815016489, 52.46373990481318], [-0.6690392733062004, 52.462572372845756], [-0.6724111135863384, 52.46190083540659], [-0.6707581124667609, 52.458429968564005], [-0.6690968673747317, 52.457539180719834], [-0.6696648136616343, 52.45564136237522], [-0.6702829554951434, 52.45510076062515], [-0.6641580950651887, 52.45446083132446], [-0.6544991605486384, 52.448148696139334], [-0.6601685501172209, 52.44582519178728], [-0.6592613882925449, 52.4426511115141], [-0.6601131376113648, 52.440957883178], [-0.6600459412149444, 52.439146384755055], [-0.6594301052327688, 52.43709228159018], [-0.6585907514304693, 52.43605425814903], [-0.6587273797239471, 52.434266640148174], [-0.653017692021658, 52.43462877267082], [-0.6464812504460936, 52.436720007219996], [-0.6439736768050414, 52.435598060883784], [-0.6371912415275751, 52.43439173502637], [-0.6347445070790736, 52.433549911919506], [-0.6328453666056295, 52.433933426713295], [-0.630831684606408, 52.434783146534095], [-0.6276196468680949, 52.43485826844463], [-0.6273932117723593, 52.43409686352422], [-0.6283862776054528, 52.43077640060624], [-0.6279618858747237, 52.429094744033165], [-0.6239199621326, 52.42631008769042], [-0.6206572915414512, 52.42468162644049], [-0.6202380703902679, 52.42181230639066], [-0.6209257022680836, 52.41966254486699], [-0.6137919238900954, 52.41962407338103], [-0.6152558403604161, 52.41800583128259], [-0.6175502213448116, 52.41723695740185], [-0.6181544320688365, 52.4144649739439], [-0.6176016648343122, 52.41286626140408], [-0.61826821068357, 52.41270956875535], [-0.6189986527686042, 52.41153939537536], [-0.619336675102589, 52.411968572809236], [-0.6211051425908901, 52.412258044734536], [-0.6213634854395248, 52.41114176307477], [-0.6207286763679876, 52.40938831981233], [-0.621177650682585, 52.408517840377286], [-0.6215394515077091, 52.40837465324854], [-0.6233341582250572, 52.40885674524148], [-0.624700212305727, 52.40704939583363], [-0.6249917923294737, 52.4059477832584], [-0.6163864537876262, 52.402318548642036], [-0.6182930763814055, 52.400760275982925], [-0.616220470163335, 52.39991874176706], [-0.6217380074116386, 52.39582319615338], [-0.6244056061827404, 52.391755387523155], [-0.6256715132722575, 52.38847225781793], [-0.6268088076072381, 52.38719620977522], [-0.6270254641855487, 52.3863204004386], [-0.6264112938741235, 52.38447554102198], [-0.6265059411336633, 52.384170054046194], [-0.6274082285672705, 52.38298294795522], [-0.6283862254564967, 52.382666141698884], [-0.6277444666314969, 52.38227750401469], [-0.6280923040888354, 52.38195967399257], [-0.6269460886525281, 52.38177550064187], [-0.6264402031621598, 52.381174424904394], [-0.6255772710849515, 52.380953980944085], [-0.6250595704555442, 52.38115927304496], [-0.624737136690847, 52.38066287939862], [-0.6242696089752873, 52.380859673792884], [-0.623937099137562, 52.37539574200061], [-0.6209575812995968, 52.37196248622854], [-0.6211164131691292, 52.3693588358113], [-0.6222604425494925, 52.36804515738248], [-0.6283667477519346, 52.365087151636864], [-0.628825156227253, 52.36446311660669], [-0.6279925589051595, 52.36375039620327], [-0.6299257073774918, 52.36325941447671], [-0.6323764867334003, 52.361559725301476], [-0.6342131327961877, 52.360435596550396], [-0.6363707164900909, 52.35794488933377], [-0.6411933472008894, 52.3555890776751], [-0.6453873465231047, 52.35385252622568], [-0.6456427541805464, 52.354000253757526], [-0.6475286031399196, 52.35282516051146], [-0.6483398647435922, 52.352800286174485], [-0.6487152987691401, 52.35175538553071], [-0.6504543552112704, 52.35096245414537], [-0.6503812957858348, 52.35042394470002], [-0.6532764546811067, 52.34960650913661], [-0.6535966164500228, 52.348105080858836], [-0.6580878851861512, 52.34785227588142], [-0.6590821948872781, 52.349199570274784], [-0.6597967855950236, 52.34935876842948], [-0.6606515488394012, 52.34900964975888], [-0.6611170815542752, 52.35007229719828], [-0.6633166757643195, 52.349869706543494], [-0.6633382536217034, 52.34915431002007], [-0.6644317727389418, 52.34887087181656], [-0.664578740412567, 52.34920788234872], [-0.6674639156441996, 52.349004870221556], [-0.668045029996624, 52.34959853056655], [-0.6748143369029288, 52.3489760712526], [-0.6749042791373815, 52.34846996642467], [-0.6771513648100975, 52.34858960785806], [-0.6777737740293537, 52.35046485848632], [-0.6803513451859875, 52.35013665936583], [-0.6806107009446754, 52.35040299888534], [-0.6823681709909052, 52.35000366764591], [-0.6827556623146223, 52.34956379187289], [-0.6834756988250497, 52.349791217036866], [-0.6843778669793118, 52.349617005759676], [-0.6864495901535007, 52.3505057938252], [-0.6859423299461671, 52.351323741609846], [-0.686437075904798, 52.35196937975762], [-0.6862146135700239, 52.35263760428208], [-0.6882801645280633, 52.35339326509571], [-0.6887631098939189, 52.3538913560703], [-0.691105898027866, 52.3539128330224], [-0.6906366019877204, 52.35454148011276], [-0.6911914893720095, 52.35538828976465], [-0.6904650296186227, 52.356221714650985], [-0.692410266325396, 52.356085959986885], [-0.6911980221444177, 52.356810649661575], [-0.6915653564556552, 52.35754842159982], [-0.6918793407758654, 52.357805363326875], [-0.6923411925005338, 52.35758127622894], [-0.6929981863299983, 52.35810904805936], [-0.6930364366875149, 52.35885216337209], [-0.6936811282194539, 52.35905073875819], [-0.6945588070092925, 52.358816856879066], [-0.6957730388899032, 52.359571066587144], [-0.6967646021808972, 52.361606677291256], [-0.6958590647861995, 52.36253442256073], [-0.6962136919967751, 52.36375748832077], [-0.6965148678963947, 52.363954145895384], [-0.6989473400514752, 52.362593625867014], [-0.7000804913036706, 52.36421452369903], [-0.7005036750687603, 52.36435588746573], [-0.7029499012737455, 52.363622180757915], [-0.704569045429424, 52.36374869456818], [-0.7060557515100228, 52.36308259999408], [-0.7073194187848817, 52.36300825486931], [-0.7110947019803914, 52.3634783991811], [-0.7111784562606267, 52.36312598830068], [-0.7116527496156223, 52.36328036285289], [-0.7118482108347434, 52.36297141377852], [-0.7125683829680378, 52.363206750813866], [-0.7132410918151778, 52.362900299834045], [-0.7140097531266065, 52.36338422851934], [-0.7150081503924147, 52.36329172390161], [-0.715114174301444, 52.36363990801723], [-0.7159925608243789, 52.36363147780036], [-0.7160090108868813, 52.36331877987645], [-0.7188324741967569, 52.36349331895653], [-0.7190816809804291, 52.36295295713391], [-0.720048526962136, 52.363138699892836], [-0.7210067505557012, 52.36260430287385], [-0.722667018193321, 52.362375892524454], [-0.7236881919096961, 52.36169735533534], [-0.7255025418081157, 52.36121251976891], [-0.7270537695566588, 52.36119867777578], [-0.7283726939149406, 52.3606302647665], [-0.7283267494273209, 52.36028633463316], [-0.7300929809933719, 52.35917425931423], [-0.7325301278525954, 52.35821415359204], [-0.7343429663761992, 52.35793059085793], [-0.7342436807271492, 52.35765530043502], [-0.7358020468869962, 52.357488621841995], [-0.7355851506807527, 52.35721476987503], [-0.7359962709422044, 52.35716523951434], [-0.737158761259279, 52.355174482101965], [-0.7375377713175525, 52.35532063387891], [-0.7374549251412429, 52.35488004964849], [-0.7380327420453059, 52.35500854936648], [-0.7380338899512648, 52.35465793507588], [-0.7384679090118709, 52.35478121182581], [-0.7399989571976129, 52.35268021139579], [-0.7408444865056165, 52.35217141704857], [-0.741361377694428, 52.352270399444805], [-0.7429179843789356, 52.35107410898581], [-0.7434814371890931, 52.351289615014736], [-0.7448202011921868, 52.35072932042138], [-0.7456649245957563, 52.350036136114255], [-0.7459300541412398, 52.34953903000592], [-0.7452522309114598, 52.3491093036645], [-0.7455567794437936, 52.347895183844074], [-0.7468880921420189, 52.34790211835032], [-0.7478606470775567, 52.34720128581612], [-0.7483087993312098, 52.347345349725856], [-0.7487910311459905, 52.34706274584091], [-0.750786455204132, 52.348041361921936], [-0.7521271050509978, 52.34829290193885], [-0.7537361451606673, 52.3481867438755], [-0.7544220887957467, 52.34786042619902], [-0.7568092436714009, 52.34807161687591], [-0.760804866874651, 52.34887694294423], [-0.7641540228940404, 52.35028845390194], [-0.7657525702014308, 52.35029976697755], [-0.7703413780144691, 52.34952941445215], [-0.7716938811488957, 52.350791388406755], [-0.7762399636010626, 52.349922392472756], [-0.7770954670137252, 52.35078538732305], [-0.7766844228713139, 52.350945705725756], [-0.7781515074933469, 52.35226182017187], [-0.7788346810046244, 52.35374059166409], [-0.7796441765457527, 52.353562001231936], [-0.7792248310700354, 52.35279700773433], [-0.7808716416370082, 52.350683288615656], [-0.7826232557743399, 52.35100163764563], [-0.7864503194558665, 52.34823230800225], [-0.7886708063216749, 52.34729309267491], [-0.7901809007223728, 52.35349856991213], [-0.7912181226694626, 52.35595376117185], [-0.796331895212226, 52.36164938307189], [-0.799756507583005, 52.36386983732259], [-0.8057815906443259, 52.36618569948667], [-0.805556068187516, 52.36638034871683], [-0.8167341242175319, 52.3702948982931], [-0.8190451140696888, 52.371542540217106], [-0.8263081301496292, 52.3735604270295], [-0.8295232439571003, 52.37507308316173], [-0.8317124030733879, 52.37684335781035], [-0.8329730105431039, 52.3811281717945], [-0.833753197329307, 52.38424751876876], [-0.8398571607583181, 52.391126048770026], [-0.8405839042466875, 52.39283235688161], [-0.8498454984106183, 52.39367169540865], [-0.8501065509960647, 52.39329664948597], [-0.8544122920195646, 52.39409730192807], [-0.8572675351173493, 52.39529993003298], [-0.8618218136942455, 52.3961647304543], [-0.8661518797308749, 52.39965240720589], [-0.8737094718867944, 52.402659112801885], [-0.8770243915284848, 52.40172326921574], [-0.8806231139888058, 52.40152990803884], [-0.8853261630992711, 52.40032375530785], [-0.8872307906321046, 52.39910828046361], [-0.8884719875586626, 52.39878901871991], [-0.8882012438321367, 52.3981580363845], [-0.8887695957251859, 52.398056422677215], [-0.8886704801293794, 52.39773273439013], [-0.8893574520503398, 52.39782457487195], [-0.889399900766769, 52.398359037020924], [-0.8905510647603412, 52.3985793526647], [-0.8906809570575095, 52.39902466574584], [-0.8902730963005456, 52.40040453100467], [-0.8903996250728811, 52.40368002300652], [-0.8893022256393395, 52.406289521037], [-0.8891790284206932, 52.407975937194884], [-0.8887026535862848, 52.40797685374696], [-0.8892954899692314, 52.409540480396984], [-0.8881853465608467, 52.411712944645934], [-0.8882625167152949, 52.41373019977048], [-0.8889784230474632, 52.41519881286313], [-0.8880184621881199, 52.41630546030902], [-0.8872744544354393, 52.41957644333534], [-0.8863640004004831, 52.420286186937744], [-0.8862618293580623, 52.420838161014714], [-0.8869503433847338, 52.42333860735017], [-0.8852739109373026, 52.42362759789787], [-0.8820158342338519, 52.4226078145953], [-0.8782945754550291, 52.422927780764674], [-0.876677614626804, 52.42353727311856], [-0.8750603775161646, 52.42351740682087], [-0.8734210280606305, 52.42656299588956], [-0.8709953450894161, 52.429287379270875], [-0.868720240304047, 52.432840220542026], [-0.8643415088082366, 52.43420891033253], [-0.8652292233049367, 52.43457973239151], [-0.8729697036596115, 52.43676203312167], [-0.8793036068009046, 52.43915789791648], [-0.8932593399843495, 52.441537796914574], [-0.8984370141909895, 52.44151602212958], [-0.9043971841647667, 52.44215486839291], [-0.9038730234292228, 52.44548909289175], [-0.9053554311082981, 52.44836805871351], [-0.9058641863203076, 52.453311228581505], [-0.906263646408525, 52.453643069071596], [-0.9057905022714149, 52.45456111597871], [-0.9046869233834283, 52.454914102924185], [-0.9045557514170284, 52.45557457317194], [-0.9040891701799524, 52.45575180616064], [-0.9041625209489215, 52.456414170340345], [-0.9015570212627703, 52.45809374325023], [-0.9009866029658795, 52.45883821121202], [-0.9014547823411291, 52.4588326726827], [-0.9014256112285859, 52.45911740691291], [-0.9007955863754757, 52.459121440827474], [-0.9012938835030461, 52.45973922017287], [-0.8989323602430468, 52.46112700820657], [-0.8975400095503274, 52.46247965494068], [-0.8955116343550783, 52.465486042088926], [-0.8927173401280699, 52.46720581090454], [-0.8895700361866151, 52.47042371009081], [-0.8862058206859658, 52.46932846779106], [-0.8848451320932997, 52.471501223218766], [-0.882482429987377, 52.47114539348647], [-0.8823746644562028, 52.47138893454476], [-0.8822315127468655, 52.476167761803154], [-0.884053392655775, 52.47731149239588], [-0.8851053681218165, 52.47868342374712], [-0.8852614652319111, 52.480255516589295], [-0.8845476566286078, 52.481289849773795], [-0.8888738260362544, 52.48298844393167], [-0.8880574916042923, 52.483299034746175], [-0.8878606362987589, 52.48374846271859], [-0.8905139672030675, 52.484110502919336], [-0.8904575772443528, 52.48436352014044], [-0.8916396574745555, 52.48490685543324], [-0.8927553631344386, 52.484811154301426], [-0.8934156658490392, 52.485376552296195], [-0.8969340508655805, 52.485490291085526], [-0.8978061658390869, 52.48559467720378], [-0.8978938214397945, 52.48621223613953], [-0.897283020615201, 52.48649056100142], [-0.8980606768754142, 52.48690153664241], [-0.897887768321616, 52.48739704201505], [-0.8971212197771002, 52.487663219592115], [-0.8964974006367644, 52.48728162444854], [-0.896177651518628, 52.487996048257294], [-0.8952269581167719, 52.48808433482922], [-0.8946828117145375, 52.488700491269704], [-0.8951449218913408, 52.48953635772954], [-0.8959010576803482, 52.489925485808975], [-0.8959122309498846, 52.49042009916896], [-0.8967230183575768, 52.49062548216718], [-0.8956142866312983, 52.49202748277541], [-0.8948214142337574, 52.4922790198543], [-0.892054517545321, 52.49219652511555], [-0.8911637405574978, 52.49188789926954], [-0.8889613274419809, 52.491790847200505], [-0.8837343439144382, 52.492245964706804], [-0.8821384310929263, 52.49314882549295], [-0.882322369852156, 52.49466455849549], [-0.8818055456617774, 52.49686501353767], [-0.8806649224762152, 52.49711586532279], [-0.8798190602302219, 52.497882791045306], [-0.8789784923731194, 52.4979197704437], [-0.8794672780929973, 52.49839104639079], [-0.8793629390849118, 52.4998293639491], [-0.8809781475909926, 52.500446110638705], [-0.8818282675303757, 52.50032651910361], [-0.8814033160120462, 52.50116223259267], [-0.8804741213920964, 52.501204677518835], [-0.8816314466385657, 52.50163543877305], [-0.8811967202613835, 52.50210426830171], [-0.8823032531199458, 52.50198610792128], [-0.8827392629167509, 52.50338288235505], [-0.8817212876698975, 52.50378679638561], [-0.8811687313899305, 52.504427077881026], [-0.8800988824618113, 52.50443763126806], [-0.8798454007985967, 52.504904575345414], [-0.8802772630744421, 52.5054776788783], [-0.8798098626437144, 52.50612594918472], [-0.8809286554781639, 52.506165383525456], [-0.8805346312016913, 52.507004891128894], [-0.881444163964903, 52.50767966488229], [-0.880441083991181, 52.50871222468663], [-0.8810288468395099, 52.509242759310055], [-0.880007678034711, 52.51017259406238], [-0.880597785004876, 52.51124268910409], [-0.8800461098269045, 52.51172919245412], [-0.8808123718327735, 52.51178677182932], [-0.8811617906378049, 52.51230345662957], [-0.881942312147779, 52.511971902820925], [-0.8824548311874088, 52.512563824414045], [-0.8818423130347753, 52.51301111384677], [-0.8827271275269891, 52.513099549631725], [-0.882685287843415, 52.513589977363], [-0.8834213374153695, 52.51379114859613], [-0.8823697021967299, 52.5151054828962], [-0.8811770988956507, 52.51489190124058], [-0.8811199155909623, 52.51540204569173], [-0.8805367389377762, 52.51556280646443], [-0.881345792137352, 52.5158518620331], [-0.8803380244655945, 52.51619123926367], [-0.8786085772656554, 52.51599232596794], [-0.8779591553533354, 52.516201069882925], [-0.8783665254512594, 52.517276542246904], [-0.8761450480981702, 52.5173588309616], [-0.8755767962796618, 52.51790905947915], [-0.8743552980534305, 52.51755492587046], [-0.873769758348342, 52.518495139119445], [-0.8726231228760274, 52.51838266284555], [-0.871755238249658, 52.51941365036437], [-0.8724550691389299, 52.520689751886614], [-0.871297173491269, 52.520952933356355], [-0.8707959061744984, 52.52234161760699], [-0.8713484223491896, 52.52413149861339], [-0.8710056713785713, 52.52473508366391], [-0.8688378366033827, 52.52586967660539], [-0.8687698622689416, 52.526964007336645], [-0.8674436132030431, 52.52689470356958], [-0.8665742090961646, 52.52624986928318], [-0.8659296819428164, 52.52677954702072], [-0.8638776129320912, 52.527073633750724], [-0.8633119932766302, 52.52831606631774], [-0.8623918118990961, 52.527873837077415], [-0.8615019560047887, 52.52790932265072], [-0.8619253544422046, 52.52721037045851], [-0.861263394920756, 52.52676171574995], [-0.8607553054487186, 52.527027449210244], [-0.8603488267198798, 52.52667283413427], [-0.8594478574007448, 52.52719461540749], [-0.8590366943171094, 52.52707740731073], [-0.8587307352092336, 52.52620237454701], [-0.8599439909917796, 52.5259686087103], [-0.8582893060165586, 52.525602947018534], [-0.858483101776631, 52.52449365716521], [-0.8578691931380784, 52.523896159714354], [-0.8565471848236949, 52.52389238497282], [-0.856765907639008, 52.5243242040128], [-0.8563683749978201, 52.524422824532834], [-0.8555446926073956, 52.52384584760509], [-0.8552448281867767, 52.524207942186194], [-0.8534523832998432, 52.523704176299866], [-0.8532368649332418, 52.52411211096929], [-0.8515308970448177, 52.523625331715934], [-0.8516254114007581, 52.52310927156324], [-0.850891794906921, 52.52258616332437], [-0.8502382884689084, 52.52164841270133], [-0.8490068204181984, 52.5217353112761], [-0.8491887082696546, 52.52092260580903], [-0.8485044018809458, 52.52082598362921], [-0.8484002581213732, 52.52024507846979], [-0.8478079599499326, 52.520464099091605], [-0.8476987288069698, 52.52136927453533], [-0.8467825829007936, 52.521234524601844], [-0.8453118363679498, 52.52167865454658], [-0.8449717052749516, 52.52115925681944], [-0.8462028281708576, 52.52035229549573], [-0.8453580635216621, 52.519349738049776], [-0.8431003118759123, 52.51957126339014], [-0.8429232275261854, 52.52019706040536], [-0.8421747517468916, 52.51951457838466], [-0.8411206416987734, 52.52053821976302], [-0.8404735063756413, 52.52009219935567], [-0.8398005489355321, 52.52012874663169], [-0.8403688773705945, 52.5190860686688], [-0.8397061193991198, 52.51856529135648], [-0.8386065892798913, 52.518346890060535], [-0.8380878293952455, 52.51907088984629], [-0.8376793633987071, 52.51874592596244], [-0.8365929242619964, 52.51925582627356], [-0.835752906843879, 52.51891942202018], [-0.8347771123128468, 52.51786867339229], [-0.8334449700341366, 52.51836444209059], [-0.8332493811453288, 52.519293920449414], [-0.8324934884647556, 52.51934219158461], [-0.8315813290021957, 52.51883598640511], [-0.8318300395452096, 52.51957481175274], [-0.8311754313500705, 52.51946939449135], [-0.8309812569304205, 52.51879141379966], [-0.8304595643586247, 52.51828914441671], [-0.8299335764906689, 52.519060673124955], [-0.828754797224559, 52.51860672526571], [-0.8291283853347494, 52.51824812225117], [-0.8285546175823241, 52.517822535024294], [-0.8269778891691332, 52.51836973742893], [-0.8271609460433693, 52.517194686351566], [-0.8257912291531146, 52.517110103353154], [-0.8248198155223909, 52.51777742489466], [-0.8224212915511618, 52.517972981160725], [-0.8226510569110268, 52.51748255376837], [-0.8216563655246208, 52.51747804925206], [-0.8217471554707824, 52.51678221740547], [-0.8207809462249325, 52.51665395570908], [-0.8206465490893672, 52.51572839967345], [-0.8201347805798523, 52.515523679469645], [-0.8182717518894465, 52.51553205826623], [-0.8177881320832474, 52.516094540134446], [-0.8164723249386285, 52.516415827427124], [-0.8149371272765111, 52.51552388539175], [-0.8126034696165072, 52.51593478937155], [-0.8121873005788379, 52.51737711537995], [-0.8111197226736098, 52.5178357413485], [-0.8112527980736444, 52.51907775743184], [-0.8108799296822721, 52.51935002826656], [-0.8089553204215004, 52.51923441907895], [-0.8085862913428721, 52.51843869775374], [-0.8063583810780257, 52.51847736992953], [-0.8043713491074973, 52.51756545321965], [-0.8033967501367336, 52.51812741084622], [-0.8032650253419198, 52.51771165017277], [-0.8039014958130843, 52.51755531296567], [-0.8038852393284132, 52.51717846862757], [-0.8018045992318068, 52.51662516600916], [-0.8013523250487362, 52.51672853023924], [-0.801885229119553, 52.51723913257983], [-0.8007952661707045, 52.517217309137436], [-0.8012427567666792, 52.518048992787776], [-0.8004929149369869, 52.518035104995725], [-0.7984103201638265, 52.51685419130759], [-0.7977840187862081, 52.51701599386846], [-0.7961738014214805, 52.516347830550224]]]}             
    elif idx == 4: 
        geometry = {"type": "Polygon", "coordinates": [[[-0.8091574084722345, 52.275313128050776], [-0.8073185643915245, 52.27217567088853], [-0.8057060783986864, 52.27082696526226], [-0.8035598219392066, 52.26791283892418], [-0.8029743181667379, 52.266686936603286], [-0.8034819409877627, 52.2658505157014], [-0.8028560581271833, 52.26411520189481], [-0.8030690813828426, 52.26344126817513], [-0.8018129857120222, 52.26225700666002], [-0.8013950918721078, 52.2613429784209], [-0.8017060908615424, 52.26105932155805], [-0.8011443324398326, 52.26058874931496], [-0.8015396382097233, 52.26043996181891], [-0.8017493063538588, 52.2591285528539], [-0.8014364981572994, 52.25899136332725], [-0.8017064773201019, 52.258543704470846], [-0.8010872102196712, 52.258415088980705], [-0.8013845182033612, 52.258150168258425], [-0.8008926812031565, 52.257861056799214], [-0.8014385220259609, 52.257284971752014], [-0.8012413942819483, 52.25351133309763], [-0.8014174070333413, 52.252636498417594], [-0.7950998426011618, 52.254066493541806], [-0.7914323366887884, 52.24222763414943], [-0.791369816025061, 52.241941977038294], [-0.7926177416593184, 52.24166972759841], [-0.798944230200351, 52.241202062813066], [-0.8028524705756672, 52.24051973133291], [-0.8032773500694869, 52.24209293546937], [-0.8045705077235995, 52.24144252506444], [-0.8055333457999817, 52.24152597320027], [-0.8067422745025941, 52.241177679922245], [-0.8084226112859246, 52.24154168622917], [-0.8096330145633732, 52.24118708654522], [-0.81162083485424, 52.24155504605895], [-0.8135214370525579, 52.240861214853204], [-0.8156225758040879, 52.23950405639761], [-0.8180652965327366, 52.238842464903165], [-0.8216754911338929, 52.238562075710945], [-0.8224479085840187, 52.2379827612967], [-0.8228635056970284, 52.237992299351056], [-0.8288806132357057, 52.23845220515487], [-0.8305440241599082, 52.23796067965437], [-0.8327270490843584, 52.23786633541922], [-0.8340653704574903, 52.23815289156449], [-0.83492312283894, 52.23744382939999], [-0.8369322649741899, 52.237953676970506], [-0.8394753934858333, 52.237584030602896], [-0.8409942962263088, 52.23695611458221], [-0.8387946486811639, 52.233141291072045], [-0.836458539463377, 52.23338344296156], [-0.8341730502501734, 52.2332638228028], [-0.8339450086083426, 52.233023292882756], [-0.8336893468666413, 52.23221973657334], [-0.833209807774502, 52.232021660776006], [-0.8349561840043481, 52.23131517647782], [-0.8347229902393676, 52.23054770645774], [-0.8354213535452177, 52.227974256902364], [-0.8341049887842051, 52.22624765604184], [-0.8319030490924137, 52.22518469121318], [-0.830150874145767, 52.22344564228739], [-0.8339340128325531, 52.22270990438883], [-0.8337881659282169, 52.221125993730524], [-0.8365844793763868, 52.22055577851224], [-0.8356476499162538, 52.218145062577726], [-0.8375720806779753, 52.21749332611056], [-0.8378790239811245, 52.217959333317914], [-0.8383515460947177, 52.21785702424353], [-0.8385826397203917, 52.21421618179184], [-0.8370242763227459, 52.21167441939222], [-0.8408375544638346, 52.20923674426517], [-0.8470941274998692, 52.207704855150496], [-0.8510593578166868, 52.207850570705055], [-0.8543574727189213, 52.20752660553371], [-0.8656846629668814, 52.204770556092186], [-0.8650726861173347, 52.20443471456487], [-0.868985354785313, 52.20243050393856], [-0.8694296758030432, 52.20256958453621], [-0.8721560527687132, 52.201456589478724], [-0.8758898083746456, 52.199391029020035], [-0.877672077287005, 52.19735354800498], [-0.8782026180961002, 52.19504888211081], [-0.8798236372027824, 52.19511101805546], [-0.8811428767723787, 52.19495095807245], [-0.8814714269948454, 52.19555826256302], [-0.8819173637127955, 52.19563169762721], [-0.8825558458379632, 52.19555055899158], [-0.8826628130072512, 52.19519096356954], [-0.8830495114880351, 52.195755669829225], [-0.8836014535049741, 52.195392284046044], [-0.8841691008295505, 52.1954515819634], [-0.8871254619653766, 52.19723094439108], [-0.8888311838692561, 52.19770730421861], [-0.8906043863077854, 52.197538827987685], [-0.892306287578413, 52.19693804059356], [-0.8920483938731438, 52.192419479806205], [-0.8941637253639839, 52.18888527946372], [-0.8943399184072631, 52.18608987734921], [-0.8954257471591951, 52.18659997227176], [-0.9024953995907113, 52.190104023676405], [-0.907864915169103, 52.19371416521964], [-0.9174928558044984, 52.20016023397696], [-0.9258735112809892, 52.20425479817012], [-0.9309182590398302, 52.20630191015979], [-0.9365026995993744, 52.208076832633154], [-0.950556357756963, 52.21167933434815], [-0.9676749461416175, 52.218666856365324], [-0.9673648425225931, 52.218970729472105], [-0.9677955076941779, 52.22117182837882], [-0.9657467722152557, 52.221327367469044], [-0.9667909657430064, 52.22250712754499], [-0.9671677747884915, 52.22418895962221], [-0.9684937153240976, 52.225471834582116], [-0.9671969134294387, 52.22583638117783], [-0.9693971863648159, 52.22811765348462], [-0.9675586124721895, 52.22804136845256], [-0.9685654270144601, 52.22831621742567], [-0.9692165839835669, 52.22890002124703], [-0.9694183504694929, 52.23118728395352], [-0.9682306173562678, 52.231391726638826], [-0.9671664320503695, 52.23200997261491], [-0.965249182132042, 52.23536831658575], [-0.9678515134738325, 52.23548996410945], [-0.9710409340625069, 52.23498292002901], [-0.9687215187626699, 52.2371221696204], [-0.9687669427705361, 52.238199702447204], [-0.969378210977754, 52.23880203056534], [-0.9689354779156889, 52.24021235549796], [-0.964638614921272, 52.24090575793615], [-0.9642075854792358, 52.24262544841488], [-0.964780431888742, 52.24544995281206], [-0.9653616456544313, 52.246276830453674], [-0.964531421705857, 52.24960054457365], [-0.9682950733431718, 52.250276318098734], [-0.9661533257432596, 52.253871879931914], [-0.9655379118416947, 52.25614650035264], [-0.9617700843850039, 52.25945889217298], [-0.9600474681417892, 52.260821069497204], [-0.9585419641135603, 52.261414678187926], [-0.9550540756514806, 52.26194041007012], [-0.9461983055029038, 52.2640374665154], [-0.9448490792822837, 52.26340955478557], [-0.937171092993767, 52.269166609719015], [-0.9329235359503618, 52.26900696906433], [-0.9323296122214135, 52.270975926237405], [-0.9290224337054978, 52.26992017098505], [-0.9282581730480358, 52.271162943129056], [-0.9246779869788317, 52.27170581813058], [-0.9251710969007116, 52.272646237565084], [-0.9241564463630845, 52.27363315021692], [-0.9225611815708059, 52.273783988509194], [-0.9229243992948044, 52.275366061292914], [-0.9226665861242689, 52.27668900443639], [-0.9161428003088805, 52.276383851724574], [-0.9104285963400996, 52.276712459737325], [-0.9056660979779985, 52.277322043559494], [-0.9056705684929514, 52.2776754078477], [-0.9050962611517861, 52.277725002078796], [-0.904932486109428, 52.2791969937027], [-0.9026535831652449, 52.27906079520553], [-0.9028483439353129, 52.28013515458922], [-0.899447141880117, 52.27873336483606], [-0.8991915614216627, 52.27934684736877], [-0.8981044599680815, 52.280033469212775], [-0.8980569368774528, 52.28065338454616], [-0.8946967908480432, 52.28031180806586], [-0.8883752170993781, 52.27771171950075], [-0.8884400059211245, 52.27629085771061], [-0.8851328762174323, 52.275374176271235], [-0.8823328594005171, 52.278079023617245], [-0.8796587892978897, 52.280304943107005], [-0.8757698049031583, 52.282222637027274], [-0.873951820109792, 52.282691665926905], [-0.8717784181945588, 52.28250015060243], [-0.8695936111610182, 52.28154152994155], [-0.8648417414850871, 52.2785936872035], [-0.8598172850378748, 52.281094234292624], [-0.8574951897298131, 52.27979062575569], [-0.8558279389969891, 52.28186027357301], [-0.8514987523918457, 52.280912880219184], [-0.8522330885606666, 52.27909848171114], [-0.8493268551730031, 52.27772072293276], [-0.8465325244585629, 52.28011649002944], [-0.8450531486041283, 52.279899710142836], [-0.8445234777979432, 52.280878102631306], [-0.8399940377130384, 52.280929067128035], [-0.837519398094429, 52.281390187048544], [-0.8326585002418185, 52.279214117099826], [-0.8307459520683977, 52.28037031047929], [-0.8275917447825296, 52.28096929237071], [-0.8271774982604486, 52.28088877992185], [-0.8268261152239824, 52.279764106758826], [-0.8253281325008393, 52.27870542156266], [-0.8247399194819625, 52.27783284081698], [-0.8199500108438776, 52.27423645805491], [-0.8190032070731907, 52.27423598189556], [-0.8160161424286249, 52.27561586932155], [-0.8153405740108196, 52.27500490988144], [-0.8091574084722345, 52.275313128050776]]]}             
    elif idx == 5: 
        geometry = {"type": "Polygon", "coordinates": [[[-0.9617700843850039, 52.25945889217298], [-0.9655379118416947, 52.25614650035264], [-0.9661533257432596, 52.253871879931914], [-0.9682950733431718, 52.250276318098734], [-0.964531421705857, 52.24960054457365], [-0.9653616456544313, 52.246276830453674], [-0.964780431888742, 52.24544995281206], [-0.9642075854792358, 52.24262544841488], [-0.964638614921272, 52.24090575793615], [-0.9689354779156889, 52.24021235549796], [-0.969378210977754, 52.23880203056534], [-0.9687669427705361, 52.238199702447204], [-0.9687215187626699, 52.2371221696204], [-0.9710409340625069, 52.23498292002901], [-0.9678515134738325, 52.23548996410945], [-0.965249182132042, 52.23536831658575], [-0.9671664320503695, 52.23200997261491], [-0.9682306173562678, 52.231391726638826], [-0.9694183504694929, 52.23118728395352], [-0.9692165839835669, 52.22890002124703], [-0.9685654270144601, 52.22831621742567], [-0.9675586124721895, 52.22804136845256], [-0.9693971863648159, 52.22811765348462], [-0.9671969134294387, 52.22583638117783], [-0.9684937153240976, 52.225471834582116], [-0.9671677747884915, 52.22418895962221], [-0.9667909657430064, 52.22250712754499], [-0.9657467722152557, 52.221327367469044], [-0.9677955076941779, 52.22117182837882], [-0.9673648425225931, 52.218970729472105], [-0.9676749461416175, 52.218666856365324], [-0.950556357756963, 52.21167933434815], [-0.9365026995993744, 52.208076832633154], [-0.9309182590398302, 52.20630191015979], [-0.9258735112809892, 52.20425479817012], [-0.9174928558044984, 52.20016023397696], [-0.907864915169103, 52.19371416521964], [-0.9024953995907113, 52.190104023676405], [-0.8954257471591951, 52.18659997227176], [-0.8943399184072631, 52.18608987734921], [-0.8941637253639839, 52.18888527946372], [-0.8920483938731438, 52.192419479806205], [-0.892306287578413, 52.19693804059356], [-0.8906043863077854, 52.197538827987685], [-0.8888311838692561, 52.19770730421861], [-0.8871254619653766, 52.19723094439108], [-0.8841691008295505, 52.1954515819634], [-0.8836014535049741, 52.195392284046044], [-0.8830495114880351, 52.195755669829225], [-0.8826628130072512, 52.19519096356954], [-0.8825558458379632, 52.19555055899158], [-0.8819173637127955, 52.19563169762721], [-0.8814714269948454, 52.19555826256302], [-0.8811428767723787, 52.19495095807245], [-0.8798236372027824, 52.19511101805546], [-0.8782026180961002, 52.19504888211081], [-0.877672077287005, 52.19735354800498], [-0.8758898083746456, 52.199391029020035], [-0.8721560527687132, 52.201456589478724], [-0.8694296758030432, 52.20256958453621], [-0.868985354785313, 52.20243050393856], [-0.8650726861173347, 52.20443471456487], [-0.8656846629668814, 52.204770556092186], [-0.8543574727189213, 52.20752660553371], [-0.8510593578166868, 52.207850570705055], [-0.8470941274998692, 52.207704855150496], [-0.8408375544638346, 52.20923674426517], [-0.8370242763227459, 52.21167441939222], [-0.8385826397203917, 52.21421618179184], [-0.8383515460947177, 52.21785702424353], [-0.8378790239811245, 52.217959333317914], [-0.8375720806779753, 52.21749332611056], [-0.8356476499162538, 52.218145062577726], [-0.8365844793763868, 52.22055577851224], [-0.8337881659282169, 52.221125993730524], [-0.8339340128325531, 52.22270990438883], [-0.830150874145767, 52.22344564228739], [-0.8319030490924137, 52.22518469121318], [-0.8341049887842051, 52.22624765604184], [-0.8354213535452177, 52.227974256902364], [-0.8347229902393676, 52.23054770645774], [-0.8349561840043481, 52.23131517647782], [-0.833209807774502, 52.232021660776006], [-0.8336893468666413, 52.23221973657334], [-0.8339450086083426, 52.233023292882756], [-0.8341730502501734, 52.2332638228028], [-0.836458539463377, 52.23338344296156], [-0.8387946486811639, 52.233141291072045], [-0.8409942962263088, 52.23695611458221], [-0.8394753934858333, 52.237584030602896], [-0.8369322649741899, 52.237953676970506], [-0.83492312283894, 52.23744382939999], [-0.8340653704574903, 52.23815289156449], [-0.8327270490843584, 52.23786633541922], [-0.8305440241599082, 52.23796067965437], [-0.8288806132357057, 52.23845220515487], [-0.8228635056970284, 52.237992299351056], [-0.8224479085840187, 52.2379827612967], [-0.8216754911338929, 52.238562075710945], [-0.8180652965327366, 52.238842464903165], [-0.8156225758040879, 52.23950405639761], [-0.8135214370525579, 52.240861214853204], [-0.81162083485424, 52.24155504605895], [-0.8096330145633732, 52.24118708654522], [-0.8084226112859246, 52.24154168622917], [-0.8067422745025941, 52.241177679922245], [-0.8055333457999817, 52.24152597320027], [-0.8045705077235995, 52.24144252506444], [-0.8032773500694869, 52.24209293546937], [-0.8028524705756672, 52.24051973133291], [-0.798944230200351, 52.241202062813066], [-0.7926177416593184, 52.24166972759841], [-0.791369816025061, 52.241941977038294], [-0.7914323366887884, 52.24222763414943], [-0.7842161494071778, 52.24351562413096], [-0.7834545982351432, 52.2442100321572], [-0.7828581188171736, 52.24411840608317], [-0.7814033845119506, 52.24455568908846], [-0.78137916166489, 52.245387031897835], [-0.7803018568961075, 52.24552160755467], [-0.779167701598216, 52.24649976197428], [-0.7778125540665016, 52.246508212636016], [-0.7770615130247583, 52.2460680103299], [-0.7753497816144296, 52.24599633817987], [-0.774379202366863, 52.245284913859685], [-0.7727266370438052, 52.24535052867071], [-0.7699101381832482, 52.24592630847103], [-0.7690332301409963, 52.245856857667384], [-0.7679781492436758, 52.24682674182649], [-0.7666880801864081, 52.246177622873866], [-0.7659157220304385, 52.24740669666037], [-0.7644915561140981, 52.24815966989246], [-0.7623055078494099, 52.248759840005725], [-0.7609066754370116, 52.24865160047065], [-0.7610087052313845, 52.248353361750496], [-0.7593936399325617, 52.24749393310807], [-0.7537248653570058, 52.247858567479405], [-0.7488198573221551, 52.246017574433345], [-0.7441211362406861, 52.243569792514855], [-0.7418892984707431, 52.243976659475884], [-0.7368088630554769, 52.24271941885737], [-0.7274921826351389, 52.23811496927493], [-0.7260319524032044, 52.235357876005594], [-0.7246111444599111, 52.23388966401529], [-0.7248608029734706, 52.2328412666474], [-0.7235423845038697, 52.230408530868885], [-0.7206670102246009, 52.22830946063085], [-0.7204455184778336, 52.22689733063582], [-0.7179920076046346, 52.2248998376247], [-0.7180128441843455, 52.223467862485904], [-0.7157652917624083, 52.22149601746067], [-0.7143202525916099, 52.221449636774196], [-0.7146443471798244, 52.221277893887645], [-0.7143491536393545, 52.221109203028135], [-0.7148810065607657, 52.22089028653949], [-0.7169545931042373, 52.21792242221423], [-0.7174163180695045, 52.21576601233571], [-0.7169654569460631, 52.21327691186957], [-0.7117268390030536, 52.19734279433733], [-0.7074507203622947, 52.19298035229551], [-0.7054731290440553, 52.19155792363809], [-0.705061430652433, 52.190773842853055], [-0.7086799094574282, 52.18877888250415], [-0.7116362513114496, 52.1881746385256], [-0.7160454538948703, 52.18542829549289], [-0.719025720466715, 52.18255294109018], [-0.7207560313245497, 52.1818893135671], [-0.7255067685292597, 52.18086364377299], [-0.7292778605420781, 52.1794612295267], [-0.7347491312641287, 52.17348800613845], [-0.7374481987750213, 52.1736563283873], [-0.7387683221737329, 52.172224664883835], [-0.7389677748470534, 52.17116589590902], [-0.7425566616910814, 52.170943446214686], [-0.7448130009471152, 52.17026790564242], [-0.7460837722810686, 52.16885999415777], [-0.7497527314870817, 52.16686512684105], [-0.7506744768685613, 52.167627489503246], [-0.7568282430284168, 52.167438030642614], [-0.7598653419407213, 52.16569245047027], [-0.7609944216649731, 52.16399517152153], [-0.7620655997076895, 52.16343457489571], [-0.762764291456684, 52.16496858143071], [-0.7627347261878021, 52.16629981041049], [-0.7641584692572911, 52.16778747851542], [-0.7653495081606775, 52.171086996814736], [-0.7736077780053123, 52.168875968372504], [-0.7778967299050022, 52.168759579994294], [-0.7795322463619264, 52.165577459423446], [-0.7832119581753096, 52.165912173473686], [-0.7831131115583935, 52.16417505110445], [-0.7803302210538454, 52.16334428186868], [-0.7834303568101398, 52.16026361728173], [-0.7842048922691602, 52.15866313206103], [-0.7864208318836855, 52.15652361486511], [-0.7877329129244123, 52.15422826032843], [-0.7904877555291836, 52.15208880976088], [-0.7921091848006832, 52.15131696233961], [-0.7935801643675637, 52.152270671065565], [-0.7942766504129984, 52.15234969866719], [-0.7938916677315082, 52.15323498338963], [-0.7941142287831252, 52.15403470715737], [-0.7968708500215546, 52.153391242041316], [-0.7989345252902837, 52.155355196389436], [-0.799724962630309, 52.15705179626014], [-0.8019738115639145, 52.15866604413845], [-0.8026896908746587, 52.15753682338492], [-0.8055698188431692, 52.15736189280393], [-0.8065880159775942, 52.156893926310865], [-0.8076048968846896, 52.15696622807871], [-0.806964694420536, 52.152807761320325], [-0.8072284816052112, 52.151690119038456], [-0.8092964862907612, 52.150000075092734], [-0.8091996656271353, 52.14847961327971], [-0.8107144040921898, 52.14763353937494], [-0.811548811142514, 52.14654060312103], [-0.8128236917615771, 52.1456974782765], [-0.812701953146843, 52.14433954811896], [-0.8135693490624877, 52.14376025588962], [-0.8140583850501191, 52.14245970240606], [-0.8165614440838387, 52.14351248119781], [-0.8319834317373201, 52.14367068909696], [-0.8313796570314886, 52.141281175542595], [-0.8286491836177937, 52.1356842696673], [-0.8282216547676299, 52.13259790874745], [-0.8320570130435785, 52.13124769451967], [-0.8357851148272686, 52.13283010293886], [-0.8382452564738906, 52.130701016134054], [-0.8467553677992986, 52.129397267303176], [-0.8512814898953237, 52.12933087844198], [-0.8529563714034157, 52.1303253818272], [-0.8535459319235289, 52.13166085231697], [-0.866009824311177, 52.130152202842325], [-0.8686530638018719, 52.13007601747854], [-0.8690003389162757, 52.1306133458979], [-0.8788807631858557, 52.12612595524682], [-0.8798182510268624, 52.126660770524744], [-0.8807368930983768, 52.12631885664191], [-0.8806316732550945, 52.12538909234732], [-0.8796705285401958, 52.12416528016548], [-0.8798360267790402, 52.123794644920885], [-0.8804365569291687, 52.123846187199945], [-0.8808328906014524, 52.12347684245404], [-0.8800385527729436, 52.1223598695918], [-0.8807830194687043, 52.121736673631176], [-0.880699347448643, 52.120177748119005], [-0.8818061802739813, 52.11984120652777], [-0.8815615918582189, 52.119052136867744], [-0.8824421976332304, 52.118823101638625], [-0.881973380198736, 52.11817850755872], [-0.8830297853633758, 52.118045603026296], [-0.8829047091863105, 52.117499543655775], [-0.8837212360213329, 52.11655603715324], [-0.8852289915379409, 52.116183709389496], [-0.8863213175975136, 52.1156024163308], [-0.8865314437811731, 52.11496424874106], [-0.8873480162075119, 52.11472019151907], [-0.887032448458871, 52.11419660823922], [-0.8857762709219131, 52.11338729918103], [-0.8836924528197566, 52.113557247528774], [-0.8814867189596277, 52.11264631963971], [-0.8809132871265423, 52.11286019552123], [-0.8806118600240838, 52.11265060249329], [-0.8803949115498566, 52.113034233696496], [-0.8784777716082405, 52.112497208429325], [-0.8782096892161265, 52.11287855210068], [-0.8765173783530096, 52.11293084347239], [-0.8752785648681092, 52.11219160664403], [-0.8749530283346937, 52.11247711801403], [-0.8739156097308493, 52.112266775953756], [-0.8729829756848244, 52.11265254591879], [-0.8714668385438994, 52.1117407377388], [-0.8704513867741882, 52.11025737120318], [-0.8698202321906203, 52.110443765533624], [-0.8691689879020574, 52.109862985238095], [-0.8693235313999791, 52.10946978671463], [-0.8686343611251471, 52.108428344989264], [-0.869002076235127, 52.10797508223662], [-0.8702595087066342, 52.10773537152914], [-0.8690369449187075, 52.107058331857786], [-0.8698110993360754, 52.10641391671836], [-0.8698797259246599, 52.105084832289805], [-0.8684340446309451, 52.10428421534024], [-0.8674611022224005, 52.10471189061407], [-0.8668366486877132, 52.10376723321033], [-0.8652870234071506, 52.10292513055265], [-0.8660391084036185, 52.10193977698117], [-0.8680014630316243, 52.101071207046324], [-0.8687941314405864, 52.10107611754615], [-0.8695477659386934, 52.100025141380236], [-0.8689327719007682, 52.10015406975058], [-0.8686411143819119, 52.09962086668143], [-0.8674717209473091, 52.099273295099266], [-0.8666700367215345, 52.09945443888625], [-0.8653990438892782, 52.09908888166], [-0.8648622356319239, 52.09924370952743], [-0.8635392377963967, 52.09839126925356], [-0.8621641115954066, 52.098274551282856], [-0.8613489046933879, 52.09783784474623], [-0.8603097953640695, 52.097997776688125], [-0.8584695914339912, 52.09740004426008], [-0.8579342945043819, 52.09749553097883], [-0.8563914518360317, 52.09503321295919], [-0.8560511299627959, 52.09309686306689], [-0.8547961451650241, 52.09234205803664], [-0.8543493958592483, 52.09257240536019], [-0.8516980923092093, 52.092026005112835], [-0.8505144183412678, 52.092078289392056], [-0.8500959312269492, 52.09240237556478], [-0.8467298056259104, 52.091496453416774], [-0.8462953768480646, 52.09102381640879], [-0.8468024576332038, 52.09077431475311], [-0.8459457076832314, 52.08901993007912], [-0.8463531236725059, 52.08810772689682], [-0.8455943581964894, 52.08775864918473], [-0.8451135372277241, 52.08642769787448], [-0.8437284166326524, 52.085693968258845], [-0.8438222020753269, 52.084886557631165], [-0.8413095724417657, 52.08407702034373], [-0.8417174459599113, 52.083711513739296], [-0.8406694934935379, 52.08377222183881], [-0.8392245379113977, 52.082822936820996], [-0.8374611441665099, 52.08228135577357], [-0.8367974705397805, 52.08058093649648], [-0.8352666764203557, 52.07979794016563], [-0.8352637322875086, 52.07760868363712], [-0.8360479791033857, 52.07680180530545], [-0.8360438159095743, 52.07505117224057], [-0.834955589260913, 52.07431397617925], [-0.8347711295184643, 52.07360817680214], [-0.834193845918623, 52.07342171090376], [-0.8340891766732815, 52.07273377780967], [-0.8325535306979861, 52.072033479197145], [-0.8314369666753689, 52.071935228387574], [-0.8327680483929673, 52.07085595767476], [-0.8328959939778663, 52.06919660457054], [-0.8342117467475739, 52.06830421627645], [-0.8356391763542512, 52.06637627538957], [-0.8387862713674193, 52.06411184385321], [-0.8427796526316191, 52.063121665200114], [-0.8452504700670586, 52.06296163263213], [-0.8469017262260362, 52.06358649597996], [-0.8479363884722209, 52.063626275063605], [-0.8498033120604034, 52.06443567091288], [-0.8508281543273458, 52.06469024228134], [-0.8530938883494045, 52.06433560240247], [-0.8552581250019581, 52.063960068663484], [-0.8573761591012674, 52.06407868267282], [-0.8592552299705786, 52.06361132602761], [-0.8592875305526345, 52.06314594644184], [-0.8626961480213798, 52.060922150735045], [-0.863033952540441, 52.06025999413071], [-0.8620247551012435, 52.05933415200526], [-0.8606434022524266, 52.05870581763429], [-0.8602176308235567, 52.058069632419645], [-0.8598870016752651, 52.056214272029685], [-0.86099049593462, 52.05543728057185], [-0.8604203020118933, 52.05451377763969], [-0.8580179174596, 52.053212904246244], [-0.8556463406942663, 52.05316383677982], [-0.8533015775376609, 52.05223653798226], [-0.8524626043734276, 52.05082940547983], [-0.8529534597115784, 52.04994045929359], [-0.8557229652922005, 52.04793715125674], [-0.8556040625774295, 52.04733907164552], [-0.8579009340658171, 52.04601442743604], [-0.8593597138159293, 52.04461880100568], [-0.8626128392828398, 52.04524905249133], [-0.8632483410269444, 52.04600769878785], [-0.8640344030331196, 52.045888540756884], [-0.8642198530611835, 52.04558732599915], [-0.8650252771859896, 52.04585673980645], [-0.8656208808465581, 52.0466356628429], [-0.8661330576743759, 52.04667834293969], [-0.8677518919127418, 52.046209336775675], [-0.8706241016896854, 52.043792208602], [-0.8704717344436629, 52.04336002048765], [-0.8718077979513019, 52.04183443984384], [-0.8713435155242556, 52.04024038167673], [-0.8721385711010425, 52.03975893004616], [-0.8731875024356415, 52.03735483740713], [-0.8720843702361064, 52.0362330375738], [-0.8733530134559356, 52.035470994808996], [-0.8731482181855278, 52.035092329317784], [-0.8739711487695927, 52.03500401782771], [-0.8761287072414282, 52.03349342504313], [-0.8762865968796157, 52.03248345604798], [-0.8773217778730916, 52.03102055849787], [-0.8768478161345225, 52.0306824791263], [-0.8774868980209678, 52.02996032092108], [-0.8798515532264717, 52.02912684717454], [-0.8803116497747546, 52.02868251433831], [-0.8830369610831518, 52.028230099803196], [-0.8871767894977686, 52.03009896307959], [-0.8892539678181659, 52.03150943751287], [-0.8901363666838242, 52.03154921089859], [-0.8907743403456405, 52.03115513998018], [-0.8913581431771879, 52.02988930307708], [-0.8936775167552619, 52.02875662012165], [-0.8957740668624847, 52.02820533511143], [-0.8972822546402116, 52.02727449886478], [-0.8983196939870522, 52.027462264689326], [-0.8997164769043573, 52.026376562107494], [-0.9002645097603241, 52.025007878859604], [-0.9038938352208217, 52.0236930615939], [-0.9045962707516616, 52.02232300707905], [-0.9060486790205261, 52.02120997332924], [-0.9083950071809711, 52.02222882522926], [-0.9117944518294518, 52.024961214766584], [-0.9121268796568812, 52.02657456876864], [-0.9143946644677595, 52.02983222999729], [-0.9225826135091123, 52.03533972616489], [-0.9244633107521774, 52.03618321302401], [-0.9272831939602962, 52.03939351962779], [-0.9281956511926409, 52.04221061880152], [-0.9302255452335995, 52.04311559066996], [-0.9304209409536365, 52.04372336419078], [-0.9298354322368008, 52.045038809114224], [-0.9303016339553984, 52.045729937727955], [-0.9302045724399629, 52.04863222859086], [-0.9307183026523831, 52.04879967052271], [-0.9301306968519214, 52.04953067047562], [-0.9318512181184099, 52.05217080386903], [-0.9318903335850806, 52.05401513241595], [-0.9334665286866589, 52.055071522355924], [-0.9357297675432724, 52.05790616026533], [-0.9366116734953469, 52.05817756959497], [-0.9378980810821959, 52.06119030541885], [-0.9337622074452193, 52.06262481991365], [-0.9376576407477376, 52.06284425190614], [-0.9393341198339544, 52.06214818589487], [-0.9416646834172879, 52.06426136197799], [-0.9404997745072309, 52.06503576526296], [-0.9420607398550016, 52.066578260182375], [-0.9404770250868209, 52.06741550717611], [-0.939297095288534, 52.067341977635984], [-0.9415581331680511, 52.06821457865558], [-0.9417669975935364, 52.068762229386294], [-0.9444085651216133, 52.070020377053226], [-0.9445078088720803, 52.07317349083717], [-0.9400735808243674, 52.07583013237794], [-0.9418321184252457, 52.07594659918043], [-0.9419897448749561, 52.07625101156603], [-0.9451195634487646, 52.076873368980685], [-0.9472208032110436, 52.07916863559065], [-0.9488457946502751, 52.07975227839946], [-0.9503406432241159, 52.07985368256247], [-0.9518907324728719, 52.08152178080656], [-0.9595665327243316, 52.07927103952606], [-0.9607807845613768, 52.078632609716045], [-0.962745476707598, 52.076344666382376], [-0.9651210297448165, 52.07482718469538], [-0.9678233916622403, 52.07089932051078], [-0.9701665042861384, 52.07235660147661], [-0.972242069439132, 52.07232168275969], [-0.9733754625469381, 52.07271185554111], [-0.9753168716536573, 52.07248417238657], [-0.9774818281807419, 52.07166408594716], [-0.9811587542410681, 52.071331801488256], [-0.9824009224107377, 52.06996065994895], [-0.9831785871246779, 52.06982885927846], [-0.9839785079214813, 52.07006774535022], [-0.9842974376332227, 52.069705477084035], [-0.9863861113396173, 52.07018015163215], [-0.9874425446853377, 52.070752979979346], [-0.9879014019205903, 52.07046291056089], [-0.9891407331066661, 52.07082148262291], [-0.9900311441272274, 52.07060800112714], [-0.991082391112364, 52.07089573091174], [-0.9934564612078739, 52.07211174392052], [-0.9939614256426076, 52.072820111422466], [-0.9955091138254191, 52.07322528981681], [-0.9982609662237067, 52.07256900610893], [-1.0004632398666045, 52.07247795046578], [-1.0024523624871808, 52.072720495040684], [-1.0043238046601162, 52.07339803630549], [-1.0058953030685502, 52.07339152406197], [-1.007066964231513, 52.07227129338789], [-1.0062900057311188, 52.071581364063654], [-1.0065256399160816, 52.07141976209757], [-1.0075584407877693, 52.072083890215254], [-1.0109177389287898, 52.0719898797954], [-1.0128831057048941, 52.071587316306406], [-1.0135248345451695, 52.07285590832662], [-1.0162785528910145, 52.072632546964535], [-1.02009410955824, 52.07328829172169], [-1.0214731559401342, 52.074947845823296], [-1.023099048787163, 52.07492627452557], [-1.026355337070175, 52.07541709801682], [-1.0263351483524301, 52.075670491574165], [-1.0287045340746475, 52.07501213631074], [-1.0421296213636382, 52.073925268840384], [-1.0423445151103143, 52.0736986217819], [-1.0317702466330299, 52.071156825684106], [-1.029568318174738, 52.070094906825034], [-1.0284538980233138, 52.067868577232964], [-1.0261389257255131, 52.0657105228772], [-1.026422527148783, 52.064405601508106], [-1.0276860497271032, 52.06372284931263], [-1.0309645330745318, 52.06288579537107], [-1.0331754346514266, 52.06351173921945], [-1.034635437472475, 52.06453785754511], [-1.0370697622623044, 52.065233869059654], [-1.0382201355530434, 52.06607764688732], [-1.040066111503792, 52.065912835804546], [-1.0482716512403496, 52.06283524936316], [-1.0497888918710863, 52.06138293057232], [-1.0518147057261789, 52.0607051636208], [-1.0529761873764152, 52.05964902361572], [-1.0578351398944847, 52.061021286297986], [-1.062082033047379, 52.06272392231813], [-1.0648273185556179, 52.061531950189675], [-1.0681224923716472, 52.06104193476858], [-1.0707295284724778, 52.05954483703175], [-1.0716734528608567, 52.05812367113065], [-1.0766687572599958, 52.05883990337292], [-1.0774954920425144, 52.057867278177355], [-1.0782663292508272, 52.05804318710795], [-1.0781819221975684, 52.057750316967834], [-1.078957787799316, 52.057254743914626], [-1.0808887454134073, 52.05676179576499], [-1.080416983434905, 52.05608830708998], [-1.081122728395184, 52.054459284705814], [-1.0822489807657993, 52.05287398067608], [-1.0831464663218655, 52.052774812828545], [-1.083292240369359, 52.05234980974336], [-1.0853958471590748, 52.052174699045906], [-1.0889168580809148, 52.05236555306016], [-1.0903451627088145, 52.05140287951097], [-1.0924626394332189, 52.051115306224666], [-1.0945347976859878, 52.05126606620332], [-1.0949933778202603, 52.05159415616504], [-1.0961433198755302, 52.05133962178618], [-1.0980890609682894, 52.05023332304617], [-1.0981961341203634, 52.04977025473695], [-1.098551254251584, 52.04987453927668], [-1.0984619739722443, 52.04902329243572], [-1.0988868499569846, 52.04863006641908], [-1.102435903526125, 52.047919922958776], [-1.102915916234108, 52.048049413529355], [-1.1036190043500094, 52.04774996851402], [-1.1050833332921566, 52.048319448753524], [-1.1060514581555805, 52.04810739028748], [-1.1056369081912933, 52.048854050392556], [-1.1062757233260705, 52.04907021100605], [-1.1110032616094334, 52.04819337645049], [-1.1111876490265475, 52.04794120696745], [-1.1135965839432576, 52.0480870699636], [-1.1172409442185112, 52.04733396442957], [-1.119706066192153, 52.04647945561731], [-1.1222194400140457, 52.044942772310996], [-1.1231593348303464, 52.04161861086994], [-1.1251625831424072, 52.04057080783051], [-1.1251995242820496, 52.04010081374017], [-1.126355947511197, 52.03934160881626], [-1.1265093907174168, 52.0388697813638], [-1.1259304278096967, 52.038730664686106], [-1.1271188970679369, 52.03796530814887], [-1.1266181929838492, 52.037178536640496], [-1.129975543633461, 52.033499102113424], [-1.130821967128117, 52.03337951064782], [-1.1312737618103494, 52.032858642862855], [-1.1317766860300518, 52.031956055875185], [-1.1329559035262304, 52.03172915288725], [-1.1324898322288663, 52.02967854305201], [-1.1336937287048179, 52.02658462838568], [-1.1335485156467293, 52.02603329521822], [-1.134302918638351, 52.02568640655292], [-1.1354672115626805, 52.02426086553572], [-1.135301159652434, 52.023723852345164], [-1.1357918508739868, 52.022916435134064], [-1.1363204386490264, 52.02294188200939], [-1.1360776873349152, 52.02245644055341], [-1.1366799335528537, 52.0222818962088], [-1.135997180835452, 52.02110894772988], [-1.1361770810613918, 52.02005513032354], [-1.1344032855850172, 52.01957696395914], [-1.1342006422921675, 52.01928146714241], [-1.1336285625721336, 52.01939501046092], [-1.133420435942708, 52.01908509010021], [-1.1325881276919805, 52.01932174123511], [-1.1320379436425323, 52.018831241428884], [-1.1307478169250507, 52.01862938245754], [-1.1305209527674915, 52.01815294445735], [-1.1299960396752982, 52.018319040070665], [-1.1289139748735129, 52.01790998613562], [-1.1284434062839985, 52.01798120068711], [-1.1284183649536803, 52.01829300030333], [-1.1275842701754497, 52.01816988982629], [-1.1274400548600156, 52.017794817902754], [-1.125857089794702, 52.01744323691983], [-1.1257080047682568, 52.017016891900525], [-1.1245937276279636, 52.01669214019127], [-1.124580277945438, 52.01708581924552], [-1.1231325912344077, 52.017265609578196], [-1.1215401826651235, 52.01695713388376], [-1.1200211482533506, 52.01713545503225], [-1.1194523796016012, 52.016339152785065], [-1.1189449561439195, 52.016653637948316], [-1.1189045783869713, 52.01633595730394], [-1.1182752648708898, 52.01632945213186], [-1.118494416967875, 52.01592553708716], [-1.1181037593587049, 52.01541558164518], [-1.11984301552618, 52.015669472537475], [-1.1214471476999823, 52.0124006939533], [-1.1219553107646099, 52.012124853698445], [-1.1225070835212716, 52.01222334159564], [-1.1231478257538705, 52.0113470720164], [-1.1253623392006737, 52.0070945983781], [-1.126345375973078, 52.007034478799326], [-1.1269841115790393, 52.00603134790209], [-1.1281436757008583, 52.00536014309456], [-1.1285865334981833, 52.00550912075368], [-1.1312706905323313, 52.00487440771137], [-1.1315470977475097, 52.00308542372792], [-1.1337609299798286, 51.9996330199769], [-1.1343466378981786, 51.99728623608183], [-1.1401908418414404, 51.997641015123364], [-1.1439244044105044, 51.99700908437167], [-1.1487407117509785, 51.995041731030575], [-1.1514981305438914, 51.993099820307464], [-1.1561276515215633, 51.99343426954805], [-1.1566688990086382, 51.99222435553818], [-1.1638414794979843, 51.993402078924305], [-1.1722015068876297, 51.98597434482581], [-1.174379264931155, 51.98331387888402], [-1.176072942717248, 51.982035545416366], [-1.1767108777045714, 51.982502187357284], [-1.180125731299465, 51.98168531879369], [-1.1810072810110355, 51.981810096705416], [-1.1830211218148174, 51.981482431562576], [-1.1847441058397719, 51.98169399946338], [-1.1883580540310223, 51.98120823319562], [-1.190708444034847, 51.98151301877184], [-1.1944128835563181, 51.97931046255459], [-1.196278215469998, 51.97742162390234], [-1.1980191482956795, 51.977281495551246], [-1.2006601734125184, 51.97793510154069], [-1.203553479649057, 51.97856878279033], [-1.2069163998040444, 51.978255215165895], [-1.217240902542707, 51.9803239054595], [-1.2210582104498662, 51.98017114744595], [-1.223661990437801, 51.98039695327333], [-1.2271273714553064, 51.98123785759358], [-1.2297185383393634, 51.98135738423271], [-1.2303987092256856, 51.98202534907909], [-1.2321127923685213, 51.982350316489054], [-1.2344603599076103, 51.98352455047054], [-1.2363720177331372, 51.983708633373276], [-1.2393073416352753, 51.9845781890203], [-1.2416301587718312, 51.98628341948909], [-1.247396888224424, 51.98505537893014], [-1.248218846284214, 51.98562797048462], [-1.2490257129810678, 51.985704123615854], [-1.2501682265048317, 51.985301443176446], [-1.2511896250214276, 51.98421909246106], [-1.2519880595520263, 51.984101024031155], [-1.2528046701490139, 51.983330333141446], [-1.2545380983110463, 51.98267590784777], [-1.254698960110821, 51.98290082511424], [-1.257278296277315, 51.98251164995797], [-1.2594350315656284, 51.98125391732536], [-1.2609330557271397, 51.980916284233224], [-1.267670023257347, 51.982616249591295], [-1.2702624239176472, 51.982937128932576], [-1.2808822198629946, 51.982354189659034], [-1.2812161917324585, 51.98222769474452], [-1.2815930716008146, 51.979966015652096], [-1.282743662863564, 51.97921782684883], [-1.2835222496299108, 51.97969364218539], [-1.2824763791413767, 51.98063491562225], [-1.2834635235562808, 51.98200579999272], [-1.2844679012493883, 51.982577448965905], [-1.2843061044810002, 51.98359241502498], [-1.2850057454879462, 51.98354273285937], [-1.2873928163247235, 51.9876453482575], [-1.2873633551803867, 51.98867729691477], [-1.2868479489102749, 51.98930893267716], [-1.2873454741297432, 51.98952415731124], [-1.28845236248925, 51.989247625349925], [-1.2888760065718459, 51.98971586719898], [-1.2871837048512713, 51.99026759007324], [-1.2869350381827458, 51.990614921547966], [-1.286101957754085, 51.990342834476834], [-1.285444427234106, 51.99065982034427], [-1.284089894899579, 51.99067227170922], [-1.2838946126815196, 51.99131482728183], [-1.2830136437653634, 51.991492920586936], [-1.283254562732613, 51.9919115341977], [-1.2823521369549595, 51.993063194791816], [-1.2846876328956773, 51.99483335018684], [-1.2835159195902996, 51.99615955572714], [-1.2824325119050768, 51.99632194286106], [-1.2837227243967457, 51.998078555114056], [-1.2834182429985204, 51.999450474771905], [-1.2827208504943775, 52.00034353251353], [-1.2818936567441825, 52.00051205856594], [-1.2816365810874635, 52.000282997638266], [-1.2805972752479546, 52.000961744796605], [-1.2805573652122222, 52.00318223756904], [-1.2788336940339242, 52.00437739014865], [-1.2775795391760576, 52.004732026393164], [-1.2770819957522581, 52.00532328080795], [-1.2776311320634726, 52.00722820898927], [-1.2785088766508081, 52.007824296080344], [-1.2784809612788486, 52.00820082393704], [-1.2797921109448107, 52.008746523316574], [-1.2837292822434665, 52.009349544411826], [-1.2845873459794612, 52.010637742415014], [-1.2840256486629684, 52.011140550922605], [-1.2821740834383395, 52.01130545765157], [-1.2800407695730986, 52.01104517693167], [-1.279936265125627, 52.011568734527806], [-1.2794104249935858, 52.01128589518044], [-1.2786487229573653, 52.01135763588085], [-1.2781809381932872, 52.01426247780353], [-1.2806496232776985, 52.016513583589045], [-1.2802276882129648, 52.01701444049506], [-1.2816901854026042, 52.01777505129601], [-1.2809983324139285, 52.01812236346208], [-1.2811286636659296, 52.018536709104055], [-1.282847860490449, 52.01919271947014], [-1.2818976212866444, 52.01965540180588], [-1.2829765019849917, 52.01990195739137], [-1.2829938265570633, 52.020727454477885], [-1.2837826074209273, 52.020429255859106], [-1.2844367805167467, 52.020900798495994], [-1.2845240802053708, 52.02145419623476], [-1.2834786801500282, 52.0216663504444], [-1.2841981847904655, 52.02187754209794], [-1.2839970888897494, 52.022604548988824], [-1.2845899535749974, 52.022808676988284], [-1.2835986833961832, 52.023188342590714], [-1.2844715758650265, 52.02374390530113], [-1.2838462937856425, 52.02502758488685], [-1.2860990050233254, 52.02560589376895], [-1.2853332651497582, 52.02646700108868], [-1.290206357237544, 52.027437786840096], [-1.2934554418453899, 52.02751033869362], [-1.2943291771346932, 52.02802538644899], [-1.2934753775296974, 52.029670063653555], [-1.293092353678921, 52.02992222422008], [-1.2923457490906203, 52.029665983391766], [-1.2928162339017601, 52.0302388417762], [-1.291691034990192, 52.03079043476625], [-1.292085347435237, 52.03277794589711], [-1.2933192320945126, 52.034301215358084], [-1.2944708708083692, 52.03708448869928], [-1.2939780261391192, 52.037460032597465], [-1.2946154193080017, 52.037813579899264], [-1.293817461542366, 52.03858026228263], [-1.294766736208342, 52.039037243920326], [-1.294968931626033, 52.03980092433823], [-1.2964629192801471, 52.04085455205747], [-1.2964371480015149, 52.041470271273774], [-1.297177372134844, 52.04177947751029], [-1.297593920739264, 52.042737677022856], [-1.2982289746579785, 52.04287088982979], [-1.298587264165123, 52.0433594644626], [-1.2992533777895585, 52.04319076236946], [-1.3001517505168485, 52.04363760095686], [-1.2998122287394336, 52.04437819068908], [-1.300413495736481, 52.044898763097144], [-1.3001480779505672, 52.045366461802374], [-1.3023544630982755, 52.04591811391535], [-1.3022301385021424, 52.04640552734467], [-1.3061659219572823, 52.04686486522156], [-1.3067028231398625, 52.047317524346774], [-1.307411518465422, 52.04721922481298], [-1.309096429617441, 52.0487836216518], [-1.311350232882218, 52.050523891612706], [-1.312660103274232, 52.05088306419667], [-1.3129358922209016, 52.051442120323856], [-1.3073957976782047, 52.057579201446], [-1.3091019658800531, 52.060714405292124], [-1.3084757369628115, 52.06235152667163], [-1.3076622002688678, 52.06317932788886], [-1.3077842318492974, 52.064341587028096], [-1.3036152399108112, 52.06433959799419], [-1.3021912548519512, 52.065008169390495], [-1.3012685364634646, 52.06609324030196], [-1.3012005628608976, 52.067643748736856], [-1.30066938555695, 52.067652283843465], [-1.3000826578160098, 52.06935260110241], [-1.3053844088054247, 52.07028295043302], [-1.3069188701558652, 52.07030276610143], [-1.3054862895676032, 52.072082622912696], [-1.3035039379704862, 52.07196846535504], [-1.303940418765002, 52.07354352287453], [-1.302006459210799, 52.07377845688607], [-1.3019057624347532, 52.07518307143947], [-1.298919502901546, 52.07534430870362], [-1.2985098587837853, 52.075690702419166], [-1.2975244341016905, 52.07804575849532], [-1.2996318782326057, 52.078301064798275], [-1.2993762437426106, 52.08009052684418], [-1.3087785787314383, 52.0794950934036], [-1.3135326516793255, 52.079879783735805], [-1.3161007787942152, 52.07950902415648], [-1.3172618782925165, 52.079725176002555], [-1.317261265451166, 52.07996254921111], [-1.318175491923327, 52.07991031519221], [-1.3195210794600787, 52.08076593992694], [-1.3200000022226785, 52.08074614214412], [-1.319750399345538, 52.081130473840524], [-1.320557498273018, 52.08218431355454], [-1.3194901898084768, 52.08385040457715], [-1.3213618368603575, 52.08485923360655], [-1.321183111504628, 52.08558372792362], [-1.3206270688202169, 52.08577377061192], [-1.3212766683360828, 52.08653188600039], [-1.320839876455663, 52.087617206353265], [-1.316744629322468, 52.08894851356698], [-1.3168416812220078, 52.08976447946632], [-1.3121929721895298, 52.090714739629504], [-1.3079785533651962, 52.09226166099185], [-1.3043968397550325, 52.09206262489274], [-1.3039248121908094, 52.09163092611373], [-1.2998423149098506, 52.09143778176313], [-1.2977807480703176, 52.09193883781057], [-1.2963012075888503, 52.09283359671585], [-1.2956087010645665, 52.092872696267996], [-1.2951616077940058, 52.09336895678928], [-1.2871408212010833, 52.09262758128277], [-1.2870742334142622, 52.09304521762199], [-1.285662806858038, 52.09350244305034], [-1.28517217756514, 52.093236027753136], [-1.2806924029567799, 52.094146522972316], [-1.27621194520543, 52.09680638809805], [-1.274886409544574, 52.0971705344283], [-1.27434249873322, 52.09676973357432], [-1.273707581646561, 52.097393377599715], [-1.2715911679386687, 52.09791619823328], [-1.2696802549866335, 52.09800594698496], [-1.2653885080550813, 52.097459687298695], [-1.2624892121457674, 52.096934481318954], [-1.2622159195705163, 52.09651563191517], [-1.2581608811283618, 52.09640651438696], [-1.2562945437721338, 52.09575012997033], [-1.2548094587614977, 52.09560503417631], [-1.2479752241946227, 52.09576127948048], [-1.2480344441759013, 52.09684230384939], [-1.2488131318350002, 52.099067071653906], [-1.2499287904783491, 52.099743070944186], [-1.2500406381001625, 52.10047389047549], [-1.251855176116815, 52.101354748846134], [-1.2518631701622063, 52.10200662080447], [-1.2540190888763398, 52.10247525675413], [-1.2529432237541644, 52.10386286842641], [-1.2570516769922715, 52.10615185443631], [-1.2599354262275826, 52.108710751182265], [-1.2648372194576505, 52.11075348939451], [-1.2702308071622699, 52.11355703373201], [-1.2726779564903015, 52.11430306239971], [-1.2768449070155046, 52.1170645758337], [-1.2765506194510512, 52.11729475447441], [-1.2783722596875386, 52.11862303117897], [-1.2815723980507854, 52.12260919671078], [-1.282216326901413, 52.122624800869126], [-1.2841595935874923, 52.12404549475845], [-1.2885405114441204, 52.12796312432719], [-1.2906479656927823, 52.129288525901316], [-1.2936403548798836, 52.13257365060253], [-1.293428461017558, 52.13303895281177], [-1.2955653855408673, 52.133810595963254], [-1.2951084723483688, 52.13469934063818], [-1.2977003256274844, 52.1352725616083], [-1.2979369354587245, 52.13713414255177], [-1.299182641951169, 52.1371766023081], [-1.299356628518619, 52.13838059953414], [-1.302126079923755, 52.13928080988828], [-1.30197499478098, 52.139782529048546], [-1.3053896298746026, 52.14120158447693], [-1.3049285606483034, 52.1416268811331], [-1.308447549449483, 52.14349595390835], [-1.3086932814516945, 52.144332654337774], [-1.30644452617479, 52.145540396175754], [-1.3086315318535404, 52.14653140092282], [-1.3083694128750585, 52.14684543586102], [-1.3094257392053816, 52.14762037106426], [-1.3117683765784518, 52.14790639612256], [-1.3107926402429835, 52.14948754173081], [-1.3124013733216935, 52.14979092603019], [-1.3123682884390298, 52.151274210993975], [-1.3132703615137817, 52.15106545882179], [-1.3145454943402324, 52.15140740856386], [-1.3143794097113575, 52.1517543707341], [-1.315977866299761, 52.15226347288578], [-1.3169284307529188, 52.153091654873975], [-1.3177620847598728, 52.153339245006435], [-1.3180683671925197, 52.1542426949095], [-1.317724991100409, 52.15452841776293], [-1.3185644789532656, 52.155453913580494], [-1.3182828837220277, 52.155797517593186], [-1.3199214794147263, 52.15695150858182], [-1.3193903499088204, 52.15765418758297], [-1.3213014379121457, 52.15829273883427], [-1.3208886794550856, 52.15919303265497], [-1.3243945006862188, 52.160904342988324], [-1.324679591245122, 52.161197186624925], [-1.323910198417089, 52.16209005653143], [-1.325322536159193, 52.16275893849218], [-1.32867945861034, 52.16546361322356], [-1.3283865630805833, 52.16579009973371], [-1.3300881920549468, 52.166287999898124], [-1.3299524926344177, 52.16733729976234], [-1.3310579002458829, 52.1679189834794], [-1.3308838226117057, 52.16821648862586], [-1.3319108530744779, 52.168471364241384], [-1.3316043221619005, 52.169507115141826], [-1.332305540023012, 52.17052610053026], [-1.3311299743282008, 52.171402336223984], [-1.332346116411282, 52.17231009012668], [-1.331495740900451, 52.17412319036186], [-1.328652021850054, 52.17700648909739], [-1.3268503405314045, 52.17845444076646], [-1.3265224705458958, 52.178383362739794], [-1.3228262623689313, 52.18178673195968], [-1.3199590803273364, 52.181346822098966], [-1.3182046223124728, 52.18140321200309], [-1.318208073160619, 52.18299186046611], [-1.3174601897038343, 52.18484140238762], [-1.3161746888040502, 52.18664558178317], [-1.314400001375746, 52.18809799354477], [-1.313148122932998, 52.190453477751795], [-1.3088726895737763, 52.189765029558245], [-1.300608583976283, 52.19176076206753], [-1.2949076799001678, 52.19166662663834], [-1.2908014469917344, 52.192119469628054], [-1.2836578530373757, 52.191587207037664], [-1.2812090966946512, 52.19193912100307], [-1.2789246472411477, 52.186111925024406], [-1.279439180925636, 52.184146063477854], [-1.2811239569620978, 52.1822503376881], [-1.2807909607458399, 52.18095187768039], [-1.2793055081333116, 52.18055983716363], [-1.27911043580268, 52.18013971480933], [-1.2781485439590574, 52.180205739839295], [-1.2784208541905535, 52.178556754344804], [-1.2780445321655782, 52.17804195573967], [-1.278608841628982, 52.177699278211236], [-1.2777094745848108, 52.17687829353237], [-1.2781940577998538, 52.176215964639205], [-1.277763408270142, 52.17590045719308], [-1.2780495176378535, 52.17556596555451], [-1.2778514190283639, 52.17524558817324], [-1.2773080325863873, 52.175392451825886], [-1.2769408340409483, 52.17468167680924], [-1.2760904237895059, 52.17427460887297], [-1.2769133444233127, 52.172859184982826], [-1.2757155376807634, 52.172962393034446], [-1.274969322631585, 52.17271953848092], [-1.2747770404725816, 52.17159098798743], [-1.2735684708145714, 52.171187002657994], [-1.2740383892756972, 52.170707147071916], [-1.2735216952083384, 52.169483930887765], [-1.2744599925788318, 52.169327829008814], [-1.2750995869679171, 52.16767032034557], [-1.2643073636002649, 52.16583235008639], [-1.2611838127799493, 52.16436540031888], [-1.259124071786981, 52.16426530205397], [-1.255288960006099, 52.16463672639214], [-1.2545703196695999, 52.16319095432251], [-1.2550655089738447, 52.16304577818042], [-1.2543764543580216, 52.162637683217326], [-1.2541693560042348, 52.16094347337081], [-1.253555810031261, 52.15995782824837], [-1.2548810641009205, 52.15885222272504], [-1.2530358230841063, 52.156782648640345], [-1.253727750292336, 52.15579447425117], [-1.2506316639249457, 52.15353619361401], [-1.247032711539614, 52.154775567624455], [-1.2429090938631608, 52.15469786036543], [-1.2415176815591475, 52.15417561505402], [-1.241478420277469, 52.15381934458002], [-1.2394224617972611, 52.15267235369399], [-1.2386330608811091, 52.15010314271585], [-1.2376643909398979, 52.14966168451107], [-1.2356982372278056, 52.14968410843015], [-1.235910429757446, 52.14949484568123], [-1.2343384188035922, 52.1489496837177], [-1.2339448766278946, 52.147782902198195], [-1.2324901512623831, 52.14917505139282], [-1.23159746640312, 52.149070371775295], [-1.2309204629364803, 52.14960353871921], [-1.2306810443448217, 52.15043454473085], [-1.2314322460899243, 52.15136728008662], [-1.23265482562993, 52.151835517691254], [-1.2332139845981234, 52.15323904668501], [-1.2329344599451963, 52.1530879382076], [-1.2320971681754256, 52.15366779554275], [-1.2316590374528364, 52.153475295380325], [-1.2314893314293323, 52.153994689865605], [-1.2302178125241263, 52.15365015721426], [-1.229586805804869, 52.15404798602758], [-1.2283941091114743, 52.15396190646996], [-1.2275555223561163, 52.15470270002478], [-1.2274435748478552, 52.15601818211074], [-1.2260889714081602, 52.156244883033374], [-1.2258933029514476, 52.156568159497446], [-1.2255546586105017, 52.15628901439259], [-1.2241151700389374, 52.15627416525808], [-1.224972611785088, 52.15781900935464], [-1.2242254235652161, 52.15875811708954], [-1.2230498567194321, 52.159280769083566], [-1.223517030533382, 52.159315302477964], [-1.22335459306805, 52.159659555426806], [-1.2237601866205894, 52.15962438527866], [-1.223191176049314, 52.160399277958625], [-1.2180732810533992, 52.15964085571994], [-1.2170501889465561, 52.159209654376404], [-1.2172433648538228, 52.15877851958479], [-1.2126168157853983, 52.157696761546326], [-1.2115170010370604, 52.159717668929915], [-1.206337064168434, 52.15826785805353], [-1.2049302118508587, 52.15747974785879], [-1.202591429362117, 52.15706839983991], [-1.2007272685171337, 52.15708994189805], [-1.1979987767125617, 52.15518249015353], [-1.1959692832321736, 52.158144547218726], [-1.196007010265283, 52.15896748458462], [-1.194741578061453, 52.15999635165388], [-1.1928315867747483, 52.16019910572549], [-1.1910347236865786, 52.15932637022421], [-1.190013810141376, 52.15935442038017], [-1.1899885884269552, 52.15897755613215], [-1.1884669450281202, 52.159532631948025], [-1.1865408436329767, 52.15941510727548], [-1.1866634775016727, 52.15685892766502], [-1.1855443721123553, 52.155461288300884], [-1.1871222081572292, 52.1537406099485], [-1.186576213778501, 52.15250062307473], [-1.1895033780476894, 52.14914474255353], [-1.1873098739037227, 52.14809215572357], [-1.1884316954304193, 52.145309157455145], [-1.188839807380657, 52.145123123535605], [-1.187952349097972, 52.144906606805804], [-1.1882222349129534, 52.14460906949017], [-1.1858763894848576, 52.14414790385645], [-1.1858705716070677, 52.1444670315883], [-1.184779083153079, 52.14470316236458], [-1.1850432358608296, 52.144958542864], [-1.1846732948446503, 52.14529043447221], [-1.1837619728572621, 52.144864208386], [-1.1833067135999007, 52.14522247034008], [-1.1828375311773776, 52.145307395191644], [-1.1826091500739033, 52.145007317579555], [-1.1819760270970348, 52.14526727038651], [-1.1815379195404354, 52.1447741994601], [-1.1810637373174744, 52.144974130226714], [-1.1805409858159153, 52.14478705255715], [-1.1809161270335091, 52.14457385295599], [-1.1802725770160831, 52.14420707171722], [-1.1792761838151242, 52.144348538782005], [-1.1792495107960126, 52.14365608827236], [-1.1783807443442027, 52.1437767733551], [-1.177711321912021, 52.14314815403393], [-1.1772733832639868, 52.14344090036642], [-1.1769079937522349, 52.143124576290695], [-1.176518649229631, 52.14331699175621], [-1.1764471975645185, 52.14378756081383], [-1.1725413756816847, 52.14321357364684], [-1.1693222715029765, 52.14320443379934], [-1.1489989461348313, 52.14562830939758], [-1.141578230911976, 52.14599348753646], [-1.1407749233230184, 52.14581677495354], [-1.139856808630994, 52.146364833836394], [-1.1384432339516042, 52.14616118410991], [-1.137423999239415, 52.1464216736214], [-1.137303715065175, 52.14886179462484], [-1.1380797988833011, 52.14870927518492], [-1.1387403746448739, 52.14924089478786], [-1.139723313251416, 52.14927862540729], [-1.140582892738686, 52.150478874456034], [-1.1404554202499648, 52.151253891859035], [-1.1444205430435828, 52.15294326916465], [-1.1455557129301994, 52.15403573373144], [-1.1448667650065254, 52.15451807912101], [-1.145310981858889, 52.155141658002385], [-1.1444833308872886, 52.15569130586626], [-1.1435503110063268, 52.157925007911224], [-1.1450130112946408, 52.15978141653073], [-1.147461811808059, 52.16107670608907], [-1.1507236939804883, 52.16212963799833], [-1.1520037099406852, 52.16200761663329], [-1.154316134642176, 52.16256538682127], [-1.1566214991533788, 52.16358262334624], [-1.1564915486488425, 52.165814969722625], [-1.157533289090868, 52.169494141704085], [-1.153025374457851, 52.16972441492196], [-1.1523405992843596, 52.168982294064485], [-1.1512403433739693, 52.169321415800596], [-1.1479251443626934, 52.167358250983455], [-1.144215196139585, 52.16601788109214], [-1.1385420049996773, 52.17080456588015], [-1.137247342343654, 52.1732585676958], [-1.134816590338683, 52.172748043685125], [-1.1335732974184487, 52.17209069996001], [-1.1286004978166253, 52.167880631487854], [-1.1275990180399256, 52.16981880027726], [-1.1264388452039482, 52.17082434663604], [-1.1251801382292583, 52.17147852507951], [-1.123840157924921, 52.172849607479726], [-1.120908682456646, 52.17401279946117], [-1.1251871501829682, 52.17678938271864], [-1.1280223909748022, 52.18099648504013], [-1.1282122056798238, 52.182063246921516], [-1.1270842938052992, 52.18349345483608], [-1.1269082270738335, 52.18569216895747], [-1.1244653727499438, 52.18420946153618], [-1.1246884836672875, 52.18394497915375], [-1.1202269702028582, 52.18166684634132], [-1.1127586978854629, 52.17881662338097], [-1.1082925331742377, 52.17879914034159], [-1.1026006994795021, 52.17966586242824], [-1.0977429697710217, 52.17941301878283], [-1.0955990819835413, 52.17890217145329], [-1.0954783663910432, 52.18002053742888], [-1.0931388126572184, 52.18014198873473], [-1.09315229332147, 52.18041002762223], [-1.0913321404253418, 52.18080687400932], [-1.0913699579161562, 52.181537180827775], [-1.0896651438242155, 52.18186927638279], [-1.089232509458011, 52.182427875671735], [-1.0898584670556324, 52.18615216798732], [-1.089453745977099, 52.18634597552109], [-1.0904604807115719, 52.18991401991223], [-1.088072889100254, 52.19128461784269], [-1.0862366644555261, 52.19172359663682], [-1.0854226120475328, 52.19268198525315], [-1.084688776531307, 52.192657421511726], [-1.084575425364371, 52.19304941270841], [-1.083165866835572, 52.193511425578734], [-1.079787517865932, 52.193812391543766], [-1.0787487561324558, 52.193319648942236], [-1.0724013387145777, 52.194560986675256], [-1.0696953632557664, 52.194744708136454], [-1.0674653467287878, 52.19546521399592], [-1.0662061714674342, 52.19543907988472], [-1.0647259664001005, 52.19590930303684], [-1.060581733364657, 52.196367232299274], [-1.0600133693433667, 52.196673786027155], [-1.0577685012889446, 52.196287283408694], [-1.0572629632526185, 52.19583554779136], [-1.0546891916260122, 52.19557488976981], [-1.0524959795721307, 52.194544970617905], [-1.051281571030813, 52.19448569087295], [-1.050617348843718, 52.1940748953352], [-1.049307639414731, 52.193880994800764], [-1.0471563605972105, 52.194256517998895], [-1.046679045665318, 52.194002704052856], [-1.0466796334992254, 52.1934281875189], [-1.044412767843605, 52.19318605091977], [-1.0433462882504627, 52.1938687787117], [-1.0421278097213957, 52.19406202759336], [-1.0384373327057141, 52.195659410541246], [-1.0421175444751365, 52.19910302688647], [-1.0423127329816844, 52.200910864411945], [-1.043958486480309, 52.20324745616278], [-1.0551513906667311, 52.21552526989519], [-1.0571552042342065, 52.216557305362656], [-1.0573579107840294, 52.21804771127888], [-1.0660704656995885, 52.227256843303685], [-1.065115635511769, 52.22789391081903], [-1.0652038340196928, 52.228223752060124], [-1.0640220537618446, 52.22879600718186], [-1.0628465204850692, 52.22815823617134], [-1.0621625582762508, 52.22831198352289], [-1.0615512912163503, 52.22758250834058], [-1.0605362021406273, 52.22760499450495], [-1.0602641479269044, 52.22710560892198], [-1.0585481640357042, 52.22738683637345], [-1.0583603258675995, 52.228585605728306], [-1.056963090568426, 52.22998953601853], [-1.0574070716151833, 52.23011091462017], [-1.0571178598637747, 52.230838616706556], [-1.0559090266641602, 52.23108430713094], [-1.0556327294095287, 52.2314066569491], [-1.0552517116560733, 52.23121926368827], [-1.0549770471689806, 52.23181135690018], [-1.0545118468111174, 52.231580144028875], [-1.0536511324956574, 52.23198598075478], [-1.0531576536951741, 52.23150098264303], [-1.052211969218246, 52.23190522839616], [-1.0506913367487227, 52.231461404034754], [-1.0503432287839425, 52.23096596841987], [-1.049700739275453, 52.23115224475964], [-1.048407923178968, 52.23067076695986], [-1.0471461081621174, 52.2319570298603], [-1.0462808100211896, 52.23202104965118], [-1.0459152480262714, 52.231930911138285], [-1.0461489705803266, 52.23154802054999], [-1.0451126490243499, 52.231598964798934], [-1.0434759338607063, 52.23056080533825], [-1.0432158210068334, 52.23108099519039], [-1.0439187802610812, 52.23162166041002], [-1.0432659021834747, 52.23229515133658], [-1.042111579017095, 52.2325213693161], [-1.0432112376378202, 52.23627040256284], [-1.0429519364245594, 52.236818460935396], [-1.0424470098571925, 52.23728372357374], [-1.0416249669428623, 52.23730761321449], [-1.041920851418166, 52.23784858001984], [-1.0413358311770318, 52.23767566426634], [-1.0413200062452508, 52.23806840434926], [-1.0406800894059938, 52.2378654693905], [-1.040144311654093, 52.23819196621289], [-1.0397806573951378, 52.23794444412353], [-1.0384986648863554, 52.23837730317864], [-1.0354790468447006, 52.23789949608278], [-1.0298862601859116, 52.23932008103666], [-1.0250581665407592, 52.2399042666729], [-1.0196249528064165, 52.2410981956651], [-1.017542220409589, 52.24097203902863], [-1.0152075816443624, 52.24157294714637], [-1.013572083998146, 52.24162230163491], [-1.0141167165062295, 52.242819838150005], [-1.0138078241806412, 52.244862675838135], [-1.0133211250494059, 52.244880181190645], [-1.012470995285792, 52.246690104324905], [-1.0110935200584485, 52.24685294444145], [-1.0088324790757235, 52.24833904043496], [-1.0037370924794693, 52.2477890525145], [-1.001605691015249, 52.24845261654531], [-1.0009390182884355, 52.24747959071766], [-0.9974195565636099, 52.247660980860076], [-0.9976062923773192, 52.25126696698765], [-0.99239076186931, 52.25478554225282], [-0.991824045614092, 52.255940526874525], [-0.991226892808629, 52.256172712019925], [-0.9895441044035382, 52.25736937874251], [-0.9872479214938132, 52.258030285700336], [-0.9831094729806282, 52.25775563878543], [-0.9793443214252022, 52.25800277589983], [-0.9761477248286622, 52.25748417602766], [-0.9755106694381533, 52.257598192555214], [-0.9750821671300393, 52.258265254635475], [-0.9734713656310328, 52.25854517338657], [-0.9726603571860603, 52.258391615296574], [-0.9714900791584432, 52.25761726120653], [-0.9693570287813318, 52.25830530750749], [-0.967834597723688, 52.25831538000983], [-0.9617700843850039, 52.25945889217298]]]}             
    elif idx == 6:
        geometry = {"type": "Polygon", "coordinates": [[[-0.6323764867334003, 52.361559725301476], [-0.6271541783212362, 52.35914633151735], [-0.6294474229179517, 52.3570753668984], [-0.6267019081243195, 52.355116778992816], [-0.6267116023840327, 52.35480401082042], [-0.6227284113156899, 52.35337400860031], [-0.6256333263711963, 52.34587532442821], [-0.6262172070340521, 52.34607536065441], [-0.6270875577092817, 52.344237044005816], [-0.6241573300654326, 52.342584538656475], [-0.6228119185550035, 52.34199262945631], [-0.6296645889277949, 52.33917808162454], [-0.6322170104718317, 52.33675682880686], [-0.6334930314481785, 52.33698012062411], [-0.6348851550613135, 52.333000665141945], [-0.6351300962520975, 52.32895050998974], [-0.6400950101881886, 52.31835990527935], [-0.6412668019394352, 52.31717938616551], [-0.6409687902653315, 52.315795809689604], [-0.6394243827937209, 52.31372457157525], [-0.6370165284978503, 52.30519147026913], [-0.636950832101518, 52.30432217304171], [-0.6382025459408482, 52.30172119671403], [-0.6381220640598252, 52.2992756313827], [-0.6362466574666603, 52.29626088851626], [-0.6342742946413282, 52.29507024842567], [-0.6275541811941868, 52.292165617628754], [-0.6223732825336827, 52.290717054635806], [-0.6212691883828478, 52.290105368196414], [-0.6202079409584106, 52.28872638907662], [-0.6159262686825818, 52.28568506170803], [-0.6152695061493192, 52.28488342313675], [-0.6147435914510135, 52.28289838190817], [-0.6106327236635172, 52.279483863339244], [-0.6105957196716886, 52.27888552323715], [-0.6110908814308204, 52.278518240557794], [-0.6200721972626914, 52.27690891116471], [-0.6269937591449056, 52.274863304792945], [-0.6269373815581563, 52.27336743787927], [-0.631428277713263, 52.27003356984048], [-0.6354900497700824, 52.27191833090257], [-0.6376784879385506, 52.272386813084886], [-0.63992403669546, 52.27242797731822], [-0.6469154511605324, 52.271165976165584], [-0.6510952231634933, 52.26904068679601], [-0.6536713541357563, 52.268275337916094], [-0.652776220415939, 52.26657388390506], [-0.6500494959820672, 52.256764234939354], [-0.6498054169489269, 52.2540929825632], [-0.6489833826436089, 52.25269892324255], [-0.6455115534728788, 52.242447281189065], [-0.6431015826494225, 52.23853006471529], [-0.6434646393933922, 52.23584599132805], [-0.642765198636808, 52.23342654721556], [-0.6396719997386716, 52.22893773113289], [-0.6386383581419637, 52.227931428369594], [-0.6373485814860161, 52.22730425638602], [-0.6436360493667485, 52.22334869848987], [-0.6486511373783931, 52.2208626830226], [-0.6523822669450555, 52.21724957819571], [-0.6535924358805536, 52.21522607759433], [-0.6585151907877181, 52.210070923119396], [-0.6614777611788561, 52.208113087648734], [-0.66868150891664, 52.19771830560854], [-0.668153374166556, 52.195021303271865], [-0.6734424821922297, 52.196053694438525], [-0.6752733121681751, 52.195791035836784], [-0.6800402718513466, 52.196128576017074], [-0.6812538885794228, 52.19571150958125], [-0.6846710973750055, 52.19632328714362], [-0.6866470341280078, 52.195801316798764], [-0.6940971250990229, 52.19525282930048], [-0.6963564489697953, 52.1942915127818], [-0.7016890336166703, 52.19329560375809], [-0.7054731290440553, 52.19155792363809], [-0.7074507203622947, 52.19298035229551], [-0.7117268390030536, 52.19734279433733], [-0.7169654569460631, 52.21327691186957], [-0.7174163180695045, 52.21576601233571], [-0.7169545931042373, 52.21792242221423], [-0.7148810065607657, 52.22089028653949], [-0.7143491536393545, 52.221109203028135], [-0.7146443471798244, 52.221277893887645], [-0.7143202525916099, 52.221449636774196], [-0.7157652917624083, 52.22149601746067], [-0.7180128441843455, 52.223467862485904], [-0.7179920076046346, 52.2248998376247], [-0.7204455184778336, 52.22689733063582], [-0.7206670102246009, 52.22830946063085], [-0.7235423845038697, 52.230408530868885], [-0.7248608029734706, 52.2328412666474], [-0.7246111444599111, 52.23388966401529], [-0.7260319524032044, 52.235357876005594], [-0.7274921826351389, 52.23811496927493], [-0.7368088630554769, 52.24271941885737], [-0.7418892984707431, 52.243976659475884], [-0.7441211362406861, 52.243569792514855], [-0.7488198573221551, 52.246017574433345], [-0.7537248653570058, 52.247858567479405], [-0.7593936399325617, 52.24749393310807], [-0.7610087052313845, 52.248353361750496], [-0.7609066754370116, 52.24865160047065], [-0.7623055078494099, 52.248759840005725], [-0.7644915561140981, 52.24815966989246], [-0.7659157220304385, 52.24740669666037], [-0.7666880801864081, 52.246177622873866], [-0.7679781492436758, 52.24682674182649], [-0.7690332301409963, 52.245856857667384], [-0.7699101381832482, 52.24592630847103], [-0.7727266370438052, 52.24535052867071], [-0.774379202366863, 52.245284913859685], [-0.7753497816144296, 52.24599633817987], [-0.7770615130247583, 52.2460680103299], [-0.7778125540665016, 52.246508212636016], [-0.779167701598216, 52.24649976197428], [-0.7803018568961075, 52.24552160755467], [-0.78137916166489, 52.245387031897835], [-0.7814033845119506, 52.24455568908846], [-0.7828581188171736, 52.24411840608317], [-0.7834545982351432, 52.2442100321572], [-0.7842161494071778, 52.24351562413096], [-0.7914323366887884, 52.24222763414943], [-0.7950998426011618, 52.254066493541806], [-0.8014174070333413, 52.252636498417594], [-0.8012413942819483, 52.25351133309763], [-0.8014385220259609, 52.257284971752014], [-0.8008926812031565, 52.257861056799214], [-0.8013845182033612, 52.258150168258425], [-0.8010872102196712, 52.258415088980705], [-0.8017064773201019, 52.258543704470846], [-0.8014364981572994, 52.25899136332725], [-0.8017493063538588, 52.2591285528539], [-0.8015396382097233, 52.26043996181891], [-0.8011443324398326, 52.26058874931496], [-0.8017060908615424, 52.26105932155805], [-0.8013950918721078, 52.2613429784209], [-0.8018129857120222, 52.26225700666002], [-0.8030690813828426, 52.26344126817513], [-0.8028560581271833, 52.26411520189481], [-0.8034819409877627, 52.2658505157014], [-0.8029743181667379, 52.266686936603286], [-0.8035598219392066, 52.26791283892418], [-0.8057060783986864, 52.27082696526226], [-0.8073185643915245, 52.27217567088853], [-0.8091574084722345, 52.275313128050776], [-0.8076491907330694, 52.27842669733439], [-0.8070883945230388, 52.281515663744116], [-0.8077513493573044, 52.282920378755065], [-0.8076108917065916, 52.28449683495654], [-0.8071464476565526, 52.28628582472644], [-0.8059552177236617, 52.287296911291264], [-0.8059137739392349, 52.28824051927304], [-0.8083965613854507, 52.292859892982015], [-0.8110015450733058, 52.2953460220465], [-0.8125501456522822, 52.29863418503659], [-0.8122996038688591, 52.29889690595789], [-0.8136575393092159, 52.30027351373776], [-0.8141366332888172, 52.30226434439852], [-0.8148829314165595, 52.302768158929105], [-0.8149217656927147, 52.30444348828557], [-0.8159448708256344, 52.30584196482771], [-0.8157248740492085, 52.306776592093605], [-0.8171727709487788, 52.30797609341241], [-0.8167627367954877, 52.308559001943], [-0.8179661664697029, 52.30958167395846], [-0.8142490587964891, 52.31150976873018], [-0.8093835371802769, 52.31516502104506], [-0.8055484363089339, 52.31691989075942], [-0.7949778918906043, 52.32303503242722], [-0.7944598250995466, 52.32298750386576], [-0.7928637725151778, 52.32378310512592], [-0.7925892462841065, 52.32616188378699], [-0.7906037419018189, 52.32756394800778], [-0.7893095418116615, 52.329176195688], [-0.7857953944837965, 52.33060295401603], [-0.786866867063261, 52.33134936776866], [-0.7875554820060287, 52.33284082313104], [-0.7861040886015849, 52.33862936740628], [-0.7859710760593881, 52.34182507099277], [-0.7866772200536144, 52.34439644990306], [-0.7876906032251749, 52.34534547730503], [-0.7886708063216749, 52.34729309267491], [-0.7864503194558665, 52.34823230800225], [-0.7826232557743399, 52.35100163764563], [-0.7808716416370082, 52.350683288615656], [-0.7792248310700354, 52.35279700773433], [-0.7796441765457527, 52.353562001231936], [-0.7788346810046244, 52.35374059166409], [-0.7781515074933469, 52.35226182017187], [-0.7766844228713139, 52.350945705725756], [-0.7770954670137252, 52.35078538732305], [-0.7762399636010626, 52.349922392472756], [-0.7716938811488957, 52.350791388406755], [-0.7703413780144691, 52.34952941445215], [-0.7657525702014308, 52.35029976697755], [-0.7641540228940404, 52.35028845390194], [-0.760804866874651, 52.34887694294423], [-0.7568092436714009, 52.34807161687591], [-0.7544220887957467, 52.34786042619902], [-0.7537361451606673, 52.3481867438755], [-0.7521271050509978, 52.34829290193885], [-0.750786455204132, 52.348041361921936], [-0.7487910311459905, 52.34706274584091], [-0.7483087993312098, 52.347345349725856], [-0.7478606470775567, 52.34720128581612], [-0.7468880921420189, 52.34790211835032], [-0.7455567794437936, 52.347895183844074], [-0.7452522309114598, 52.3491093036645], [-0.7459300541412398, 52.34953903000592], [-0.7456649245957563, 52.350036136114255], [-0.7448202011921868, 52.35072932042138], [-0.7434814371890931, 52.351289615014736], [-0.7429179843789356, 52.35107410898581], [-0.741361377694428, 52.352270399444805], [-0.7408444865056165, 52.35217141704857], [-0.7399989571976129, 52.35268021139579], [-0.7384679090118709, 52.35478121182581], [-0.7380338899512648, 52.35465793507588], [-0.7380327420453059, 52.35500854936648], [-0.7374549251412429, 52.35488004964849], [-0.7375377713175525, 52.35532063387891], [-0.737158761259279, 52.355174482101965], [-0.7359962709422044, 52.35716523951434], [-0.7355851506807527, 52.35721476987503], [-0.7358020468869962, 52.357488621841995], [-0.7342436807271492, 52.35765530043502], [-0.7343429663761992, 52.35793059085793], [-0.7325301278525954, 52.35821415359204], [-0.7300929809933719, 52.35917425931423], [-0.7283267494273209, 52.36028633463316], [-0.7283726939149406, 52.3606302647665], [-0.7270537695566588, 52.36119867777578], [-0.7255025418081157, 52.36121251976891], [-0.7236881919096961, 52.36169735533534], [-0.722667018193321, 52.362375892524454], [-0.7210067505557012, 52.36260430287385], [-0.720048526962136, 52.363138699892836], [-0.7190816809804291, 52.36295295713391], [-0.7188324741967569, 52.36349331895653], [-0.7160090108868813, 52.36331877987645], [-0.7159925608243789, 52.36363147780036], [-0.715114174301444, 52.36363990801723], [-0.7150081503924147, 52.36329172390161], [-0.7140097531266065, 52.36338422851934], [-0.7132410918151778, 52.362900299834045], [-0.7125683829680378, 52.363206750813866], [-0.7118482108347434, 52.36297141377852], [-0.7116527496156223, 52.36328036285289], [-0.7111784562606267, 52.36312598830068], [-0.7110947019803914, 52.3634783991811], [-0.7073194187848817, 52.36300825486931], [-0.7060557515100228, 52.36308259999408], [-0.704569045429424, 52.36374869456818], [-0.7029499012737455, 52.363622180757915], [-0.7005036750687603, 52.36435588746573], [-0.7000804913036706, 52.36421452369903], [-0.6989473400514752, 52.362593625867014], [-0.6965148678963947, 52.363954145895384], [-0.6962136919967751, 52.36375748832077], [-0.6958590647861995, 52.36253442256073], [-0.6967646021808972, 52.361606677291256], [-0.6957730388899032, 52.359571066587144], [-0.6945588070092925, 52.358816856879066], [-0.6936811282194539, 52.35905073875819], [-0.6930364366875149, 52.35885216337209], [-0.6929981863299983, 52.35810904805936], [-0.6923411925005338, 52.35758127622894], [-0.6918793407758654, 52.357805363326875], [-0.6915653564556552, 52.35754842159982], [-0.6911980221444177, 52.356810649661575], [-0.692410266325396, 52.356085959986885], [-0.6904650296186227, 52.356221714650985], [-0.6911914893720095, 52.35538828976465], [-0.6906366019877204, 52.35454148011276], [-0.691105898027866, 52.3539128330224], [-0.6887631098939189, 52.3538913560703], [-0.6882801645280633, 52.35339326509571], [-0.6862146135700239, 52.35263760428208], [-0.686437075904798, 52.35196937975762], [-0.6859423299461671, 52.351323741609846], [-0.6864495901535007, 52.3505057938252], [-0.6843778669793118, 52.349617005759676], [-0.6834756988250497, 52.349791217036866], [-0.6827556623146223, 52.34956379187289], [-0.6823681709909052, 52.35000366764591], [-0.6806107009446754, 52.35040299888534], [-0.6803513451859875, 52.35013665936583], [-0.6777737740293537, 52.35046485848632], [-0.6771513648100975, 52.34858960785806], [-0.6749042791373815, 52.34846996642467], [-0.6748143369029288, 52.3489760712526], [-0.668045029996624, 52.34959853056655], [-0.6674639156441996, 52.349004870221556], [-0.664578740412567, 52.34920788234872], [-0.6644317727389418, 52.34887087181656], [-0.6633382536217034, 52.34915431002007], [-0.6633166757643195, 52.349869706543494], [-0.6611170815542752, 52.35007229719828], [-0.6606515488394012, 52.34900964975888], [-0.6597967855950236, 52.34935876842948], [-0.6590821948872781, 52.349199570274784], [-0.6580878851861512, 52.34785227588142], [-0.6535966164500228, 52.348105080858836], [-0.6532764546811067, 52.34960650913661], [-0.6503812957858348, 52.35042394470002], [-0.6504543552112704, 52.35096245414537], [-0.6487152987691401, 52.35175538553071], [-0.6483398647435922, 52.352800286174485], [-0.6475286031399196, 52.35282516051146], [-0.6456427541805464, 52.354000253757526], [-0.6453873465231047, 52.35385252622568], [-0.6411933472008894, 52.3555890776751], [-0.6363707164900909, 52.35794488933377], [-0.6342131327961877, 52.360435596550396], [-0.6323764867334003, 52.361559725301476]]]}             
    boundary = shape(geometry)
    return boundary

class SMR_Replacement_with_OptimalFlowAnalysis:
    
    def __init__(
        self, 
        numberOfBus:int,
        numOfBranch:int,
        slackBusLocation:str,
        eliminateClosedPlantIRIList:list,
        agentIRI:str,
        startTime_of_EnergyConsumption:str,
        loadAllocatorName:str, EBusModelVariableInitialisationMethodName:str,
        ELineInitialisationMethodName:str, 
        piecewiseOrPolynomial:int, pointsOfPiecewiseOrcostFuncOrder:int, baseMVA: float,  
        withRetrofit:bool, retrofitGenerator: list, retrofitGenerationTechTypeOrGenerationTechnology: list, 
        DecommissionedNuclearSitesLocation:list,
        pickDecommissionedNuclearSites:bool,
        generatorClusterFunctionName:str,
        newGeneratorType:str, 
        weighterList:list,
        discountRate:float,
        bankRate:float, 
        projectLifeSpan:float,
        yearlyOperationHours:int,
        SMRCapitalCost:float,
        SMR_LCOE:float,
        SMROperationalRatio:float,
        MonetaryValuePerHumanLife:float,
        NeighbourhoodRadiusForSMRUnitOf1MW:float,
        ProbabilityOfReactorFailure:float,
        SMRCapability:float,
        maxmumSMRUnitAtOneSite: int,
        SMRIntergratedDiscount:float, 
        DiscommissioningCostEstimatedLevel:int,
        safeDistance:float,
        pop_size:int,
        n_offsprings:int,
        numberOfGAGenerations:int,
        ifReadLocalResults:bool,
        OWLUpdateEndPointURL:str, endPointUser:str = None, endPointPassWord:str = None,
        OWLFileStoragePath = None, updateLocalPowerPlantOWLFileFlag:bool = True
        ):
        ## -- Local objectives container --##
        self.ObjectSet = locals()     
        ##--1. specify the query/update endpoint information--##
        self.queryUKDigitalTwinEndpointLabel = endpointList.UKPowerSystemBaseWorld['label'] ## ukdigitaltwin
        self.queryUKDigitalTwinEndpointIRI = endpointList.UKPowerSystemBaseWorld['endpoint_iri']
        self.geospatialQueryEndpointLabel = endpointList.UKPopulationData['label'] ## population: ukdigitaltwin_pd
        self.geospatialQueryEndpointIRI = endpointList.UKPopulationData['endpoint_iri']
        self.OWLUpdateEndPointURL = OWLUpdateEndPointURL ## derivation
        self.endPointUser = endPointUser
        self.endPointPassWord = endPointPassWord
        self.ons_endpointIRI = endpointList.ONS['endpoint_iri']
        if endpointList.ONS['type'] == 'ORIGINAL':
            self.ifQueryONSOrigionalEndpoint = True
        else:
            self.ifQueryONSOrigionalEndpoint = False
        self.ons_endpointLabel = endpointList.ONS['label']
        ## create the power system model node IRI
        self.powerSystemModelIRI = UK_PG.ontopowsys_namespace + UK_PG.powerSystemModelKey + str(uuid.uuid4())
        ## create the timeStamp, e.x. 2022-06-15T16:24:29.371941+00:00
        self.timeStamp = datetime.now(pytz.utc).isoformat()

        self.numOfBus = numberOfBus
        self.numOfBranch = numOfBranch

        ## specify the topology node
        self.topologyNodeIRI = queryOPFInput.queryTopologyIRI(numberOfBus, numOfBranch, self.queryUKDigitalTwinEndpointIRI)

        ##--5. Identify the retrofitting generators--##
        if type(withRetrofit) is not bool and withRetrofit in ["True", "TRUE"]:
            self.withRetrofit = True 
        elif type(withRetrofit) is not bool and withRetrofit in ["False", "FALSE"]:
            self.withRetrofit = False 
        elif type(withRetrofit) is bool:
            self.withRetrofit = withRetrofit 
        else:
            raiseExceptions("Please provide a bool value to withRetrofit")

        eliminateClosedPlantIRIList = queryOPFInput.queryEliminatePowerPlant(eliminateClosedPlantIRIList, self.queryUKDigitalTwinEndpointIRI)

        if not ifReadLocalResults:
            ## query the number of the bus under the topology node IRI, and the bus node IRI, branch node IRI and generator node IRI
            _, self.busNodeList = query_model.queryBusTopologicalInformation(self.topologyNodeIRI, self.queryUKDigitalTwinEndpointLabel) ## ?BusNodeIRI ?BusLatLon ?GenerationLinkedToBusNode
            self.branchNodeList, self.branchVoltageLevel = query_model.queryELineTopologicalInformation(self.topologyNodeIRI, self.queryUKDigitalTwinEndpointLabel) ## ?ELineNode ?From_Bus ?To_Bus ?Value_Length_ELine ?Num_OHL_400 or 275            
            self.generatorNodeList = query_model.queryEGenInfo(self.topologyNodeIRI, self.queryUKDigitalTwinEndpointLabel, eliminateClosedPlantIRIList) ## 0?PowerGeneratorIRI 1?FixedMO 2?VarMO 3?FuelCost 4?CO2EmissionFactor 5?Bus 6?Capacity 7?PrimaryFuel 8?Latlon 9?PowerPlant_LACode 10:GenerationTech 11:Extant 12:samllerLAcode
            self.capa_demand_ratio = demandAndCapacityRatioCalculator(self.generatorNodeList, self.topologyNodeIRI, startTime_of_EnergyConsumption)
            
            if self.withRetrofit is True:
                for egen in self.generatorNodeList:
                    egen.append("Extant")
        ##--2. passing arguments--##
        ## specify the startTime_of_EnergyConsumption for querying the demand load 
        self.startTime_of_EnergyConsumption = startTime_of_EnergyConsumption
        ## specify the agent IRI        
        self.agentIRI = agentIRI
        ## specify the slackBusNodeIRI (there is only one slack bus is allowed in the modelling)
        self.slackBusNodeIRI = queryOPFInput.querySlackBusNode(slackBusLocation, self.queryUKDigitalTwinEndpointIRI)
        ## specify the loadAllocatorName
        self.loadAllocatorName = loadAllocatorName
        ## specify the EBusModel, ELine and EGen Variable Initialisation Method Name
        self.EBbusInitialisationMethodName = str(EBusModelVariableInitialisationMethodName)
        self.ELineInitialisationMethodName = str(ELineInitialisationMethodName)
        self.OrderedBusNodeIRIList = []
        ##--3. specify the OPF model factors--##
        ## specify the baseMVA and OPFOrPF 
        self.baseMVA = float(baseMVA)
        self.OPFOrPF:bool = True ## true for OPF simulation 
        ## specify the OPF objective function type, 1 for piecewise, 2 for polynomial
        if int(piecewiseOrPolynomial) not in [1, 2]:
            raiseExceptions("piecewiseOrPolynomial has to be 1 or 2")
        else:
            self.piecewiseOrPolynomial = int(piecewiseOrPolynomial)
        ## specify the pointsOfPiecewiseOrcostFuncOrder
        if int(pointsOfPiecewiseOrcostFuncOrder) < 0:
            raiseExceptions("pointsOfPiecewiseOrcostFuncOrder has to be a positive number")
        else:
            self.pointsOfPiecewiseOrcostFuncOrder = int(pointsOfPiecewiseOrcostFuncOrder)     
        ## specify the local storage path (to be deleted)
        self.OWLFileStoragePath = OWLFileStoragePath
        self.updateLocalPowerPlantOWLFileFlag = updateLocalPowerPlantOWLFileFlag       
        ##--4. JVM module view and use it to import the required java classes--##
        self.jpsBaseLib_view = jpsBaseLibGW.createModuleView()
        jpsBaseLibGW.importPackages(self.jpsBaseLib_view,"uk.ac.cam.cares.jps.base.query.*")
        jpsBaseLibGW.importPackages(self.jpsBaseLib_view,"uk.ac.cam.cares.jps.base.derivation.*")
        ## initialise the storeClient with SPARQL Query and Update endpoint
        if self.endPointUser is None:
            self.storeClient = self.jpsBaseLib_view.RemoteStoreClient(self.OWLUpdateEndPointURL, self.OWLUpdateEndPointURL)
        else:
            self.storeClient = self.jpsBaseLib_view.RemoteStoreClient(self.OWLUpdateEndPointURL, self.OWLUpdateEndPointURL, self.endPointUser, self.endPointPassWord)
        ## initialise the derivationClient
        self.derivationClient = self.jpsBaseLib_view.DerivationClient(self.storeClient, derivationInstanceBaseURL)  
       
        self.retrofitGenerator = retrofitGenerator # GeneratorIRI, location, capacity
        self.retrofitGenerationFuelOrGenType = retrofitGenerationTechTypeOrGenerationTechnology    
        ##--6. Identify the generators type used to replace the exisiting generators--##
        self.newGeneratorType = newGeneratorType
        ##--7. initialise the bus/branch/generator objects name list--##
        self.BusObjectList: list = []
        self.BranchObjectList: list = []
        self.GeneratorObjectList: list = []
        self.SMRSiteObjectList:list = []
        ##--8. site selection factors--##
        self.weighterList = weighterList
        self.discountRate = discountRate
        self.bankRate = bankRate
        self.projectLifeSpan = projectLifeSpan
        self.SMRCapitalCost = SMRCapitalCost
        self.SMR_LCOE = SMR_LCOE
        self.SMROperationalRatio = SMROperationalRatio
        self.maxmumSMRUnitAtOneSite = maxmumSMRUnitAtOneSite
        self.SMRIntergratedDiscount = SMRIntergratedDiscount
        self.MonetaryValuePerHumanLife = MonetaryValuePerHumanLife 
        self.NeighbourhoodRadiusForSMRUnitOf1MW = NeighbourhoodRadiusForSMRUnitOf1MW
        self.ProbabilityOfReactorFailure = ProbabilityOfReactorFailure
        self.SMRCapability = float(SMRCapability)
        self.DiscommissioningCostEstimatedLevel = DiscommissioningCostEstimatedLevel
        self.safeDistance = float(safeDistance)
        self.pop_size = pop_size
        self.n_offsprings = n_offsprings
        self.numberOfGenerations = numberOfGAGenerations
        self.retrofittingCost = 0
        self.yearlyOperationHours = yearlyOperationHours

        ## calculate Fix O&M based on LCOE
        self.NPVG = 0
        for i in range(projectLifeSpan): 
            self.NPVG += (SMRCapability * SMROperationalRatio * yearlyOperationHours)/(1 + discountRate)**(i + 1) ## i + 1 is because i starts from 0

        self.fix_om = round(SMR_LCOE - SMRCapitalCost/(self.NPVG) - 5, 2)

        ##--9. Demanding area query --##
        self.regionalDemandingList = list(query_model.queryElectricityConsumption_Region(self.startTime_of_EnergyConsumption, self.queryUKDigitalTwinEndpointIRI, self.ons_endpointIRI, self.ifQueryONSOrigionalEndpoint))
        demandingAreaList_original = demandingAndCentroid[self.startTime_of_EnergyConsumption]
        self.demandingAreaList = []
        LACodeList = []
        for demand in demandingAreaList_original:
            if demand['Area_LACode'] in LACodeList:
                index_demand = LACodeList.index(demand['Area_LACode'] )
                self.demandingAreaList[index_demand]['v_TotalELecConsumption'] += float(demand['v_TotalELecConsumption'])
            else:
                LACodeList.append(demand['Area_LACode'])
                self.demandingAreaList.append(demand)

        self.SMRIntegratedCostForDifferentInterationNumberList = []
        self.DecommissionedNuclearSitesLocation = DecommissionedNuclearSitesLocation
        self.pickDecommissionedNuclearSites = pickDecommissionedNuclearSites
        self.generatorClusterFunctionName = generatorClusterFunctionName
        ## Pre calcuation of the SMR investment 
        sumUpSMRIntegratedCost = 0
        for n in range(self.maxmumSMRUnitAtOneSite):
            sumUpSMRIntegratedCost += (self.SMRIntergratedDiscount**n ) * self.SMRCapitalCost * self.discountRate / (1 - ((1 + self.discountRate)**(-1 * self.projectLifeSpan)))
            self.SMRIntegratedCostForDifferentInterationNumberList.append(sumUpSMRIntegratedCost) 
        
        ##FIXME: demanding should be queried
        # demandingAreaList_original = list(query_model.queryElectricityConsumption_LocalArea(startTime_of_EnergyConsumption, self.queryUKDigitalTwinEndpointIRI, self.ons_endpointIRI))
        # # find the centroid of the polygon, the value of the 
        # for ec in self.demandingAreaList:
        #     if ec['Geo_InfoList'].geom_type == 'MultiPolygon':
        #         ec['Geo_InfoList'] = DLA.cgen_NumberentroidOfMultipolygon(ec['Geo_InfoList']) 
        #     elif ec['Geo_InfoList'].geom_type == 'Polygon':
        #         lon = ec['Geo_InfoList'].centroid.x
        #         lat = ec['Geo_InfoList'].centroid.y
        #         ec['Geo_InfoList'] = [lat, lon]

        self.CarbonTaxForOPF = -1 ## the initial carbon tax not for OPF calculation
        self.weatherConditionName = None
        self.time_now = time.strftime("%Y%m%d-%H%M", time.localtime())
        self.localRootFilePath = str(Path(__file__).resolve().parent.parent.parent) + "/outputs/smr_replacement_fig" #'/mnt/d/wx243/FromTWA'
        self.diagramPath = self.localRootFilePath + '/figFiles(LineChartANDHeatmapGrid)/' + self.time_now + '/'
        self.diagramPathParetoFront = self.localRootFilePath + '/ParetoFront/' + self.time_now + '/'
        self.diagramPathStack = self.localRootFilePath + '/figFiles(StackAreaGraph)/' + self.time_now + '/'
        self.netDemandingJSONPath = self.localRootFilePath + '/netDemandingGeoJSONFiles/' + self.time_now + '/'
        self.pieChartPath = self.localRootFilePath + '/regionalEnergyBreakdownPieChart/' + self.time_now + '/'
        self.barChartOutput = self.localRootFilePath + '/regionalOutputBarChart/' + self.time_now + '/'
        self.branchLossJSONPath = self.localRootFilePath + '/branchLossGeoJSONFiles/' + self.time_now + '/'
        self.majorEnergySourceJSONPath = self.localRootFilePath + '/majorEnergySourceJSONFiles/' + self.time_now + '/'
        self.outputOfDifferentEnergySourceJSONPath = self.localRootFilePath + '/outputOfDifferentEnergySourceJSONFiles/' + self.time_now + '/'
        self.regionalOutputJSONPath = self.localRootFilePath + '/regionalOutputJSONFiles/' + self.time_now + '/'
        self.fossilFuelPowerPlantGEOJSON = self.localRootFilePath + '/fossilFuelPowerPlantGEOJSON/' + self.time_now + '/'

    """Find the power plants located in each demanding areas"""
    def powerPlantAndDemandingAreasMapper(self):
        for demanding in self.demandingAreaList:
            Area_LACode = str(demanding['Area_LACode'])

            print(self.demandingAreaList.index(demanding))

            ## Find the official region of the demanding area
            if 'Official_region' in demanding.keys():
                official_region  = demanding['Official_region']
            else:
                if Area_LACode in ["E22000303", "E22000306", "E22000311", "E14001056"]:
                    official_region = "E12000008"
                elif Area_LACode in ["E41000222", "E14000981", "E14001022", "E41000225"]:
                    official_region = "E12000006"
                elif Area_LACode in ["E41000092", "E14000839", "E41000088", "E14001031", "E41000090", "E41000212", "E14000881", "E14000988"]:
                    official_region = "E12000009" 
                elif Area_LACode in highLevelRegions:
                    continue
                else:
                    official_region_List = queryWithinRegion(Area_LACode, self.ons_endpointLabel) ## return a list of the region LA code
                    if 'W' in official_region_List[0] or 'S' in official_region_List[0]:
                        for code in official_region_List:
                            if '92' in code:
                                official_region = code
                                break
                    else:
                        if isinstance(official_region_List, str):
                            official_region = official_region_List
                        else:
                            official_region = official_region_List[0]
                            if len(official_region) != 9:
                                raiseExceptions('The official_region LA code should be string and the length of it should be 9, the queried LA code list is %s' % official_region_List)

                demanding['Official_region'] = official_region 
            ## Find the boundary of the small area
            if 'Boundary' in demanding.keys():
                boundary = demanding['Boundary']
            elif Area_LACode[:8] == 'E0700015':
                demanding['Boundary'] = boundarySearchForObsoleteLACode(Area_LACode)
            else:
                boundary = queryOPFInput.queryAreaBoundaries(Area_LACode)
                demanding['Boundary'] = boundary
            for gen in self.generatorNodeList:
                if (gen[9] in official_region) or (gen[9] == official_region):
                    if len(gen) < 13:
                        genLocation = shapely.geometry.Point(gen[8][1], gen[8][0])
                        interiorFlag = boundary.intersects(genLocation)
                        if interiorFlag == True:
                            gen.append(Area_LACode) 
        
        ## For the power plant whose location not within the landmass boundary (e.g. the wind offshore, hydro pumps, etc)
        ## FIXME: some PP location need to be updated as their latlon may not in the given regional LA code 
        for gen in self.generatorNodeList:
            if len(gen) < 13:
                distanceList = []
                smallAreaCodeList = []
                for demanding in self.demandingAreaList:
                    Area_LACode = str(demanding['Area_LACode']) 
                    if 'Official_region' in demanding.keys():
                        official_region  = demanding['Official_region']
                    else:
                        if Area_LACode in ["E22000303", "E22000306", "E22000311", "E14001056"]:
                            official_region = "E12000008"
                        elif Area_LACode in ["E41000222", "E14000981", "E14001022", "E41000225"]:
                            official_region = "E12000006"
                        elif Area_LACode in ["E41000092", "E14000839", "E41000088", "E14001031", "E41000090", "E41000212", "E14000881", "E14000988"]:
                            official_region = "E12000009" 
                        elif Area_LACode in highLevelRegions:
                            continue
                        else:
                            official_region_List = queryWithinRegion(Area_LACode, self.ons_endpointLabel) ## return a list of the region LA code
                            if 'W' in official_region_List[0] or 'S' in official_region_List[0]:
                                for code in official_region_List:
                                    if '92' in code:
                                        official_region = code
                                        break
                            else:
                                if isinstance(official_region_List, str):
                                    official_region = official_region_List
                                else:
                                    official_region = official_region_List[0]
                                    if len(official_region) != 9:
                                        raiseExceptions('The official_region LA code should be string and the length of it should be 9, the queried LA code list is %s' % official_region_List)

                        demanding['Official_region'] = official_region 
                    
                    if (gen[9] in official_region) or (gen[9] == official_region):
                        if 'Boundary' in demanding.keys():
                            boundary = demanding['Boundary']
                        else:
                            boundary = queryOPFInput.queryAreaBoundaries(Area_LACode)
                            demanding['Boundary'] = boundary

                        lon = boundary.centroid.x
                        lat = boundary.centroid.y
                        
                        distance = DistanceBasedOnGPSLocation([gen[8][0], gen[8][1], lat, lon])
                        distanceList.append(distance)
                        smallAreaCodeList.append(Area_LACode)
                minDistanceIndex = distanceList.index(min(distanceList))
                gen.append(smallAreaCodeList[minDistanceIndex])      

        for gen in self.generatorNodeList:
            if len(gen) != 13:
                raiseExceptions('There are some generators does not have specified attributes, especially the LA code.')
        return 
        
    """This method is called to select the site to be replaced by SMR"""
    def retrofitGeneratorInstanceFinder(self):
        if self.withRetrofit is True: 
            if len(self.retrofitGenerator) == 0 and len(self.retrofitGenerationFuelOrGenType) == 0:  
                print("***As there is not specific generator assigned to be retrofitted by SMR, all generators located in GB will be treated as the potential sites.***")
                self.retrofitListBeforeSelection = queryOPFInput.queryGeneratorToBeRetrofitted_AllPowerPlant(self.topologyNodeIRI, self.queryUKDigitalTwinEndpointLabel)
            elif len(self.retrofitGenerator) != 0:
                for iri in self.retrofitGenerator:
                    parse(iri, rule='IRI')
                print("***The potential sites for hosting SMRs are specified in retrofitGenerator.***")
                self.retrofitListBeforeSelection = queryOPFInput.queryGeneratorToBeRetrofitted_SelectedGenerator(self.retrofitGenerator, self.queryUKDigitalTwinEndpointLabel) 
            elif not len(self.retrofitGenerationFuelOrGenType) == 0:
                for iri in self.retrofitGenerationFuelOrGenType:
                    parse(iri, rule='IRI')
                print("***The potential sites are the generators of the type specified in retrofitGenerationFuelOrGenType.***")
                self.retrofitListBeforeSelection = queryOPFInput.queryGeneratorToBeRetrofitted_SelectedFuelOrGenerationTechnologyType(self.retrofitGenerationFuelOrGenType, self.topologyNodeIRI, self.queryUKDigitalTwinEndpointLabel)

            ## Add decommissioned nuclear sites into the potential sites for hosting SMR 
            if self.pickDecommissionedNuclearSites is True:   
                BusAndDecommissioned = []
                for oldNuclear_key in self.DecommissionedNuclearSitesLocation.keys():
                    latlon = self.DecommissionedNuclearSitesLocation[oldNuclear_key]
                    distances = [65534] * int(self.numOfBus) ## 65534 is the earth's circumference
                    for j, busNode in enumerate(self.busNodeList):
                        GPSLocationPair = [latlon[0], latlon[1], busNode['BusLatLon'][0], busNode['BusLatLon'][1]]    
                        distances[j] = GPS_distance(GPSLocationPair)
                    bus_index = distances.index(min(distances)) 
                    oldNuclearBusPair = {        
                        "PowerGenerator" : None,
                        "Name": oldNuclear_key,
                        "Bus": self.busNodeList[bus_index]["BusNodeIRI"],
                        "Capacity": 0,
                        "LatLon": [latlon[0], latlon[1]],
                        "fuelOrGenType": "Nuclear",
                        "CO2EmissionFactor": 0,
                        "place": None }
                    BusAndDecommissioned.append(oldNuclearBusPair)

            self.retrofitListBeforeSelection += BusAndDecommissioned
            print("===The number of the generator that goes to the site selection method is:===", len(self.retrofitListBeforeSelection))                       
            print("The total number of generator is", len(self.generatorNodeList))

            ## Pre-calculate the the population and the weightedDemandingDistance
            rs_List = []
            for n in range(self.maxmumSMRUnitAtOneSite):
                rs =  (self.NeighbourhoodRadiusForSMRUnitOf1MW/1000) * ((n + 1) * (self.SMRCapability**(0.5)))
                rs_List.append(rs)
            self.population_list = []
            self.weightedDemandingDistance_list = []
            for s in range(len(self.retrofitListBeforeSelection)):
                latlon = self.retrofitListBeforeSelection[s]["LatLon"]
                populationListForOneSite = []
                sumUpOfWeightedDemanding = 0
                for rs in rs_List:
                    population = populationDensityCalculator(latlon, rs, self.geospatialQueryEndpointLabel)
                    populationListForOneSite.append(population)
                self.population_list.append(populationListForOneSite)

                ## pre-calculation of demanding distance
                for demand in self.demandingAreaList:
                    LA_code  = demand["Area_LACode"]
                    ## Avoid 
                    if LA_code in ["K03000001", "K02000001", "W92000004","S92000003", "E12000001", "E12000002", 
                                    "E12000003", "E12000004", "E12000005", "E12000006", "E12000007", "E12000008", 
                                    "E12000009", "E13000001", "E13000002"]:
                        print(LA_code)
                        print(self.demandingAreaList.index(demand))
                        print("This LA code should not be taked into the considerations.")
                        continue
                    distance = DistanceBasedOnGPSLocation(latlon + demand['Geo_InfoList'])
                    weightedDemanding = distance * float(demand['v_TotalELecConsumption'])  
                    sumUpOfWeightedDemanding += weightedDemanding
                self.weightedDemandingDistance_list.append(sumUpOfWeightedDemanding)   
            return
        
    """The SMR site selection algorithm"""   
    def siteSelector(self, numberOfSMRToBeIntroduced):
        self.numberOfSMRToBeIntroduced = numberOfSMRToBeIntroduced
        if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
            contradictedPairs = []
            i = 0 
            while i < len(self.retrofitListBeforeSelection):
                LatLon_i = self.retrofitListBeforeSelection[i]['LatLon']
                j = i + 1
                while j < len(self.retrofitListBeforeSelection): 
                    LatLon_j = self.retrofitListBeforeSelection[j]['LatLon']
                    distanceBetweenij = DistanceBasedOnGPSLocation(LatLon_i + LatLon_j)
                    if distanceBetweenij < self.safeDistance:
                        contradictedPairs.append([i, j])
                    j += 1
                i += 1
 
            ## Initialise the selector
            siteSelector = sp_pymoo.siteSelector(numberOfSMRToBeIntroduced, self.geospatialQueryEndpointLabel, self.retrofitListBeforeSelection, self.discountRate, self.projectLifeSpan, self.SMRCapitalCost,
            self.MonetaryValuePerHumanLife, self.NeighbourhoodRadiusForSMRUnitOf1MW, self.ProbabilityOfReactorFailure, self.SMRCapability, self.bankRate,
            self.maxmumSMRUnitAtOneSite, self.SMRIntergratedDiscount, self.startTime_of_EnergyConsumption, self.population_list, self.weightedDemandingDistance_list, contradictedPairs)
            ## Selecte the Genetic Algorithm NSGA2, Non-dominated Sorting Genetic Algorithm II
            algorithm = NSGA2(
                pop_size = self.pop_size, ## the initial population size 
                n_offsprings = self.n_offsprings, ## the number of the offspring of each generation 
                sampling=IntegerRandomSampling(),
                crossover=SBX(prob=0.5, eta=3.0, vtype=float, repair=RoundingRepair()),
                mutation=PM(prob=1, eta=3.0, vtype=float, repair=RoundingRepair()),
                eliminate_duplicates=True)

            res = minimize(siteSelector,
                        algorithm,
                        ('n_gen', int(self.numberOfGenerations)),
                        seed = 1,
                        verbose=True,
                        save_history=True
                        )        
                        
            # print("Best solution found: %s" % res.X)
            # print("Function value: %s" % res.F)

            self.res = res
            self.X = res.X
            self.F = res.F

            ## release the memory of res from the GA 
            del res
            return

    """This method is used to pick up the optima from the pareto front according to the given weighter"""
    def optimaPicker(self, ifGenerateParetoFrontPDF):
        if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
            self.indexListOfSiteSelectionResults = []
            self.retrofittingCostList = []
            ## Form the weight list
            weightNumpyMatrix = numpy.zeros((len(self.weighterList),2))
            for i in range(len(self.weighterList)):
                if float(self.weighterList[i]) > 1 or float(self.weighterList[i]) < 0:
                    raise ValueError("Invalid weight: %s" % self.weighterList[i])
                if float(self.weighterList[i]) < 0.000001:
                    self.weighterList[i] = float(self.weighterList[i]) + 0.000001
                elif abs(float(self.weighterList[i]) -1) < 0.000001:
                    self.weighterList[i] = float(self.weighterList[i]) - 0.000001

                weightNumpyMatrix[i, 0] = self.weighterList[i]
                weightNumpyMatrix[i, 1] = float(1 - self.weighterList[i])

            ## Normalisation the objective space: apply the ideal and nadir point method 
            approx_ideal = self.F.min(axis = 0)
            approx_nadir = self.F.max(axis = 0)
            nF = (self.F - approx_ideal) / (approx_nadir - approx_ideal)
            ## Decomposition method called Augmented Scalarization Function (ASF),
            decomp = ASF()
            indexOfOptima = []
            for weights in weightNumpyMatrix:
                print(weights)
                i = decomp.do(nF, 1/weights).argmin()
                indexOfOptima.append(i)
                self.indexListOfSiteSelectionResults.append(numpy.where(self.X[i] == 1)[0])
                self.retrofittingCostList.append(round(float(self.F[i, 0]), 2))

            ## Results diagram: Pareto Front, feasible points and optima 
            if ifGenerateParetoFrontPDF is True:
                self.feasibleSolustionsList = []
                self.paretoFrontList = []
                self.selectedSolution = []

                _F = numpy.row_stack([a.pop.get("F") for a in self.res.history])
                feasible = numpy.row_stack([a.pop.get("feasible") for a in self.res.history])[:, 0] 
                ## Real feasible points
                feasibleSolustions_F = _F[feasible]
                ## Normalised feasible points
                approx_ideal_feasibleNormalised = feasibleSolustions_F.min(axis = 0)
                approx_nadir_feasibleNormalised = feasibleSolustions_F.max(axis = 0)
                nF_feasibleNormalised = (self.F - approx_ideal_feasibleNormalised) / (approx_nadir_feasibleNormalised - approx_ideal_feasibleNormalised)
                feasibleSolustions_F_feasibleNormalised = (feasibleSolustions_F - approx_ideal_feasibleNormalised) / (approx_nadir_feasibleNormalised - approx_ideal_feasibleNormalised)

                self.paretoFrontDrawing = [self.F, approx_ideal_feasibleNormalised, approx_nadir_feasibleNormalised]

                plt.scatter(feasibleSolustions_F_feasibleNormalised[:, 0], feasibleSolustions_F_feasibleNormalised[:, 1], label='Feasible Solutions', alpha=0.9, s=20, facecolors='#84B0D3', edgecolors='none') ## #84B0D3  
                plt.scatter(nF_feasibleNormalised[:, 0], nF_feasibleNormalised[:, 1], label= 'Pareto Front', alpha=0.7, s=30, facecolors='#045281', edgecolors='none') # '#FF8C00'                
                self.feasibleSolustionsList.append(feasibleSolustions_F_feasibleNormalised[:, 0])
                self.feasibleSolustionsList.append(feasibleSolustions_F_feasibleNormalised[:, 1])

                self.paretoFrontList.append(nF_feasibleNormalised[:, 0])
                self.paretoFrontList.append(nF_feasibleNormalised[:, 1])

                optima_label_list = ['Weight = ' + str(round(weightNumpyMatrix[i_, 0], 2))  for i_ in range(len(indexOfOptima)) ]
                
                x_data = []
                y_data = []
                for i in indexOfOptima:
                    x_data.append(nF_feasibleNormalised[i, 0])
                    y_data.append(nF_feasibleNormalised[i, 1])
                    plt.scatter(nF_feasibleNormalised[i, 0], nF_feasibleNormalised[i, 1], marker="x", alpha=0, s=40, color = '#00A36C')
                pointAndText = [plt.text(x_, y_, label, fontsize = 12) for x_, y_, label in zip(x_data, y_data, optima_label_list)]
                adjust_text(pointAndText, only_move={'text': 'y'}, arrowprops=dict(arrowstyle='-', color='grey')) 
                self.selectedSolution.append(x_data)
                self.selectedSolution.append(y_data)

                plt.xlabel("Normalised SMR investment and risk cost (-)", fontsize = labelFontSize)
                plt.ylabel("Normalised site-demand distance (-)", fontsize = labelFontSize) 
                plt.legend(
                        loc="upper center", 
                        fontsize = legendFontSize, 
                        ncol=2, 
                        bbox_to_anchor=(0.5, -0.16), 
                        frameon=False)
                plt.tight_layout()
                self.mkdirFilePath(self.diagramPathParetoFront, "")         
                plt.savefig(self.diagramPathParetoFront  + 'ParetoFront_SMR_%s.pdf' % str(self.numberOfSMRToBeIntroduced), dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()
                
            ## delete the GA attributes to release more memory
            del self.res, self.X, self.F
            
            ##-- Create the SMR instances according to the site selection and the optima pick processing --##
            ## self.SMRList is a list of lists containing the SMR instances that are selected from different weighters
            self.SMRList = [] ## the length of the list of the self.SMRList should equal to the number of the weighters at the same weather condition and same carbon tax
            for indexListOfResults_EachWeight in self.indexListOfSiteSelectionResults: ## length equal to the number of the weights
                SMRArrangement = []
                for index in indexListOfResults_EachWeight:
                    s = index // self.maxmumSMRUnitAtOneSite
                    numOfSMRUnit = (index % self.maxmumSMRUnitAtOneSite) + 1
                    ## vibrate the site location from the original site a bit
                    latlon = [float(self.retrofitListBeforeSelection[s]["LatLon"][0]) + 0.004, float(self.retrofitListBeforeSelection[s]["LatLon"][1]) + 0.004]
                    ## the LA code founder flag
                    ifFoundLACode = False
                    ## Look for the small area code and regional area code for each SMR site
                    for demanding in self.demandingAreaList:
                        Area_LACode = str(demanding['Area_LACode'])
                        if Area_LACode in highLevelRegions:
                            continue
                        if 'Boundary' in demanding.keys():
                            boundary = demanding['Boundary']
                        else:
                            boundary = queryOPFInput.queryAreaBoundaries(Area_LACode)
                            demanding['Boundary'] = boundary 
                        genLocation = shapely.geometry.Point(latlon[1], latlon[0])
                        interiorFlag = boundary.intersects(genLocation)
                        if interiorFlag == True:
                            if 'Official_region' in demanding.keys():
                                official_region  = demanding['Official_region']
                            else:
                                if Area_LACode in ["E22000303", "E22000306", "E22000311", "E14001056"]:
                                    official_region = "E12000008"
                                elif Area_LACode in ["E41000222", "E14000981", "E14001022", "E41000225"]:
                                    official_region = "E12000006"
                                elif Area_LACode in ["E41000092", "E14000839", "E41000088", "E14001031", "E41000090", "E41000212", "E14000881", "E14000988"]:
                                    official_region = "E12000009" 
                                else:
                                    official_region_List = queryWithinRegion(Area_LACode, self.ons_endpointLabel) ## return a list of the region LA code
                                    if 'W' in official_region_List[0] or 'S' in official_region_List[0]:
                                        for code in official_region_List:
                                            if '92' in code:
                                                official_region = code
                                                break
                                    else:
                                        if isinstance(official_region_List, str):
                                            official_region = official_region_List
                                        else:
                                            official_region = official_region_List[0]
                                            if len(official_region) != 9:
                                                raiseExceptions('The official_region LA code should be string and the length of it should be 9, the queried LA code list is %s' % official_region_List)
                                demanding['Official_region'] = official_region 
                            ## initialise the SMR generator with the atttributes ## 
                            SMRSite = {'PowerGenerator': None, 
                            'Bus': self.retrofitListBeforeSelection[s]["Bus"], 
                            'Capacity': numOfSMRUnit * self.SMRCapability, 
                            'LatLon': latlon,
                            'fuelOrGenType': 'SMR', 
                            'CO2EmissionFactor': 0.0, 
                            'place': None,
                            'NumberOfSMRUnits': numOfSMRUnit,
                            'RegionLACode': official_region,
                            'SmallAreaLACode': Area_LACode}
                            SMRArrangement.append(SMRSite)
                            ifFoundLACode = True
                            break
                    if not ifFoundLACode:
                        distanceList = []
                        smallAreaCodeList = []
                        regionalAreaCodeList = [] 
                        for demanding in self.demandingAreaList:
                            Area_LACode = str(demanding['Area_LACode']) 
                            if 'Official_region' in demanding.keys():
                                official_region  = demanding['Official_region']
                            else:
                                if Area_LACode in ["E22000303", "E22000306", "E22000311", "E14001056"]:
                                    official_region = "E12000008"
                                elif Area_LACode in ["E41000222", "E14000981", "E14001022", "E41000225"]:
                                    official_region = "E12000006"
                                elif Area_LACode in ["E41000092", "E14000839", "E41000088", "E14001031", "E41000090", "E41000212", "E14000881", "E14000988"]:
                                    official_region = "E12000009" 
                                elif Area_LACode in highLevelRegions:
                                    continue
                                else:
                                    official_region_List = queryWithinRegion(Area_LACode, self.ons_endpointLabel) ## return a list of the region LA code
                                    if 'W' in official_region_List[0] or 'S' in official_region_List[0]:
                                        for code in official_region_List:
                                            if '92' in code:
                                                official_region = code
                                                break
                                    else:
                                        if isinstance(official_region_List, str):
                                            official_region = official_region_List
                                        else:
                                            official_region = official_region_List[0]
                                            if len(official_region) != 9:
                                                raiseExceptions('The official_region LA code should be string and the length of it should be 9, the queried LA code list is %s' % official_region_List)

                                demanding['Official_region'] = official_region 
                            
                            if 'Boundary' in demanding.keys():
                                boundary = demanding['Boundary']
                            else:
                                boundary = queryOPFInput.queryAreaBoundaries(Area_LACode)
                                demanding['Boundary'] = boundary

                            lon = boundary.centroid.x
                            lat = boundary.centroid.y
                                
                            distance = DistanceBasedOnGPSLocation([latlon[0], latlon[1], lat, lon])
                            distanceList.append(distance)
                            smallAreaCodeList.append(Area_LACode)
                            regionalAreaCodeList.append(official_region)
                        minDistanceIndex = distanceList.index(min(distanceList))
                        ## initialise the SMR generator with the atttributes
                        SMRSite = {'PowerGenerator': None, 
                        'Bus': self.retrofitListBeforeSelection[s]["Bus"], 
                        'Capacity': numOfSMRUnit * self.SMRCapability, 
                        'LatLon': latlon,
                        'fuelOrGenType': 'SMR', 
                        'CO2EmissionFactor': 0.0, 
                        'place': None,
                        'NumberOfSMRUnits': numOfSMRUnit,
                        'RegionLACode': regionalAreaCodeList[minDistanceIndex],
                        'SmallAreaLACode': smallAreaCodeList[minDistanceIndex]}
                        SMRArrangement.append(SMRSite)
                        ifFoundLACode = True
                if len(SMRArrangement) != len(indexListOfResults_EachWeight):
                    raiseExceptions('The SmallAreaLACode and RegionLACode are not found for some of the sleceted SMR sites, please check the SMR site list and its lat-lon location.')
                self.SMRList.append(SMRArrangement) ## The length of thre SMR list is equal to the number of the SMR sites, not the number of the SMR to be introduced to the system 
        else:
            self.SMRList = []
            for i in range(len(self.weighterList)):
                self.SMRList.append([])
        return 
        
    """This method is called to initialize the model entities objects: bus and branch (this initialisation will not be affected by SMR introduction or Carbon tax change"""
    def ModelPythonObjectInputInitialiser_BusAndBranch(self): 
        self.BusObjectList = []
        self.BranchObjectList = []
        self.OrderedBusNodeIRIList = []
        ###=== Initialisation of the Bus Model Entities ===###
        ## create an instance of class demandLoadAllocator
        dla = DLA.demandLoadAllocator()
        ## get the load allocation method via getattr function 
        allocator = getattr(dla, self.loadAllocatorName)
        ## pass the arrguments to the cluster method
        EBus_Load_List, self.demandingAreaList, aggregatedBusFlag = allocator(self.busNodeList, self.startTime_of_EnergyConsumption, self.numOfBus, self.demandingAreaList, "BusLatLon") # busNodeList[0]: EquipmentConnection_EBus, busNodeList[1]: v_TotalELecConsumption 
        ## check if the allocator method is applicable
        while EBus_Load_List == None:
            loadAllocatorName = str(input('The current allocator is not applicable. Please choose another allocator: '))
            # get the load allocation method via getattr function 
            allocator = getattr(dla, loadAllocatorName)
            # pass the arrguments to the cluster method
            EBus_Load_List, self.demandingAreaList, aggregatedBusFlag = allocator(self.busNodeList, self.startTime_of_EnergyConsumption, self.numOfBus, self.demandingAreaList, "BusLatLon") # busNodeList[0]: EquipmentConnection_EBus, busNodeList[1]: v_TotalELecConsumption 
        ##The sum up of the load of the aggegated bus is done in the loadAllocatorName
        if aggregatedBusFlag:
            EBus_Load_List = addUpConsumptionForAggregatedBus(EBus_Load_List) # sum up the demand of an AggregatedBus
        
        self.busNodeList = EBus_Load_List
        
        for ebus in self.busNodeList:
            objectName = UK_PG.UKEbusModel.EBusKey + str(self.busNodeList.index(ebus)) ## bus model python object name
            uk_ebus_model = UK_PG.UKEbusModel(int(self.numOfBus), str(ebus["BusNodeIRI"]))
            # create an instance of class initialiseEBusModelVariable
            initialiseEbus = InitialiseEbus.initialiseEBusModelVariable()
            # get the initialiser via getattr function 
            initialiser = getattr(initialiseEbus, self.EBbusInitialisationMethodName)
            # pass the arrguments to the initialiser method
            self.ObjectSet[objectName] = initialiser(uk_ebus_model, ebus, self.busNodeList.index(ebus), self.slackBusNodeIRI) 
            self.BusObjectList.append(objectName)
            self.OrderedBusNodeIRIList.append(ebus["BusNodeIRI"])
            print('the bus type is ',uk_ebus_model.TYPE)

        ###=== Initialisation of the Branch Model Entities ===###
        for eline in self.branchNodeList:
            objectName = UK_PG.UKElineModel.ELineKey + str(self.branchNodeList.index(eline)) ## eline model python object name
            uk_eline_model = UK_PG.UKElineModel(int(self.numOfBus), str(eline["ELineNode"]), self.ELineInitialisationMethodName)
            ###1. create an instance of the BranchPropertyInitialisation class and get the initialiser method by applying the 'getattr' function 
            initialisation = BPI.BranchPropertyInitialisation()
            initialiser = getattr(initialisation, self.ELineInitialisationMethodName)
            ###2. execute the initialiser with the branch model instance as the function argument 
            self.ObjectSet[objectName] = initialiser(eline['ELineNode'], uk_eline_model, eline, self.branchVoltageLevel, self.OrderedBusNodeIRIList, self.queryUKDigitalTwinEndpointLabel) 
            self.BranchObjectList.append(objectName)
        return

    """This method is called to initialize the model entities objects: Generator"""
    def ModelPythonObjectInputInitialiser_Generator(self, CarbonTaxForOPF, windOutputRatio, solarOutputRatio, weatherConditionName, decommissionFlag):             
        self.CarbonTaxForOPF = CarbonTaxForOPF
        self.weatherConditionName = weatherConditionName
        self.GeneratorObjectList = []
        self.SMRSiteObjectList = []

        for i, SMRList_EachWeight in enumerate(self.SMRList):
            GeneratorObjectList_EachWeight = []
            SMRSiteObjectList_EachWeight = []
            weighter = str(self.weighterList[i])
            if decommissionFlag:
                self.genTag = "SMRDesign-" + str(self.numberOfSMRToBeIntroduced) + "-weighter" + weighter + "-CarbonTaxForOPF" + str(CarbonTaxForOPF) + "-weatherCondition" + str(weatherConditionName) + "-afterDecommissioned-" ## FIXME: this is the label used in the loop of the old demanding method
            else:
                self.genTag = "SMRDesign-" + str(self.numberOfSMRToBeIntroduced) + "-weighter" + weighter + "-CarbonTaxForOPF" + str(CarbonTaxForOPF) + "-weatherCondition" + str(weatherConditionName) + "-beforeDecommissioned-" ## FIXME: this is the label used in the loop of the old demanding method
            
            for egen in self.generatorNodeList:
                factorArray = []
                ##Update the cost parameters from local file modelFactorArrays
                if str(egen[10]) in ukmf.OCGT:
                    factorArray = modelFactorArrays[6]
                elif str(egen[10]) in ukmf.CCGT:
                    factorArray = modelFactorArrays[5]
                elif str(egen[10]) in ukmf.WindOnshore:
                    factorArray = modelFactorArrays[11]
                elif str(egen[10]) in ukmf.WindOffshore:
                    factorArray = modelFactorArrays[12]
                elif str(egen[7]) in ukmf.Waste:
                    factorArray = modelFactorArrays[13]
                elif str(egen[7]) in ukmf.Bio:
                    factorArray = modelFactorArrays[3]
                else:
                    for mf in modelFactorArrays:
                        if str(egen[7]) in mf[0]:
                            factorArray = mf
                            break

                if len(factorArray) == 0:
                    factorArray = modelFactorArrays[14]
             
                # egen[1]: fixed O&M; egen[2]: var O&M; egen[3]: Fuel cost; egen[4]: emission factor; egen[6]: capacity
                egen[1] = float(factorArray[1]) 
                egen[2] = float(factorArray[2]) 
                egen[3] = float(factorArray[3])
                egen[4] = float(factorArray[4]) 

                objectName = UK_PG.UKEGenModel.EGenKey + self.genTag + str(self.generatorNodeList.index(egen)) ## egen model python object name
                if len(egen) == 13: ##0?PowerGeneratorIRI 1?FixedMO 2?VarMO 3?FuelCost 4?CO2EmissionFactor 5?Bus 6?Capacity 7?PrimaryFuel 8?Latlon 9?PowerPlant_LACode 10:Extant[if withRetrofit is set as 'True'] 11: samllerLAcode 12: reginalLAcode   
                    uk_egen_OPF_model = UK_PG.UKEGenModel_CostFunc(int(self.numOfBus), str(egen[0]), float(factorArray[4]), str(egen[7]), egen[10], egen[8], float(egen[6]), None, str(egen[11]), CarbonTaxForOPF, self.piecewiseOrPolynomial, self.pointsOfPiecewiseOrcostFuncOrder, str(egen[12]), str(egen[9]))
                else:
                    uk_egen_OPF_model = UK_PG.UKEGenModel_CostFunc(int(self.numOfBus), str(egen[0]), float(factorArray[4]), str(egen[7]),  egen[10], egen[8], float(egen[6]), None, str(egen[11]), CarbonTaxForOPF, self.piecewiseOrPolynomial, self.pointsOfPiecewiseOrcostFuncOrder)
                
                uk_egen_OPF_model = costFuncPara(uk_egen_OPF_model, egen)
                ###add EGen model parametor###
                self.ObjectSet[objectName] = initialiseEGenModelVar(uk_egen_OPF_model, egen, self.OrderedBusNodeIRIList, self.capa_demand_ratio, windOutputRatio, solarOutputRatio)
                GeneratorObjectList_EachWeight.append(objectName)
            self.GeneratorObjectList.append(GeneratorObjectList_EachWeight)

            ### Initialisation of the SMR Generator Model Entities ###
            ## extract the emission factor
            if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
                for mf in range(len(modelFactorArrays)):
                    if str(self.newGeneratorType) in modelFactorArrays[mf]:
                        factorArray = modelFactorArrays[mf]
                        break
                if not 'factorArray' in locals():
                    raiseExceptions("The given generator type which used to retrofit the existing genenrators cannot be found in the factor list, please check the generator type.")

                for egen_re in SMRList_EachWeight:
                    objectName = UK_PG.UKEGenModel.EGenRetrofitKey + self.genTag + str(SMRList_EachWeight.index(egen_re)) 
                    newGeneratorNodeIRI = dt.baseURL + SLASH + t_box.ontoeipName + SLASH + ukpp.RealizationAspectKey + str(uuid.uuid4()) 
                    uk_egen_re_OPF_model = UK_PG.UKEGenModel_CostFunc(int(self.numOfBus), newGeneratorNodeIRI, 0, str(self.newGeneratorType), egen_re["fuelOrGenType"], egen_re["LatLon"], egen_re["Capacity"], str(egen_re["PowerGenerator"]), 'Added', CarbonTaxForOPF, self.piecewiseOrPolynomial, self.pointsOfPiecewiseOrcostFuncOrder, str(egen_re["SmallAreaLACode"]), str(egen_re["RegionLACode"]))
                    egen_re = [newGeneratorNodeIRI, self.fix_om, float(factorArray[2]), float(factorArray[3]), float(factorArray[4]), egen_re["Bus"], egen_re["Capacity"], self.newGeneratorType] ## ?PowerGenerator ?FixedMO ?VarMO ?FuelCost ?CO2EmissionFactor ?Bus ?Capacity ?fuel type
                    uk_egen_re_OPF_model = costFuncPara(uk_egen_re_OPF_model, egen_re)
                    ###add EGen model parametor###
                    self.ObjectSet[objectName] = initialiseEGenModelVar(uk_egen_re_OPF_model, egen_re, self.OrderedBusNodeIRIList, self.capa_demand_ratio, windOutputRatio, solarOutputRatio)
                    SMRSiteObjectList_EachWeight.append(objectName)
            self.SMRSiteObjectList.append(SMRSiteObjectList_EachWeight) ## if the number of the SMR is 0, the SMRSiteObjectList_EachWeight is [] and appended to the SMRSiteObjectList    
        return    

    """generate a list of the ppc at different weighters and the same weather condition and same carbon tax"""  
    def OPFModelInputFormatter(self):
        """
        The OPFModelInputFormatter is used to created the pypower OPF model input from the model objects which are created from the F{ModelObjectInputInitialiser}.
        This function will be called after F{ModelObjectInputInitialiser}.
        
        Raises
        ------
        Exception
            If the attribute ObjectSet does not exist.

        Returns
        -------
        None.
            
        """

        if not hasattr(self, 'ObjectSet'):  
            raise Exception("The model object has not been properly created, please run the function ModelObjectInputInitialiser at first.")

        ##-- Format the PF analysis input, ppc --##
        ppc: dict = {"version": '2'}
        
        ## system MVA base
        ppc["baseMVA"] = float(self.baseMVA)
        
        ## bus data
        # bus_i type Pd Qd Gs Bs area Vm Va baseKV zone Vmax Vmin  
        ppc["bus"] = numpy.zeros((self.numOfBus, len(UK_PG.UKEbusModel.INPUT_VARIABLE_KEYS)), dtype = float)
        index_bus  = 0
        while index_bus < self.numOfBus:
            objectiveName = self.BusObjectList[index_bus]
            for key in UK_PG.UKEbusModel.INPUT_VARIABLE_KEYS:
                index = int(UK_PG.UKEbusModel.INPUT_VARIABLE[key])
                ppc["bus"][index_bus][index] = getattr(self.ObjectSet.get(objectiveName), key)
            index_bus += 1
            
        ## branch data
        # fbus, tbus, r, x, b, rateA, rateB, rateC, ratio, angle, status, angmin, angmax     
        ppc["branch"] = numpy.zeros((len(self.BranchObjectList), len(UK_PG.UKElineModel.INPUT_VARIABLE_KEYS)), dtype = float)
        index_br  = 0
        while index_br < len(self.BranchObjectList):
            objectiveName = self.BranchObjectList[index_br]
            for key in UK_PG.UKElineModel.INPUT_VARIABLE_KEYS:
                index = int(UK_PG.UKElineModel.INPUT_VARIABLE[key])
                ppc["branch"][index_br][index] = getattr(self.ObjectSet.get(objectiveName), key)
            index_br += 1

        self.ppc_List = []

        for i_, SMRSiteObjectList_EachWeight in enumerate(self.SMRSiteObjectList):
            GeneratorObjectList_EachWeight = self.GeneratorObjectList[i_]
            ## generator data
            # bus, Pg, Qg, Qmax, Qmin, Vg, mBase, status, Pmax, Pmin, Pc1, Pc2,
            # Qc1min, Qc1max, Qc2min, Qc2max, ramp_agc, ramp_10, ramp_30, ramp_q, apf
            numOfExistAndRetrofittedGenerators = len(GeneratorObjectList_EachWeight) + len(SMRSiteObjectList_EachWeight) 
            ppc["gen"] = numpy.zeros((numOfExistAndRetrofittedGenerators, len(UK_PG.UKEGenModel.INPUT_VARIABLE_KEYS)), dtype = float)
            index_gen  = 0 
            while index_gen < len(GeneratorObjectList_EachWeight):
                genObjectiveName = GeneratorObjectList_EachWeight[index_gen]
                for key in UK_PG.UKEGenModel.INPUT_VARIABLE_KEYS:
                    index = int(UK_PG.UKEGenModel.INPUT_VARIABLE[key])
                    ## ppc["gen"][index_gen][index] = getattr(self.ObjectSet.get(UK_PG.UKEGenModel.EGenKey + self.extantGenTag + str(index_gen)), key)
                    ppc["gen"][index_gen][index] = getattr(self.ObjectSet.get(genObjectiveName), key)
                index_gen += 1

            if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
                index_regen = 0
                while index_gen < numOfExistAndRetrofittedGenerators:
                    SMRObjectiveName = SMRSiteObjectList_EachWeight[index_regen]
                    for key in UK_PG.UKEGenModel.INPUT_VARIABLE_KEYS:
                        index = int(UK_PG.UKEGenModel.INPUT_VARIABLE[key])                 
                        ppc["gen"][index_gen][index] = getattr(self.ObjectSet.get(SMRObjectiveName), key)
                    index_gen += 1
                    index_regen += 1

            ## generator COST data
            # MODEL, STARTUP, SHUTDOWN, NCOST, COST[a, b]
            columnNum = len(UK_PG.UKEGenModel_CostFunc.INPUT_VARIABLE_KEYS) + self.pointsOfPiecewiseOrcostFuncOrder -1
            ppc["gencost"] = numpy.zeros((numOfExistAndRetrofittedGenerators, columnNum), dtype = float)
            index_gen  = 0
            while index_gen < len(GeneratorObjectList_EachWeight):
                genObjectiveName = GeneratorObjectList_EachWeight[index_gen]
                for key in UK_PG.UKEGenModel_CostFunc.INPUT_VARIABLE_KEYS:
                    index = int(UK_PG.UKEGenModel_CostFunc.INPUT_VARIABLE[key])
                    if key == "COST":
                        ## for para in getattr(self.ObjectSet.get(UK_PG.UKEGenModel.EGenKey + self.extantGenTag + str(index_gen)), key):
                        for para in getattr(self.ObjectSet.get(genObjectiveName), key):
                            ppc["gencost"][index_gen][index] = para
                            index += 1
                    else:
                        ## ppc["gencost"][index_gen][index] = getattr(self.ObjectSet.get(UK_PG.UKEGenModel.EGenKey + self.SMRTag + str(index_gen)), key)
                        ppc["gencost"][index_gen][index] = getattr(self.ObjectSet.get(genObjectiveName), key)
                index_gen += 1

            if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
                index_regen = 0
                while index_gen < numOfExistAndRetrofittedGenerators:
                    SMRObjectiveName = SMRSiteObjectList_EachWeight[index_regen]
                    for key in UK_PG.UKEGenModel_CostFunc.INPUT_VARIABLE_KEYS:
                        index = int(UK_PG.UKEGenModel_CostFunc.INPUT_VARIABLE[key])
                        if key == "COST":
                            for para in getattr(self.ObjectSet.get(SMRObjectiveName), key):
                                ppc["gencost"][index_gen][index] = para
                                index += 1
                        else:
                            ppc["gencost"][index_gen][index] = getattr(self.ObjectSet.get(SMRObjectiveName), key)
                    index_gen += 1
                    index_regen += 1
            ppc_copy = ppc.copy()
            self.ppc_List.append(ppc_copy)
        return 
  
    """Generate the list of the results, total cost and OPEX for each weighter at the same weather and same carbon tax"""
    def OptimalPowerFlowAnalysisSimulation(self, ppc: list = None):
        """
        Perform the optimal power flow analysis.

        Parameters
        ----------
        ppc : List
            ppc is the list of the input for optimal power flow model. The default is None.

        Returns
        -------
        None.

        """
         
        if not hasattr(self, 'ppc') and not hasattr(self, 'ppc_List'): 
            if ppc is None or not isinstance(ppc, list):
                raise Exception("The model input has not been reformatted, please run the function ModelInputFormatter at first.")
            else:
                self.ppc_List = ppc

        ## Clean the list of the results for each carbontax-weather condition 
        self.annualisedOPEXList = []
        self.SMRInvestmentCost = []
        self.totalCostList = []
        self.resultsList = []
        self.OPEXRatioList = []
        self.divergenceList = []
        
        # set up numerical method: Newton's Method
        '''VERBOSE, amount of progress info printed:
        0 - print no progress info,
        1 - print a little progress info,
        2 - print a lot of progress info,
        3 - print all progress info'''
        ppopt = ppoption(OUT_ALL = 0, VERBOSE = 0, SCPDIPM_RED_IT = 10, PDIPM_GRADTOL= 5e-5, OPF_ALG = 0)
        ## SCPDIPM_RED_IT: step size, PDIPM_GRADTOL: gradient condition
        
        for i, ppc in enumerate(self.ppc_List): ## the length of the ppc_List should equal to the number of the weights
            ##-- starts opf analysis --##
            results = runopf(ppc, ppopt)
            self.resultsList.append(results)

            ## there are several different ways to do OPF analysis
            # results = runuopf(ppc, ppopt)

            annualOperationCost_OPF = round(results["f"], 2) * 8760
            totalOperationCost_OPF = 0
            for l in range(self.projectLifeSpan):
                ## l starts frm 0, therefore it is no need to use -(l-1) bus just use -l
                totalOperationCost_OPF += annualOperationCost_OPF * (1 + float(self.bankRate)) **(-l)
            
            annualisedOPEX = round((totalOperationCost_OPF * self.discountRate / (1 - ((1 + self.discountRate)**(-1 * self.projectLifeSpan)))), 2)
            if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
                OPEXRatio = round(annualisedOPEX/(annualisedOPEX + self.retrofittingCostList[i]), 2)
                totalCost = round((annualisedOPEX + self.retrofittingCostList[i]), 2)/1E6 ## m£/yr
                self.SMRInvestmentCost.append(self.retrofittingCostList[i]/1E6)  ## m£/yr
            else:
                OPEXRatio = round(annualisedOPEX/(annualisedOPEX), 2)
                totalCost = round((annualisedOPEX), 2)/1E6 ## m£/yr

            self.annualisedOPEXList.append(round((annualisedOPEX), 2)/1E6)  ## m£/yr
            self.totalCostList.append(totalCost) ## m£/yr
            self.OPEXRatioList.append(OPEXRatio) 
            # percentageOfOPEX = round(self.annualisedOPEX/self.totalCost, 2)
            # percentageOfCAPEX = round((1- percentageOfOPEX),2)

            print("***Total cost (M£/yr): ", totalCost)
            print("***Annualised OPEX cost (M£/yr): ", annualisedOPEX/1E6) ## calculated from OPF, OPEX 
            if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
                print("***RetrofittingCost (CAPEX) cost (M£/yr): ", self.retrofittingCostList[i]/1E6) ## calculated from site selection, CAPEX
            # print("***Percentage of OPEX: ", percentageOfOPEX, "and the percentage of CAPEX is: ", percentageOfCAPEX)

            ConvergeFlag = results["success"]
            if ConvergeFlag is True:
                print('-----The OPF model is converged.-----')
            else:
                print('!!!!!!The OPF model is diverged!!!!!')
                self.divergenceList.append([str(self.numberOfSMRToBeIntroduced), str(self.CarbonTaxForOPF), str(self.weatherConditionName), str(self.weighterList[i])])

            print("***The SMR number is: %s ***"%str(self.numberOfSMRToBeIntroduced))
            print("***The carbon tax is: %s ***"%str(self.CarbonTaxForOPF))
            print("***The weather condition is: %s ***"%str(self.weatherConditionName))
            print("***The weight is: %s ***"%str(self.weighterList[i]))

            if not (self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0):
                for i in range(len(self.ppc_List) - 1):
                    self.resultsList.append(results)
                    self.annualisedOPEXList.append(annualisedOPEX/1E6)
                    self.totalCostList.append(totalCost)
                    self.OPEXRatioList.append(OPEXRatio)
                break
        return

    def ModelOutputFormatter(self, generateVisualisationJSON:bool):
        """
        Reformat the result and add attributes into the objects.

        Returns
        -------
        None.

        """
        self.SMRTotalOutputList = []
        self.SMRTotalOperationalRatioList = []

        ## Record the raw output for all weight at the same weather condition
        self.busOutputRecoder = []  ## busIRI, busLatLon, Va
        self.branchOutputRecoder = [] ## BranchIRI, FromBusIRI, TOBusIRI (consist with the current direction), transmission loss (P = V2/R, MW)
        self.genOutputRecoder = [] ## GenIRI, connected busIRI, output, LatLon, smallLACode, regionalLACode
        ## SMR cost recoder
        self.SMRCostList = []
        for index_ in range(len(self.resultsList)): ## the length of the results equals to the length of the weights
            results = self.resultsList[index_]
            GeneratorObjectList_EachWeight = self.GeneratorObjectList[index_]
            SMRSiteObjectList_EachWeight = self.SMRSiteObjectList[index_]
            weightForObjective1 = round(self.weighterList[index_], 2)

            ## the bus, gen, branch and loss result
            bus = results["bus"]
            branch = results["branch"]
            gen = results["gen"]
            
            ##--Bus--##  
            ##  VM_OUTPUT, VM_OUTPUT, P_GEN, G_GEN, PD_OUTPUT, GD_OUTPUT        
            ## post processsing of the bus results   
            busPostResult = numpy.zeros((self.numOfBus, len(UK_PG.UKEbusModel.OUTPUT_VARIABLE_KEYS)), dtype = float) 
            
            for i in range(self.numOfBus):
                busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["VM_OUTPUT"]] = bus[i][VM]
                busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["VA_OUTPUT"]] = bus[i][VA]
                
                g  = find((gen[:, GEN_STATUS] > 0) & (gen[:, GEN_BUS] == bus[i, BUS_I]) & ~isload(gen))
                ld = find((gen[:, GEN_STATUS] > 0) & (gen[:, GEN_BUS] == bus[i, BUS_I]) & isload(gen))
                
                if any(g + 1):
                    busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["P_GEN"]] = sum(gen[g, PG])
                    busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["G_GEN"]] = sum(gen[g, QG])
                        
                if logical_or(bus[i, PD], bus[i, QD]) | any(ld + 1):
                    if any(ld + 1):
                        busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["PD_OUTPUT"]] = bus[i, PD] - sum(gen[ld, PG])
                        busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["GD_OUTPUT"]] = bus[i, QD] - sum(gen[ld, QG])    
                    else:
                        busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["PD_OUTPUT"]] = bus[i][PD]
                        busPostResult[i][UK_PG.UKEbusModel.OUTPUT_VARIABLE["GD_OUTPUT"]] = bus[i][QD]
                
            ## update the object attributes with the model results
            index_bus  = 0
            while index_bus < self.numOfBus:
                objectiveName = self.BusObjectList[index_bus]
                for key in UK_PG.UKEbusModel.OUTPUT_VARIABLE_KEYS:
                    index = int(UK_PG.UKEbusModel.OUTPUT_VARIABLE[key])
                    setattr(self.ObjectSet.get(objectiveName), key, busPostResult[index_bus][index])        
                index_bus += 1   

            ## Bus results recorder 
            busRawResult_eachWeight = []
            for bus_index, busName in enumerate(self.BusObjectList):
                Va = self.ObjectSet[busName].VA_OUTPUT
                Pg = self.ObjectSet[busName].P_GEN
                Pd_output = self.ObjectSet[busName].PD_OUTPUT
                busIRI = self.ObjectSet[busName].BusNodeIRI
                busNumber = self.ObjectSet[busName].BUS
                busLatLon = self.busNodeList[bus_index]['BusLatLon']
                busRawResult_eachWeight.append({'busIRI':busIRI, 'busNumber': busNumber, 'busLatLon': busLatLon,'Va':Va, 'Pg':Pg, 'Pd_output': Pd_output})
            self.busOutputRecoder.append(busRawResult_eachWeight)
   
            ##--Branch--##    
            ## FROMBUSINJECTION_P, FROMBUSINJECTION_Q, TOBUSINJECTION_P, TOBUSINJECTION_Q, LOSS_P, LOSS_Q
            ## post processsing of the branch results   
            branchPostResult = numpy.zeros((len(self.BranchObjectList), len(UK_PG.UKElineModel.OUTPUT_VARIABLE_KEYS)), dtype = float) 
            
            for i in range(len(self.BranchObjectList)):
                branchPostResult[i][UK_PG.UKElineModel.OUTPUT_VARIABLE["FROMBUSINJECTION_P"]] = branch[i][PF]
                branchPostResult[i][UK_PG.UKElineModel.OUTPUT_VARIABLE["FROMBUSINJECTION_Q"]] = branch[i][QF]
                branchPostResult[i][UK_PG.UKElineModel.OUTPUT_VARIABLE["TOBUSINJECTION_P"]] = branch[i][PT]
                branchPostResult[i][UK_PG.UKElineModel.OUTPUT_VARIABLE["TOBUSINJECTION_Q"]] = branch[i][QT]
                branchPostResult[i][UK_PG.UKElineModel.OUTPUT_VARIABLE["LOSS_P"]] = abs(abs(branch[i][PF]) - abs(branch[i][PT]))  
                branchPostResult[i][UK_PG.UKElineModel.OUTPUT_VARIABLE["LOSS_Q"]] = abs(abs(branch[i][QF]) - abs(branch[i][QT]))  
                
            ## update the object attributes with the model results
            index_br  = 0
            while index_br < len(self.BranchObjectList):
                objectiveName = self.BranchObjectList[index_br]
                for key in UK_PG.UKElineModel.OUTPUT_VARIABLE_KEYS:
                    index = int(UK_PG.UKElineModel.OUTPUT_VARIABLE[key])
                    setattr(self.ObjectSet.get(objectiveName), key, branchPostResult[index_br][index])        
                index_br += 1 

            ## Branch results recorder 
            branchRawResult_eachWeight = []
            for brName in self.BranchObjectList:
                _Fr = self.ObjectSet[brName].FROMBUS
                _To = self.ObjectSet[brName].TOBUS
                Loss = round(self.ObjectSet[brName].LOSS_P, 2)
                BranchNodeIRI = self.ObjectSet[brName].BranchNodeIRI

                for bus_index, busRawResult in enumerate(busRawResult_eachWeight):
                    if busRawResult['busNumber'] == _Fr:
                        _F_Va = busRawResult['Va']
                    elif busRawResult['busNumber'] == _To:
                        _T_Va = busRawResult['Va']
                if _F_Va >= _T_Va:
                    Fr = _Fr
                    To = _To
                else:
                    Fr = _To
                    To = _Fr

                FromBusLocation = self.busNodeList[Fr]['BusLatLon']
                ToBusLocation = self.busNodeList[To]['BusLatLon']

                branchRawResult_eachWeight.append({'BranchNodeIRI': BranchNodeIRI,'FromBusLocation':FromBusLocation, 'ToBusLocation': ToBusLocation, 'loss': Loss})
            self.branchOutputRecoder.append(branchRawResult_eachWeight)  
            
            ##--Generator--##    
            ## PG_OUTPUT, QG_OUTPUT
            ## post processsing of the generator results 
            numOfExistAndRetrofittedGenerators = len(GeneratorObjectList_EachWeight) + len(SMRSiteObjectList_EachWeight)  
            generatorPostResult = numpy.zeros((numOfExistAndRetrofittedGenerators, len(UK_PG.UKEGenModel.OUTPUT_VARIABLE_KEYS)), dtype = float) 
            for i in range(numOfExistAndRetrofittedGenerators):
                if (gen[i, GEN_STATUS] > 0) & logical_or(gen[i, PG], gen[i, QG]):
                    generatorPostResult[i][UK_PG.UKEGenModel.OUTPUT_VARIABLE["PG_OUTPUT"]] = gen[i][PG]
                    generatorPostResult[i][UK_PG.UKEGenModel.OUTPUT_VARIABLE["QG_OUTPUT"]] = gen[i][QG]
            ## update the object attributes with the model results
            index_gen  = 0
            while index_gen < len(GeneratorObjectList_EachWeight):
                objectiveName = GeneratorObjectList_EachWeight[index_gen]
                for key in UK_PG.UKEGenModel.OUTPUT_VARIABLE_KEYS:
                    index = int(UK_PG.UKEGenModel.OUTPUT_VARIABLE[key])
                    setattr(self.ObjectSet.get(objectiveName), key, generatorPostResult[index_gen][index])        
                index_gen += 1

            ## Generator results recorder 
            genRawResult_eachWeight = []
            for gen_index, genName in enumerate(GeneratorObjectList_EachWeight):
                genIRI = self.ObjectSet[genName].generatorNodeIRI
                connectedBus = self.ObjectSet[genName].BUS
                Pg_output = self.ObjectSet[genName].PG_OUTPUT
                genLatLon = self.ObjectSet[genName].latlon
                smallLACode = self.ObjectSet[genName].smallAreaCode
                regionLACode = self.ObjectSet[genName].RegionLACode
                fuelType = self.ObjectSet[genName].fueltype
                genRawResult_eachWeight.append({'genIRI':genIRI, 'connectedBus': connectedBus, 'Pg_output': Pg_output, 'genLatLon': genLatLon, 'smallLACode': smallLACode, 'regionLACode': regionLACode, 'fuelType': fuelType})

            if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0:
                index_regen = 0
                while index_gen < numOfExistAndRetrofittedGenerators:
                    objectiveName = SMRSiteObjectList_EachWeight[index_regen]
                    for key in UK_PG.UKEGenModel.OUTPUT_VARIABLE_KEYS:
                        index = int(UK_PG.UKEGenModel.OUTPUT_VARIABLE[key])                  
                        setattr(self.ObjectSet.get(objectiveName), key, generatorPostResult[index_gen][index])        
                    index_regen += 1 
                    index_gen += 1

                totalSMROutput = 0
                for SMRName in SMRSiteObjectList_EachWeight:
                    totalSMROutput += round(float(self.ObjectSet[SMRName].PG_OUTPUT),2)
                self.SMRTotalOutputList.append(totalSMROutput)
                ratio = round((totalSMROutput / (self.numberOfSMRToBeIntroduced * self.SMRCapability)), 2)
                self.SMRTotalOperationalRatioList.append(ratio)
            else:
                self.SMRTotalOperationalRatioList.append(0)

            ## SMR results recorder 
            SMRCost = 0
            for SMRName in SMRSiteObjectList_EachWeight:
                genIRI = self.ObjectSet[SMRName].generatorNodeIRI
                connectedBus = self.ObjectSet[SMRName].BUS
                Pg_output = self.ObjectSet[SMRName].PG_OUTPUT
                genLatLon = self.ObjectSet[SMRName].latlon
                smallLACode = self.ObjectSet[SMRName].smallAreaCode
                regionLACode = self.ObjectSet[SMRName].RegionLACode
                fuelType = 'SMR'
                genRawResult_eachWeight.append({'genIRI':genIRI, 'connectedBus': connectedBus, 'Pg_output': Pg_output, 'genLatLon': genLatLon, 'smallLACode': smallLACode, 'regionLACode': regionLACode, 'fuelType': fuelType})

                ## calculate the total cost of SMR
                numberOfSMRUnit = int(float(self.ObjectSet[SMRName].capacity) / self.SMRCapability)
                SMRCost += self.SMRIntegratedCostForDifferentInterationNumberList[numberOfSMRUnit-1]
    
            self.genOutputRecoder.append(genRawResult_eachWeight)
            self.SMRCostList.append(SMRCost)

            #TODO: modify the ModelPythonObjectOntologiser method 
            ## self.ModelPythonObjectOntologiser() 
            
            if generateVisualisationJSON:
                ExtantGeneratorLabel = str(self.numOfBus) + 'BusModel_' + str(self.numberOfSMRToBeIntroduced) + '_SMRs_Introduced_CarbonTax' + str(self.CarbonTaxForOPF) + "_WeatherCondition_" + str(self.weatherConditionName) + "_weighter_" + str(weightForObjective1) + '_ExtantGenerator'
                SMRIntroducedLabel = str(self.numOfBus) + 'BusModel_' + str(self.numberOfSMRToBeIntroduced) + '_SMRs_Introduced_CarbonTax' + str(self.CarbonTaxForOPF) + "_WeatherCondition_" + str(self.weatherConditionName) + "_weighter_" + str(weightForObjective1) + '_SMR'
                ClosedGeneratorLabel = str(self.numOfBus) + 'BusModel_' + str(self.numberOfSMRToBeIntroduced) + '_SMRs_Introduced_CarbonTax' + str(self.CarbonTaxForOPF) + "_WeatherCondition_" + str(self.weatherConditionName) + "_weighter_" + str(weightForObjective1) + '_ClosedGenerator'
                CoalFiredGeneratorLabel = str(self.numOfBus) + 'BusModel_' + str(self.numberOfSMRToBeIntroduced) + '_SMRs_Introduced_CarbonTax' + str(self.CarbonTaxForOPF) + "_WeatherCondition_" + str(self.weatherConditionName) + "_weighter_" + str(weightForObjective1) + '_CoalFiredGenerator'
                NaturalGasGeneratorLabel = str(self.numOfBus) + 'BusModel_' + str(self.numberOfSMRToBeIntroduced) + '_SMRs_Introduced_CarbonTax' + str(self.CarbonTaxForOPF) + "_WeatherCondition_" + str(self.weatherConditionName) + "_weighter_" + str(weightForObjective1) + '_NaturalGasGenerator'

                self.filePathForJSON = self.localRootFilePath + '/GeneratorJSONFiles_%s/'%(str(self.numOfBus) + 'bus' + str(self.SMR_LCOE) + 'LCOE') +  str(self.numberOfSMRToBeIntroduced) + '_SMRs_' + str(self.CarbonTaxForOPF) +'_CarbonTax' 

                self.visualisationFileCreator_ExtantGenerator(GeneratorObjectList_EachWeight, ExtantGeneratorLabel) 
                self.visualisationFileCreator_AddedSMRGenerator(SMRSiteObjectList_EachWeight, SMRIntroducedLabel)
                self.visualisationFileCreator_ClosedGenerator(GeneratorObjectList_EachWeight, ClosedGeneratorLabel)  
                # self.visualisationFileCreator_CoalFiredOpenPlant(GeneratorObjectList_EachWeight, CoalFiredGeneratorLabel)  
                # self.visualisationFileCreator_NaturalGasOpenPlant(GeneratorObjectList_EachWeight, NaturalGasGeneratorLabel) 

                ## TODO: create visualisationFileCreator_CoalFiredOpenPlant and visualisationFileCreator_NaturalGasOpenPlant

        return 

    """This method is to calculate the net demanding of the specified LACode area"""
    def netDemandingCalculator(self, ifReadLocalResults, genRawResults):
        if ifReadLocalResults:
            netDemanding_smallArea_eachSMRDesign = []
            netDemanding_regionalArea_eachSMRDesign = []
            for gen_eachSMRDesign in genRawResults:
                netDemanding_smallArea_eachCarbonTax = []
                netDemanding_regionalArea_eachCarbonTax = []
                for gen_eachCarbonTax in gen_eachSMRDesign:
                    netDemanding_smallArea_eachWeather = []
                    netDemanding_regionalArea_eachWeather = []
                    for gen_eachWeather in gen_eachCarbonTax:
                        netDemanding_smallArea_eachWeight = []
                        netDemanding_regionalArea_eachWeight = []                    
                        for gen_eachWeight in gen_eachWeather:
                            netDemanding_smallArea = []
                            netDemanding_regionalArea = []
                            for demanding in self.demandingAreaList:
                                Area_LACode = demanding['Area_LACode']
                                if Area_LACode in highLevelRegions:
                                    continue
                                netDemandingOfThisArea = float(demanding['v_TotalELecConsumption'])
                                if 'Boundary' in demanding.keys():
                                    boundary = demanding['Boundary']
                                else:
                                    boundary = queryOPFInput.queryAreaBoundaries(Area_LACode)
                                    demanding['Boundary'] = boundary
                                for gen in gen_eachWeight:
                                    smallAreaCode = gen['smallLACode']
                                    if smallAreaCode == Area_LACode or smallAreaCode in Area_LACode:
                                        genOutput = float(gen['Pg_output']) * (24 * 365) / 1000
                                        netDemandingOfThisArea -= genOutput
                                netDemanding_smallArea.append({'smallAreaCode': Area_LACode, 'netDemanding':netDemandingOfThisArea, 'smallAreaBoundary':boundary})
                            netDemanding_smallArea_eachWeight.append(netDemanding_smallArea)

                            for regionalDemanding in self.regionalDemandingList:
                                Region_LACode = regionalDemanding['RegionOrCountry_LACode']
                                netRegionalDemanding = float(regionalDemanding['v_TotalELecConsumption']) 
                                if 'Boundary' in regionalDemanding.keys():
                                    boundary = regionalDemanding['Boundary']
                                else:
                                    boundary = queryOPFInput.queryAreaBoundaries(Region_LACode) 
                                    regionalDemanding['Boundary'] = boundary
                                for gen in gen_eachWeight:
                                    regionalAreaCode = str(gen['regionLACode'])
                                    if regionalAreaCode == Region_LACode or regionalAreaCode in Region_LACode:
                                        genOutput = float(gen['Pg_output']) * (24 * 365) / 1000 
                                        netRegionalDemanding -= genOutput
                                netDemanding_regionalArea.append({'regionalAreaCode': Region_LACode, 'netDemanding':netRegionalDemanding, 'regionalBoundery':boundary})
                            netDemanding_regionalArea_eachWeight.append(netDemanding_regionalArea)  
                            
                            ## demanding surplus checking: the total demanding should equal to the total outpu
                            demandingSurplus = 0
                            for netDemand in netDemanding_regionalArea:
                                demandingSurplus += netDemand['netDemanding']
                            if abs(demandingSurplus) > 1:
                                print('The total demanding and the total output does not add up.') 
                        netDemanding_smallArea_eachWeather.append(netDemanding_smallArea_eachWeight)
                        netDemanding_regionalArea_eachWeather.append(netDemanding_regionalArea_eachWeight)
                    netDemanding_smallArea_eachCarbonTax.append(netDemanding_smallArea_eachWeather)
                    netDemanding_regionalArea_eachCarbonTax.append(netDemanding_regionalArea_eachWeather)
                netDemanding_smallArea_eachSMRDesign.append(netDemanding_smallArea_eachCarbonTax)
                netDemanding_regionalArea_eachSMRDesign.append(netDemanding_regionalArea_eachCarbonTax)
            return netDemanding_smallArea_eachSMRDesign, netDemanding_regionalArea_eachSMRDesign
        else:
            ## net demanding of each demanding area
            ## self.demandingAreaList = demandingAndCentroid[self.startTime_of_EnergyConsumption]
            self.netDemandingList_smallAreaForEachWeight = [] ## small areas refer to the demanding areas, ['LA_code', netDemanding]
            self.netDemandingList_regionalAreaForEachWeight = []
            self.transmissionLoss = []
            ##-- Net demand of each demanding area (small areas) --##
            for g_index in range(len(self.weighterList)):
                genNameList = self.GeneratorObjectList[g_index]
                SMRNameList = self.SMRSiteObjectList[g_index]
                ## Initialise the empty list for different demanding areas
                netDemanding_smallArea = []
                netDemanding_regionalArea = []
                ## counter of the generators used to fulfill the small area demanding 
                counter_gen = 0
                counter_smr = 0
                for demanding in self.demandingAreaList:
                    Area_LACode = demanding['Area_LACode']
                    if Area_LACode in highLevelRegions:
                        continue
                    demandingValue_smallArea = float(demanding['v_TotalELecConsumption'])
                    if 'Boundary' in demanding.keys():
                        boundary = demanding['Boundary']
                    else:
                        boundary = queryOPFInput.queryAreaBoundaries(Area_LACode)
                        demanding['Boundary'] = boundary
                    for genName in genNameList:
                        smallAreaCode = str(self.ObjectSet[genName].smallAreaCode)
                        if str(smallAreaCode) == 'None':
                            raise ValueError('small Area Code should not be None.')
                        if smallAreaCode == Area_LACode or smallAreaCode in Area_LACode:
                            genOutput = float(self.ObjectSet[genName].PG_OUTPUT) * (24 * 365) / 1000
                            demandingValue_smallArea -= genOutput
                            counter_gen += 1
                    for SMRName in SMRNameList: 
                        smallAreaCode = str(self.ObjectSet[SMRName].smallAreaCode)
                        if str(smallAreaCode) == 'None':
                            raise ValueError('small Area Code should not be None.')
                        if smallAreaCode == Area_LACode or smallAreaCode in Area_LACode:
                            genOutput = float(self.ObjectSet[SMRName].PG_OUTPUT) * (24 * 365) / 1000
                            demandingValue_smallArea -= genOutput   
                            counter_smr += 1  
                    netDemanding_smallArea.append({'smallAreaCode': Area_LACode, 'netDemanding':demandingValue_smallArea, 'smallAreaBoundary':boundary})
                if counter_gen + counter_smr != len(genNameList) + len(SMRNameList):
                    raiseExceptions('There are some generators in the list are not counted to fulfill the demanding, please check if the small LACode is properly assigned as an attribute of the generator/SMR instance.')
                self.netDemandingList_smallAreaForEachWeight.append(netDemanding_smallArea)  
                # demanding surplus checking: the total demanding should equal to the total output
                transmissionLoss = 0
                for netDemand in netDemanding_smallArea:
                    transmissionLoss += netDemand['netDemanding']
                self.transmissionLoss.append(abs(transmissionLoss)) 
            
                ##-- net demanding of the regional areas --##
                ## counter of the generators used to fulfill the regional demanding 
                counter_gen = 0 
                counter_smr = 0
                for regionalDemanding in self.regionalDemandingList:
                    Region_LACode = regionalDemanding['RegionOrCountry_LACode']
                    demandingValue_region = float(regionalDemanding['v_TotalELecConsumption']) 
                    if 'Boundary' in regionalDemanding.keys():
                        boundary = regionalDemanding['Boundary']
                    else:
                        boundary = queryOPFInput.queryAreaBoundaries(Region_LACode) 
                        regionalDemanding['Boundary'] = boundary
                    for genName in genNameList:
                        regionalAreaCode = str(self.ObjectSet[genName].RegionLACode)
                        if regionalAreaCode == None:
                            raise ValueError('Region LA code should not be None.')
                        if regionalAreaCode == Region_LACode or regionalAreaCode in Region_LACode:
                            genOutput = float(self.ObjectSet[genName].PG_OUTPUT) * (24 * 365) / 1000 
                            demandingValue_region -= genOutput
                            counter_gen += 1
                    for SMRName in SMRNameList: 
                        regionalAreaCode = str(self.ObjectSet[SMRName].RegionLACode)
                        if regionalAreaCode == None:
                            raise ValueError('Region LA code should not be None.')
                        if regionalAreaCode == Region_LACode or regionalAreaCode in Region_LACode:
                            genOutput = float(self.ObjectSet[SMRName].PG_OUTPUT) * (24 * 365) / 1000 
                            demandingValue_region -= genOutput
                            counter_smr += 1
                    netDemanding_regionalArea.append({'regionalAreaCode': Region_LACode, 'netDemanding': demandingValue_region, 'regionalBoundery':boundary})
                if counter_gen + counter_smr != len(genNameList) + len(SMRNameList):
                    raiseExceptions('There are some generators in the list are not counted to fulfill the demanding, please check if the regional LACode is properly assigned as an attribute of the generator/SMR instance.')
                self.netDemandingList_regionalAreaForEachWeight.append(netDemanding_regionalArea)         
            return 

##TODO: this function should be updated according to the updated version of the code (using the derivation framwork for markup)   
    def ModelPythonObjectOntologiser(self):
        """
        create KG representation for all model objects
        
        """
        from BusModelKGInstanceCreator import BusModelKGInstanceCreator
        from BranchModelKGInstanceCreator import BranchModelKGInstanceCreator
        from GeneratorModelKGInstanceCreator import GeneratorModelKGInstanceCreator
        ## create the power system model node IRI
        self.powerSystemModelIRI = UK_PG.ontopowsys_namespace + UK_PG.powerSystemModelKey + str(uuid.uuid4())
        ## create the timeStamp, e.x. 2022-06-15T16:24:29.371941+00:00
        self.timeStamp = datetime.now(pytz.utc).isoformat()

        BusModelKGInstanceCreator(self.ObjectSet, self.BusObjectList, self.numOfBus, self.topologyNodeIRI, self.powerSystemModelIRI, \
            self.timeStamp, self.agentIRI, self.derivationClient, self.OWLUpdateEndPointURL, self.OWLFileStoragePath)
        BranchModelKGInstanceCreator(self.ObjectSet, self.BranchObjectList, self.numOfBus, self.topologyNodeIRI, self.powerSystemModelIRI, \
            self.timeStamp, self.agentIRI, self.derivationClient, self.OWLUpdateEndPointURL, self.OWLFileStoragePath)
        ##FIXME: include the SMR and the existing plants
        # GeneratorModelKGInstanceCreator(self.ObjectSet, self.GeneratorObjectList, self.GeneratorToBeRetrofittedObjectList, self.OPFOrPF, self.newGeneratorType, self.numOfBus, self.topologyNodeIRI, self.powerSystemModelIRI, \
        # self.timeStamp, self.agentIRI, self.derivationClient, self.OWLUpdateEndPointURL, self.OWLFileStoragePath)  
        return 
    
    """"This function is to calculate the CO2 emission of each design"""
    def CarbonEmissionCalculator(self):
        self.totalCO2EmissionList_Mt_yr = []
        self.CO2EmissionIntensity_gperkwh = []
        self.annualisedTotalEmissionCostList_MGBP_yr = []
        self.emissionCostContributionList_OPEX = []
        self.emissionCostContributionList_TotalCost = []
        for GeneratorObjectList_EachWeight in self.GeneratorObjectList:
            totalCO2Emission_t_hr = 0
            emissionCost_gbp_hr = 0
            totalOutput_MW = 0
            totalEmissionCostOverLifespan_MGBP_yr = 0
            genTypeLabel_temporary = []
            outPutData = []
            for gen in GeneratorObjectList_EachWeight:
                totalCO2Emission_t_hr += float(self.ObjectSet[gen].PG_OUTPUT) * float(self.ObjectSet[gen].CO2EmissionFactor) 
                self.ObjectSet[gen].co2Emission_t_hr = float(self.ObjectSet[gen].PG_OUTPUT) * float(self.ObjectSet[gen].CO2EmissionFactor) 
                emissionCost_gbp_hr += float(self.ObjectSet[gen].PG_OUTPUT) * float(self.ObjectSet[gen].CO2EmissionFactor) * self.CarbonTaxForOPF 
                totalOutput_MW += float(self.ObjectSet[gen].PG_OUTPUT)
                
                if not self.ObjectSet[gen].fueltype in genTypeLabel_temporary:
                    genTypeLabel_temporary.append(self.ObjectSet[gen].fueltype)
                    outPutData.append(float(self.ObjectSet[gen].PG_OUTPUT)/1E3)
                else:
                    i = genTypeLabel_temporary.index(self.ObjectSet[gen].fueltype) 
                    outPutData[i] += float(self.ObjectSet[gen].PG_OUTPUT)/1E3 

            ## yearly emission
            self.totalCO2EmissionList_Mt_yr.append(totalCO2Emission_t_hr* self.yearlyOperationHours/1E6) ## Mt/yr

            ## yearly emission cost
            annualEmissionCost_MGBP_yr = emissionCost_gbp_hr * self.yearlyOperationHours/1E6 ## M£/yr

            ## emission intensity
            emissionIntensity_gperkWh = totalCO2Emission_t_hr/totalOutput_MW * 1000 ## g/kwh
            self.CO2EmissionIntensity_gperkwh.append(emissionIntensity_gperkWh)
            for l in range(self.projectLifeSpan):
                ## l starts frm 0, therefore it is no need to use -(l-1) bus just use -l
                totalEmissionCostOverLifespan_MGBP_yr += annualEmissionCost_MGBP_yr * (1 + float(self.bankRate)) **(-l)
            annualisedTotalEmissionCostOverLifespan_MGBP_yr = round((totalEmissionCostOverLifespan_MGBP_yr * self.discountRate / (1 - ((1 + self.discountRate)**(-1 * self.projectLifeSpan)))), 2)
            self.annualisedTotalEmissionCostList_MGBP_yr.append(annualisedTotalEmissionCostOverLifespan_MGBP_yr)
        
        for annualisedOPEX in self.annualisedOPEXList:
            emissionCostContribution_OPEX = round((annualisedTotalEmissionCostOverLifespan_MGBP_yr / annualisedOPEX), 2)
            self.emissionCostContributionList_OPEX.append(emissionCostContribution_OPEX)
        for totalAnnualisedCost in self.totalCostList:
            emissionCostContribution_TotalCost = round((annualisedTotalEmissionCostOverLifespan_MGBP_yr / totalAnnualisedCost), 2)
            self.emissionCostContributionList_TotalCost.append(emissionCostContribution_TotalCost)          
        return 

    """"This function is to calculate energy generation mix of each design"""
    def EnergySupplyBreakDown(self):
        energyBreakdownList = []
        energyBreakdownList_detailed = []
        genTech_detailed = []
        for w in range(len(self.GeneratorObjectList)): ## the length of GeneratorObjectList should equal to the number of the weights
            genListForEachWeight = self.GeneratorObjectList[w]
            genTypeLabel_temporary = []
            genTech_temporary = []
            outPutData = []
            outPutData_eachTech = []
            for gen in genListForEachWeight:
                if not self.ObjectSet[gen].fueltype in genTypeLabel_temporary:
                    genTypeLabel_temporary.append(self.ObjectSet[gen].fueltype)
                    outPutData.append(float(self.ObjectSet[gen].PG_OUTPUT))
                else:
                    i = genTypeLabel_temporary.index(self.ObjectSet[gen].fueltype) 
                    outPutData[i] += float(self.ObjectSet[gen].PG_OUTPUT)

                if not self.ObjectSet[gen].techType in genTech_temporary:
                    genTech_temporary.append(self.ObjectSet[gen].techType)
                    outPutData_eachTech.append(float(self.ObjectSet[gen].PG_OUTPUT))
                else:
                    i = genTech_temporary.index(self.ObjectSet[gen].techType) 
                    outPutData_eachTech[i] += float(self.ObjectSet[gen].PG_OUTPUT)

            totalOutputOfSMR = 0
            if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
                SMRListForEachWeight = self.SMRSiteObjectList[w]
                for regen in SMRListForEachWeight:
                    totalOutputOfSMR += self.ObjectSet[regen].PG_OUTPUT
                genTypeLabel_temporary.append(self.newGeneratorType)
                outPutData.append(totalOutputOfSMR) 
                genTech_temporary.append(self.newGeneratorType)
                outPutData_eachTech.append(totalOutputOfSMR) 
            else:
                genTypeLabel_temporary.append(self.newGeneratorType)
                outPutData.append(0) 
                genTech_temporary.append(self.newGeneratorType)
                outPutData_eachTech.append(0) 

            ## convert to the percentage
            percentage = []
            sum_up = sum(outPutData)
            for output in outPutData:
                p = round(output/sum_up, 2)
                percentage.append(p * 100)

            ## Old code for generating the pie chart
            otherCapa = 0
            labelToBeDeleted = []
            dataToBeDeleted = []
            for label in genTypeLabel_temporary:
                if label in ['SourGas']:
                    op = outPutData[genTypeLabel_temporary.index(label)]
                    outPutData[genTypeLabel_temporary.index('NaturalGas')] += op
                    labelToBeDeleted.append('SourGas')
                    dataToBeDeleted.append(op)
                elif not label in ['Solar', 'Oil', 'NaturalGas', 'Coal', 'Wind', 'Nuclear', 'SMR', 'Hydro']:
                    i = genTypeLabel_temporary.index(label)
                    labelToBeDeleted.append(label)
                    dataToBeDeleted.append(outPutData[i])
                    otherCapa += outPutData[i] 

            for label in labelToBeDeleted:
                genTypeLabel_temporary.remove(label)
            
            for data in dataToBeDeleted:
                outPutData.remove(data)

            outPutData.append(otherCapa)
            genTypeLabel_temporary.append('Others')

            if len(genTypeLabel_temporary) != len(outPutData) or len(genTypeLabel_temporary)!= 9:
                raise Exception('The length of genTypeLabel should be equal to the length of outPutData.')

            ## Re-order the output accoding to the given gen type label
            ##genTypeLabel = ['Solar', 'Wind', 'Hydro', 'Oil', 'NaturalGas', 'Coal', 'Nuclear', 'SMR', 'Others']
            outPutData_reOrdered = [0 for i in range(len(outPutData))]
            for genType in genTypeLabel_temporary:
                if genType in genTypeLabel:
                    index_genTypeLabel = genTypeLabel.index(genType)
                    index_genTypeLabel_temporary = genTypeLabel_temporary.index(genType)
                    outPutData_reOrdered[index_genTypeLabel] += round(outPutData[index_genTypeLabel_temporary], 3)
                else:
                    raise Exception('The current generation type %s should be one of the genTypeLabel.'% genType)
            energyBreakdownList.append(outPutData_reOrdered)    

            energyBreakdownList_detailed.append(outPutData_eachTech)
            genTech_detailed.append(genTech_temporary)

        return energyBreakdownList, energyBreakdownList_detailed, genTech_detailed

    """"This function is to calculate energy generation mix of each areas: official regions or smaller demand areas"""
    def EnergyBreakdown_RegionAndSmallArea(self):
        self.output_smallAreaForEachWeight = [] 
        self.genTypeLabel_smallAreaForEachWeight = [] 
        self.output_regionalAreaForEachWeight = []
        self.emission_regionalAreaForEachWeight = []
        self.genTypeLabel_regionalAreaForEachWeight = [] 
        
        ##-- Small area --##
        for g_index in range(len(self.weighterList)):
            ## list of the object names
            genNameList = self.GeneratorObjectList[g_index]
            SMRNameList = self.SMRSiteObjectList[g_index]
            output_smallArea = []
           
            for demanding in self.demandingAreaList:
                genTypeLabel_temporary = []
                outPutData = []
                Area_LACode = demanding['Area_LACode']
                if Area_LACode in highLevelRegions:
                    continue
                if 'Boundary' in demanding.keys():
                    boundary = demanding['Boundary']
                else:
                    boundary = queryOPFInput.queryAreaBoundaries(Area_LACode)
                    demanding['Boundary'] = boundary

                for genName in genNameList:
                    smallAreaCode = str(self.ObjectSet[genName].smallAreaCode)
                    if smallAreaCode == Area_LACode or smallAreaCode in Area_LACode:
                        if not self.ObjectSet[genName].fueltype in genTypeLabel_temporary:
                            genTypeLabel_temporary.append(self.ObjectSet[genName].fueltype)
                            outPutData.append(float(self.ObjectSet[genName].PG_OUTPUT))
                        else:
                            i = genTypeLabel_temporary.index(self.ObjectSet[genName].fueltype) 
                            outPutData[i] += float(self.ObjectSet[genName].PG_OUTPUT)

                totalOutputOfSMR = 0
                if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0: 
                    for SMRName in SMRNameList:
                        smallAreaCode = str(self.ObjectSet[SMRName].smallAreaCode)
                        if smallAreaCode == Area_LACode or smallAreaCode in Area_LACode:
                            totalOutputOfSMR += self.ObjectSet[SMRName].PG_OUTPUT
                    genTypeLabel_temporary.append(self.newGeneratorType)
                    outPutData.append(totalOutputOfSMR) 

                if 'SourGas' in genTypeLabel_temporary and not 'NaturalGas' in genTypeLabel_temporary:
                    i_sourgas = genTypeLabel_temporary.index('SourGas')
                    genTypeLabel_temporary[i_sourgas] = 'NaturalGas'
                ## reduce the energy types
                sumUpOfotherOutput = 0
                labelToBeDeleted = []
                dataToBeDeleted = []
                for label in genTypeLabel_temporary:
                    if label in ['SourGas']:
                        op = outPutData[genTypeLabel_temporary.index(label)]
                        if 'NaturalGas' in genTypeLabel_temporary:
                            outPutData[genTypeLabel_temporary.index('NaturalGas')] += op
                            labelToBeDeleted.append('SourGas')
                            dataToBeDeleted.append(op)
                    elif not label in ['Solar', 'Oil', 'NaturalGas', 'Coal', 'Wind', 'Nuclear', 'SMR', 'Hydro']:
                        i = genTypeLabel_temporary.index(label)
                        labelToBeDeleted.append(label)
                        dataToBeDeleted.append(outPutData[i])
                        sumUpOfotherOutput += outPutData[i]

                for label in labelToBeDeleted:
                    genTypeLabel_temporary.remove(label)
            
                for data in dataToBeDeleted:
                    outPutData.remove(data)

                outPutData.append(sumUpOfotherOutput)
                genTypeLabel_temporary.append('Others') 

                ## convert 'Nuclear' into conventional nuclear
                if 'Nuclear' in genTypeLabel_temporary:
                    i_Nuclear = genTypeLabel_temporary.index('Nuclear')
                    genTypeLabel_temporary[i_Nuclear] = 'Conventional Nuclear'

                ## convert to percentage
                percentage = []
                sum_up = sum(outPutData)
                if sum_up == 0:
                    percentage = [0]
                else:
                    for output in outPutData:
                        p = round(output/sum_up, 2)
                        percentage.append(p * 100)
                ## Find the centroid of the demanding area
                lon = boundary.centroid.x
                lat = boundary.centroid.y

                if sum_up > 0:
                    output_smallArea.append({'outputBreakdown': outPutData, 'percentageBreakdown': percentage, 'genTypeLabel': genTypeLabel_temporary, 'smallAreaBoundary': boundary, 'centroid': [lat, lon], 'smallAreaLACode': Area_LACode})              
            self.output_smallAreaForEachWeight.append(output_smallArea)
            
        ##-- Regional area --##
        for g_index in range(len(self.weighterList)):
            ## list of the object names
            genNameList = self.GeneratorObjectList[g_index]
            SMRNameList = self.SMRSiteObjectList[g_index]

            output_regionalArea = []
            emission_regionalArea = []

            for regionalDemanding in self.regionalDemandingList:
                genTypeLabel_temporary = []
                outPutData = []
                emissionData = []
                Region_LACode = regionalDemanding['RegionOrCountry_LACode']
                if 'Boundary' in regionalDemanding.keys():
                    boundary = regionalDemanding['Boundary']
                else:
                    boundary = queryOPFInput.queryAreaBoundaries(Region_LACode) 
                    regionalDemanding['Boundary'] = boundary 
                for genName in genNameList:
                    regionalAreaCode = str(self.ObjectSet[genName].RegionLACode)
                    if regionalAreaCode == Region_LACode or regionalAreaCode in Region_LACode:
                        if not self.ObjectSet[genName].fueltype in genTypeLabel_temporary:
                            genTypeLabel_temporary.append(self.ObjectSet[genName].fueltype)
                            outPutData.append(float(self.ObjectSet[genName].PG_OUTPUT))
                            emissionData.append(float(self.ObjectSet[genName].co2Emission_t_hr))
                        else:
                            i = genTypeLabel_temporary.index(self.ObjectSet[genName].fueltype) 
                            outPutData[i] += float(self.ObjectSet[genName].PG_OUTPUT)
                            emissionData[i] += float(self.ObjectSet[genName].co2Emission_t_hr)

                totalOutputOfSMR = 0
                if self.withRetrofit is True and self.numberOfSMRToBeIntroduced > 0:
                    for SMRName in SMRNameList:
                        regionalAreaCode = str(self.ObjectSet[SMRName].RegionLACode)
                        if regionalAreaCode == Region_LACode or regionalAreaCode in Region_LACode:
                            totalOutputOfSMR += self.ObjectSet[SMRName].PG_OUTPUT
                    genTypeLabel_temporary.append(self.newGeneratorType)
                    outPutData.append(totalOutputOfSMR) 
                    emissionData.append(0)

                if 'SourGas' in genTypeLabel_temporary and not 'NaturalGas' in genTypeLabel_temporary:
                    i_sourgas = genTypeLabel_temporary.index('SourGas')
                    genTypeLabel_temporary[i_sourgas] = 'NaturalGas'

                ## reduce the energy types
                sumUpOfotherOutput = 0
                sumUpOfotherEmission = 0
                labelToBeDeleted = []
                dataToBeDeleted = []
                emissionToBeDeleted = []
                for label in genTypeLabel_temporary:
                    if label in ['SourGas']:
                        op = outPutData[genTypeLabel_temporary.index(label)]
                        em = emissionData[genTypeLabel_temporary.index(label)]
                        if 'NaturalGas' in genTypeLabel_temporary:
                            outPutData[genTypeLabel_temporary.index('NaturalGas')] += op
                            emissionData[genTypeLabel_temporary.index('NaturalGas')] += em
                            labelToBeDeleted.append('SourGas')
                            dataToBeDeleted.append(op)
                            emissionToBeDeleted.append(em)
                    elif not label in ['Solar', 'Oil', 'NaturalGas', 'Coal', 'Wind', 'Nuclear', 'SMR', 'Hydro']:
                        i = genTypeLabel_temporary.index(label)
                        labelToBeDeleted.append(label)
                        dataToBeDeleted.append(outPutData[i])
                        emissionToBeDeleted.append(emissionData[i])
                        sumUpOfotherOutput += outPutData[i]
                        sumUpOfotherEmission += emissionData[i]

                for label in labelToBeDeleted:
                    genTypeLabel_temporary.remove(label)
            
                for data in dataToBeDeleted:
                    outPutData.remove(data)

                for em in emissionToBeDeleted:
                    emissionData.remove(em)

                outPutData.append(sumUpOfotherOutput)
                emissionData.append(sumUpOfotherEmission)
                genTypeLabel_temporary.append('Others') 

                ## convert to percentage - output
                percentage_output = []
                sum_up = sum(outPutData)
                if sum_up == 0:
                    percentage_output = [0]
                else:
                    for output in outPutData:
                        p = round(output/sum_up, 2)
                        percentage_output.append(p * 100)
                
                ## convert to percentage - emssion
                percentage_emission = []
                sumUpEmission = sum(emissionData)
                if sumUpEmission == 0:
                    percentage_emission = [0]
                else:
                    for output in outPutData:
                        p = round(output/sum_up, 2)
                        percentage_emission.append(p * 100)

                lon = boundary.centroid.x
                lat = boundary.centroid.y

                sumUpEmission = sum(emissionData)

                if sum_up > 0:
                    output_regionalArea.append({'outputBreakdown': outPutData, 'totalOutput': sum_up, 'percentageBreakdown': percentage_output, 'genTypeLabel': genTypeLabel_temporary, 'regionalAreaBoundary': boundary, 'centroid': [lat, lon], 'RegionalLACode': Region_LACode})

                emission_regionalArea.append({'emissionBreakdown': emissionData, 'totalEmission': sumUpEmission, 'percentageBreakdown': percentage_emission, 'genTypeLabel': genTypeLabel_temporary, 'regionalAreaBoundary': boundary, 'centroid': [lat, lon], 'RegionalLACode': Region_LACode})

            self.output_regionalAreaForEachWeight.append(output_regionalArea)
            self.emission_regionalAreaForEachWeight.append(emission_regionalArea)
        return 

    def visualisationFileCreator_ExtantGenerator(self, GeneratorObjectList, file_label):
        geojson_file = """
        {
            "type": "FeatureCollection",
            "features": ["""
        for extant_gen in GeneratorObjectList:
            if round(float(self.ObjectSet[extant_gen].PG_OUTPUT), 2) < 0.01:
                continue
            else: 
                feature = """{
                    "type": "Feature",
                    "properties": {
                    "Fuel Type": "%s",
                    "Capacity": %s,
                    "Output": %s,
                    "Carbon tax rate": %s,
                    "Status": "%s",
                    "marker-color": "%s",
                    "marker-size": "medium",
                    "marker-symbol": "",
                    "IRI": "%s"
                    },
                    "geometry": {
                    "type": "Point",
                    "coordinates": [
                        %s,
                        %s
                    ]
                    }
                    },"""%(self.ObjectSet[extant_gen].fueltype, float(self.ObjectSet[extant_gen].capacity), round(float(self.ObjectSet[extant_gen].PG_OUTPUT), 2), self.ObjectSet[extant_gen].CarbonTax, 
                self.ObjectSet[extant_gen].status, gen_fuel_col(str(self.ObjectSet[extant_gen].fueltype)), self.ObjectSet[extant_gen].generatorNodeIRI, self.ObjectSet[extant_gen].latlon[1], self.ObjectSet[extant_gen].latlon[0])
                # adding new line 
                geojson_file += '\n'+feature

        # removing last comma as is last line
        geojson_file = geojson_file[:-1]
        # finishing file end 
        end_geojson = """
            ]
        }
        """
        geojson_file += end_geojson
        # saving as geoJSON
        self.mkdirFilePath(self.filePathForJSON, "")
        geojson_written = open(self.filePathForJSON + '/' + file_label +'.geojson','w')
        geojson_written.write(geojson_file)
        geojson_written.close() 
        print('---GeoJSON written successfully: visualisationFileCreator_ExtantGenerator---', file_label)
        return

    def visualisationFileCreator_ClosedGenerator(self, GeneratorObjectList, file_label):
        geojson_file = """
        {
            "type": "FeatureCollection",
            "features": ["""
        for extant_gen in GeneratorObjectList:
            if round(float(self.ObjectSet[extant_gen].PG_OUTPUT), 2) < 0.009:
                feature = """{
                    "type": "Feature",
                    "properties": {
                    "Fuel Type": "%s",
                    "Capacity": %s,
                    "Output": %s,
                    "Carbon tax rate": %s,
                    "Status": "Closed",
                    "marker-color": "%s",
                    "marker-size": "medium",
                    "marker-symbol": "",
                    "IRI": "%s"
                    },
                    "geometry": {
                    "type": "Point",
                    "coordinates": [
                        %s,
                        %s
                    ]
                    }
                    },"""%(self.ObjectSet[extant_gen].fueltype, float(self.ObjectSet[extant_gen].capacity), round(float(self.ObjectSet[extant_gen].PG_OUTPUT), 2), self.ObjectSet[extant_gen].CarbonTax, 
                    gen_fuel_col(str(self.ObjectSet[extant_gen].fueltype)), self.ObjectSet[extant_gen].generatorNodeIRI, self.ObjectSet[extant_gen].latlon[1], self.ObjectSet[extant_gen].latlon[0])
                # adding new line 
                geojson_file += '\n'+feature
            else: 
                continue

        # removing last comma as is last line
        geojson_file = geojson_file[:-1]
        # finishing file end 
        end_geojson = """
            ]
        }
        """
        geojson_file += end_geojson
        # saving as geoJSON
        self.mkdirFilePath(self.filePathForJSON, "")
        geojson_written = open( self.filePathForJSON + '/' + file_label +'.geojson','w')
        geojson_written.write(geojson_file)
        geojson_written.close() 
        print('---GeoJSON written successfully: visualisationFileCreator_ClosedGenerator---', file_label)
        return

    def visualisationFileCreator_AddedSMRGenerator(self, SMRSiteObjectList, file_label):
        if len(SMRSiteObjectList) == 0:
            print("***There is no SMR to be retrofitted.***")
            return
        geojson_file = """
        {
            "type": "FeatureCollection",
            "features": ["""
        for smr in SMRSiteObjectList:
            feature = """{
                "type": "Feature",
                "properties": {
                "Fuel Type": "%s",
                "Capacity": %s,
                "Output": %s,
                "Operation ratio": "%s",
                "Number of SMR units": "%s",
                "Carbon tax rate": "%s",
                "Status": "%s",
                "IRI": "%s"
                },
                "geometry": {
                "type": "Point",
                "coordinates": [
                    %s,
                    %s
                ]
                }
            },"""%(self.ObjectSet[smr].fueltype, float(self.ObjectSet[smr].capacity), round(float(self.ObjectSet[smr].PG_OUTPUT),2), round(float(self.ObjectSet[smr].PG_OUTPUT)/float(self.ObjectSet[smr].capacity), 2), int(float(self.ObjectSet[smr].capacity)/self.SMRCapability), 
            self.ObjectSet[smr].CarbonTax, self.ObjectSet[smr].status, self.ObjectSet[smr].generatorNodeIRI,  self.ObjectSet[smr].latlon[1], self.ObjectSet[smr].latlon[0])
            # adding new line 
            geojson_file += '\n'+feature

        # removing last comma as is last line
        geojson_file = geojson_file[:-1]
        # finishing file end 
        end_geojson = """
            ]
        }
        """
        geojson_file += end_geojson
        # saving as geoJSON
        self.mkdirFilePath(self.filePathForJSON, "")
        geojson_written = open(self.filePathForJSON + '/' + file_label +'.geojson','w')
        geojson_written.write(geojson_file)
        geojson_written.close() 
        print('---GeoJSON written successfully: visualisationFileCreator_AddedSMRGenerator---', file_label)
        return

    """This method is to generate the JSON file for creating the visualisation of the net demanding of the small areas"""
    def GeoJSONCreator_netDemandingForSmallArea(self, demandingDataList, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList, ifSpecifiedResults:bool, specifiedConfigList:list):  
        ##check the storage path
        self.mkdirFilePath(self.netDemandingJSONPath, 'SmallAreaNetDemanding/') 
        ## Determine the upper and lower bounds
        netDemanding = []
        for demanding_eachSMRDesign in demandingDataList:
            for demanding_eachCarbonTax in demanding_eachSMRDesign:
                for demanding_eachWeather in demanding_eachCarbonTax:
                    for demanding_eachWeight in demanding_eachWeather:
                        for demainding_eachsmallArea in demanding_eachWeight:
                            netDemanding.append(demainding_eachsmallArea['netDemanding'])
        upperbound = round(float(max(netDemanding)), 2)
        lowerbound = round(float(min(netDemanding)), 2)

        counter =  0
        while upperbound > 10:
            upperbound = upperbound / 10
            counter +=  1
        upperbound = math.ceil(upperbound) * (10**counter)

        counter =  0
        abs_lowerbound = abs(lowerbound)
        while abs_lowerbound > 10:
            abs_lowerbound = abs_lowerbound / 10
            counter +=  1
        abs_lowerbound = math.ceil(abs_lowerbound) * (10**counter)
        lowerbound = - abs_lowerbound

        if lowerbound >= 0 or upperbound <= 0:
            raise ValueError('Unusual lowerbound or upperbound. Lowerbound should be nagitive numbers and the upper bound should be positive.')

        ## create the colour bar legend
        createColourBarLegend(self.netDemandingJSONPath + 'SmallAreaNetDemanding/', upperbound, lowerbound, 'Net demanding (GWh/yr)', 'legend-netDemanding', 0, 11)

        weatherNameList = []
        for weather in weatherConditionList:
            weatherNameList.append(weather[2])

        if ifSpecifiedResults is True:
            if specifiedConfigList == [] or specifiedConfigList == [[]]:
                raise ValueError('specifiedConfigList should contain at list 1 non-empty list.')
            for cf in specifiedConfigList:
                if len(cf) < 3:
                    raise ValueError('The sub list of the specifiedConfigList should contain at least 3 elements specifying the SMR number, carbon tax and weather condition.')
                elif len(cf) == 3: ## SMR number, Carbon tax, weather condition 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2])
                    
                    specifiedDemandingList = demandingDataList[smrIndex][carbonTaxList][weatherIndex]

                    for i_weight, demanding_eachWeight in enumerate(specifiedDemandingList):
                        geojson_file = """
                        {
                            "type": "FeatureCollection",
                            "features": ["""
                        # iterating over features (rows in results array)
                        totalDemanding = 0
                        for demanding in demanding_eachWeight:
                            totalDemanding += float(demanding['netDemanding'])
                        for demanding in demanding_eachWeight:
                            boundary =  ast.literal_eval(geojson.dumps(mapping(demanding ['smallAreaBoundary'])))
                            # creating point feature 
                            feature = """{
                                "type": "Feature",
                                "properties": {
                                "smallArea_LACode": "%s",
                                "netDemanding": "%s",
                                "Total netDemanding": "%s",
                                "fill": "%s",
                                "fill-opacity": 1,
                                "stroke-width" : 0.2,
                                "stroke-opacity" : 0.9
                                },
                                "geometry":  %s             
                            },"""%(demanding['smallAreaCode'], round(float(demanding['netDemanding']), 2), round(totalDemanding, 2), sequentialHEXColourCodePicker(round(float(demanding['netDemanding']), 2), upperbound, lowerbound, 0, 11), str(boundary).replace("\'", "\""))         
                            # adding new line 
                            geojson_file += '\n'+feature   
                        # removing last comma as is last line
                        geojson_file = geojson_file[:-1]
                        # finishing file end 
                        end_geojson = """
                            ]
                        }
                        """
                        geojson_file += end_geojson
                        # saving as geoJSON
                        file_label = 'SmallAreaNetDemanding_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) +'_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                        geojson_written = open(self.netDemandingJSONPath + 'SmallAreaNetDemanding/' + file_label + '.geojson','w')
                        geojson_written.write(geojson_file)
                        geojson_written.close() 
                        print('---GeoJSON written successfully: net Demanding for small areas---', file_label)      
                elif len(cf) == 4: ## SMR number, Carbon tax, weather condition, weight 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2]) 
                    if not cf[3] in self.weighterList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be weight.')
                    else:
                        weightIndex = self.weighterList.index(cf[3]) 
                    
                    specifiedDemandingList = demandingDataList[smrIndex][carbonTaxList][weatherIndex][weightIndex]

                    geojson_file = """
                    {
                        "type": "FeatureCollection",
                        "features": ["""
                    # iterating over features (rows in results array)
                    for demanding in specifiedDemandingList:
                        boundary =  ast.literal_eval(geojson.dumps(mapping(demanding ['smallAreaBoundary'])))
                        # creating point feature 
                        feature = """{
                            "type": "Feature",
                            "properties": {
                            "smallArea_LACode": "%s",
                            "netDemanding": "%s",
                            "fill": "%s",
                            "fill-opacity": 1,
                            "stroke-width" : 0.2,
                            "stroke-opacity" : 0.9
                            },
                            "geometry":  %s             
                        },"""%(demanding['smallAreaCode'], round(float(demanding['netDemanding']), 2), sequentialHEXColourCodePicker(round(float(demanding['netDemanding']), 2, 11), upperbound, lowerbound, 0), str(boundary).replace("\'", "\""))         
                        # adding new line 
                        geojson_file += '\n'+feature   
                    # removing last comma as is last line
                    geojson_file = geojson_file[:-1]
                    # finishing file end 
                    end_geojson = """
                        ]
                    }
                    """
                    geojson_file += end_geojson
                    # saving as geoJSON
                    file_label = 'SmallAreaNetDemanding_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(round(cf[3], 2)) + ')'
                    geojson_written = open(self.netDemandingJSONPath + 'SmallAreaNetDemanding/' + file_label + '.geojson','w')
                    geojson_written.write(geojson_file)
                    geojson_written.close() 
                    print('---GeoJSON written successfully: net Demanding for small areas---', file_label)
                else:
                    raise ValueError('Invailed sub list of the specifiedConfigList.')
        else:
            for i_smr, demanding_eachSMRDesign in enumerate(demandingDataList):
                for i_carbontax, demanding_eachCarbonTax in enumerate(demanding_eachSMRDesign):
                    for i_weather, demanding_eachWeather in enumerate(demanding_eachCarbonTax):
                        for i_weight, demanding_eachWeight in enumerate(demanding_eachWeather):
                            geojson_file = """
                            {
                                "type": "FeatureCollection",
                                "features": ["""
                            # iterating over features (rows in results array)
                            for demanding in demanding_eachWeight:
                                boundary =  ast.literal_eval(geojson.dumps(mapping(demanding ['smallAreaBoundary'])))
                                # creating point feature 
                                feature = """{
                                    "type": "Feature",
                                    "properties": {
                                    "smallArea_LACode": "%s",
                                    "netDemanding": "%s",
                                    "fill": "%s",
                                    "fill-opacity": 1,
                                    "stroke-width" : 0.2,
                                    "stroke-opacity" : 0.9
                                    },
                                    "geometry":  %s             
                                },"""%(demanding['smallAreaCode'], round(float(demanding['netDemanding']), 2), sequentialHEXColourCodePicker(round(float(demanding['netDemanding']), 2), upperbound, lowerbound, 0, 11), str(boundary).replace("\'", "\""))         
                                # adding new line 
                                geojson_file += '\n'+feature   
                            # removing last comma as is last line
                            geojson_file = geojson_file[:-1]
                            # finishing file end 
                            end_geojson = """
                                ]
                            }
                            """
                            geojson_file += end_geojson
                            # saving as geoJSON
                            file_label = 'SmallAreaNetDemanding_(SMR_' + str(NumberOfSMRUnitList[i_smr]) + '_CarbonTax_' + str(CarbonTaxForOPFList[i_carbontax]) + '_weatherCondition_' + str(weatherConditionList[i_weather][2]) + '_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                            geojson_written = open(self.netDemandingJSONPath + 'SmallAreaNetDemanding/' + file_label + '.geojson','w')
                            geojson_written.write(geojson_file)
                            geojson_written.close() 
                            print('---GeoJSON written successfully: net Demanding for small areas---', file_label)
        
        return 

    """This method is to generate the JSON file for creating the visualisation of the net demanding of the regional areas"""
    def GeoJSONCreator_netDemandingForRegionalArea(self, demandingDataList, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList, ifSpecifiedResults:bool, specifiedConfigList:list):   
        ## check the storage path
        self.mkdirFilePath(self.netDemandingJSONPath, 'RegionalAreaNetDemanding/')    
        ## Determine the upper and lower bounds
        netDemanding = []
        for demanding_eachSMRDesign in demandingDataList:
            for demanding_eachCarbonTax in demanding_eachSMRDesign:
                for demanding_eachWeather in demanding_eachCarbonTax:
                    for demanding_eachWeight in demanding_eachWeather:
                        for demainding_eachsmallArea in demanding_eachWeight:
                            netDemanding.append(demainding_eachsmallArea['netDemanding']) 
        upperbound = round(float(max(netDemanding)), 2)
        lowerbound = round(float(min(netDemanding)), 2)

        ## Round the upper and lower bounds
        counter =  0
        while upperbound > 10:
            upperbound = upperbound / 10
            counter +=  1
        upperbound = math.ceil(upperbound) * (10**counter)

        counter =  0
        abs_lowerbound = abs(lowerbound)
        while abs_lowerbound > 10:
            abs_lowerbound = abs_lowerbound / 10
            counter +=  1
        abs_lowerbound = math.ceil(abs_lowerbound) * (10**counter)
        lowerbound = - abs_lowerbound

        if lowerbound >= 0 or upperbound <= 0:
            raise ValueError('Unusual lowerbound or upperbound. Lowerbound should be nagitive numbers and the upper bound should be positive.')

        ## create the colour bar legend
        createColourBarLegend(self.netDemandingJSONPath + 'RegionalAreaNetDemanding/', upperbound/1E3, lowerbound/1E3, 'Areas: Net energy demand (TWh/yr)', 'legend-netDemanding', 0, 11)

        weatherNameList = []
        for weather in weatherConditionList:
            weatherNameList.append(weather[2])
        
        if ifSpecifiedResults is True:
            if specifiedConfigList == [] or specifiedConfigList == [[]]:
                raise ValueError('specifiedConfigList should contain at list 1 non-empty list.')
            for cf in specifiedConfigList:
                if len(cf) < 3:
                    raise ValueError('The sub list of the specifiedConfigList should contain at least 3 elements specifying the SMR number, carbon tax and weather condition.')
                elif len(cf) == 3: ## SMR number, Carbon tax, weather condition 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2])
                    
                    specifiedDemandingList = demandingDataList[smrIndex][carbonTaxList][weatherIndex]

                    for i_weight, demanding_eachWeight in enumerate(specifiedDemandingList):
                            geojson_file = """
                            {
                                "type": "FeatureCollection",
                                "features": ["""
                            # iterating over features (rows in results array)
                            totalNetDemanding = 0
                            for demanding in demanding_eachWeight:
                                totalNetDemanding += float(demanding['netDemanding'])
                            for demanding in demanding_eachWeight:
                                boundary =  ast.literal_eval(geojson.dumps(mapping(demanding['regionalBoundery'])))
                                # creating point feature 
                                feature = """{
                                    "type": "Feature",
                                    "properties": {
                                    "regionalArea_LACode": "%s",
                                    "netDemanding": "%s",
                                    "Total netDemanding": "%s",
                                    "fill": "%s",
                                    "fill-opacity": 1,
                                    "stroke-width" : 0.2,
                                    "stroke-opacity" : 0.9
                                    },
                                    "geometry":  %s             
                                },"""%(demanding['regionalAreaCode'], round(float(demanding['netDemanding']), 2), round(totalNetDemanding, 2), sequentialHEXColourCodePicker(round(float(demanding['netDemanding']), 2), upperbound, lowerbound, 0, 11), str(boundary).replace("\'", "\""))         
                                # adding new line 
                                geojson_file += '\n'+feature   
                            # removing last comma as is last line
                            geojson_file = geojson_file[:-1]
                            # finishing file end 
                            end_geojson = """
                                ]
                            }
                            """
                            geojson_file += end_geojson
                            # saving as geoJSON
                            file_label = 'RegionalAreaNetDemanding_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                            geojson_written = open(self.netDemandingJSONPath + 'RegionalAreaNetDemanding/' + file_label + '.geojson','w')
                            geojson_written.write(geojson_file)
                            geojson_written.close() 
                            print('---GeoJSON written successfully: net Demanding for regional areas---', file_label)
                elif len(cf) == 4: ## SMR number, Carbon tax, weather condition, weight 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2]) 
                    if not cf[3] in self.weighterList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be weight.')
                    else:
                        weightIndex = self.weighterList.index(cf[3]) 
                    
                    specifiedDemandingList = demandingDataList[smrIndex][carbonTaxList][weatherIndex][weightIndex]

                    geojson_file = """
                    {
                        "type": "FeatureCollection",
                        "features": ["""
                    # iterating over features (rows in results array)
                    for demanding in specifiedDemandingList:
                        boundary =  ast.literal_eval(geojson.dumps(mapping(demanding ['regionalBoundery'])))
                        # creating point feature 
                        feature = """{
                            "type": "Feature",
                            "properties": {
                            "regionalArea_LACode": "%s",
                            "netDemanding": "%s",
                            "fill": "%s",
                            "fill-opacity": 1,
                            "stroke-width" : 0.2,
                            "stroke-opacity" : 0.9
                            },
                            "geometry":  %s             
                        },"""%(demanding['regionalAreaCode'], round(float(demanding['netDemanding']), 2), sequentialHEXColourCodePicker(round(float(demanding['netDemanding']), 2), upperbound, lowerbound, 0, 11), str(boundary).replace("\'", "\""))         
                        # adding new line 
                        geojson_file += '\n'+feature   
                    # removing last comma as is last line
                    geojson_file = geojson_file[:-1]
                    # finishing file end 
                    end_geojson = """
                        ]
                    }
                    """
                    geojson_file += end_geojson
                    # saving as geoJSON
                    file_label = 'RegionalAreaNetDemanding_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(round(cf[3], 2)) + ')'
                    geojson_written = open(self.netDemandingJSONPath + 'RegionalAreaNetDemanding/' + file_label + '.geojson','w')
                    geojson_written.write(geojson_file)
                    geojson_written.close() 
                    print('---GeoJSON written successfully: net Demanding for regional areas---', file_label)
                else:
                    raise ValueError('Invailed sub list of the specifiedConfigList.')
        else: 
            for i_smr, demanding_eachSMRDesign in enumerate(demandingDataList):
                for i_carbontax, demanding_eachCarbonTax in enumerate(demanding_eachSMRDesign):
                    for i_weather, demanding_eachWeather in enumerate(demanding_eachCarbonTax):
                        for i_weight, demanding_eachWeight in enumerate(demanding_eachWeather):
                            geojson_file = """
                            {
                                "type": "FeatureCollection",
                                "features": ["""
                            # iterating over features (rows in results array)
                            for demanding in demanding_eachWeight:
                                boundary =  ast.literal_eval(geojson.dumps(mapping(demanding ['regionalBoundery'])))
                                # creating point feature 
                                feature = """{
                                    "type": "Feature",
                                    "properties": {
                                    "regionalArea_LACode": "%s",
                                    "netDemanding": "%s",
                                    "fill": "%s",
                                    "fill-opacity": 1,
                                    "stroke-width" : 0.2,
                                    "stroke-opacity" : 0.9
                                    },
                                    "geometry":  %s             
                                },"""%(demanding['regionalAreaCode'], round(float(demanding['netDemanding']), 2), sequentialHEXColourCodePicker(round(float(demanding['netDemanding']), 2), upperbound, lowerbound, 0, 11), str(boundary).replace("\'", "\""))         
                                # adding new line 
                                geojson_file += '\n'+feature   
                            # removing last comma as is last line
                            geojson_file = geojson_file[:-1]
                            # finishing file end 
                            end_geojson = """
                                ]
                            }
                            """
                            geojson_file += end_geojson
                            # saving as geoJSON
                            file_label = 'RegionalAreaNetDemanding_(SMR_' + str(NumberOfSMRUnitList[i_smr]) + '_CarbonTax_' + str(CarbonTaxForOPFList[i_carbontax]) + '_weatherCondition_' + str(weatherConditionList[i_weather][2]) + '_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                            geojson_written = open(self.netDemandingJSONPath + 'RegionalAreaNetDemanding/' + file_label + '.geojson','w')
                            geojson_written.write(geojson_file)
                            geojson_written.close() 
                            print('---GeoJSON written successfully: net Demanding for regional areas---', file_label)
        
        return 
 
    """This method is to generate the visulisation GeoJSON file of the branch transmission loss"""
    def GeoJSONCreator_branchGrid(self, branchData, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList, ifSpecifiedResults:bool, specifiedConfigList:list):
        ## check the storage path
        self.mkdirFilePath(self.branchLossJSONPath, str(self.numOfBus) + '/')
        ## Determine the upper and lower bounds
        loss = []
        for loss_eachSMRDesign in branchData:
            for loss_eachCarbonTax in loss_eachSMRDesign:
                for loss_eachWeather in loss_eachCarbonTax:
                    for loss_eachWeight in loss_eachWeather:
                        for loss_branch in loss_eachWeight:
                            loss.append(loss_branch['loss'])
        upperbound = round(float(max(loss)), 2)
        lowerbound = 0

        counter =  0
        while upperbound > 10:
            upperbound = upperbound / 10
            counter +=  1
        upperbound = math.ceil(upperbound) * (10**counter)

        if lowerbound < 0:
            raise ValueError('Unusual lowerbound. Lowerbound should be non-nagitive numbers.')

        ## create the colour bar legend
        createColourBarLegend(self.branchLossJSONPath + str(self.numOfBus) + '/', upperbound, lowerbound, 'Lines: Transmission power loss (MW)', 'legend-transmissionLoss', None, 8)

        ## weather list 
        weatherNameList = []
        for weather in weatherConditionList:
            weatherNameList.append(weather[2])

        ## busGPSLocation = query_model.queryBusGPSLocation(self.topologyNodeIRI, self.queryUKDigitalTwinEndpointLabel) ## ?BusNodeIRI ?BusLatLon ?GenerationLinkedToBusNode
        
        if ifSpecifiedResults is True:
            if specifiedConfigList == [] or specifiedConfigList == [[]]:
                raise ValueError('specifiedConfigList should contain at list 1 non-empty list.')
            for cf in specifiedConfigList:
                if len(cf) < 3:
                    raise ValueError('The sub list of the specifiedConfigList should contain at least 3 elements specifying the SMR number, carbon tax and weather condition.')
                elif len(cf) == 3: ## SMR number, Carbon tax, weather condition 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2])
                    
                    specifiedbranchData = branchData[smrIndex][carbonTaxList][weatherIndex]

                    for i_weight, branchData_eachWeight in enumerate(specifiedbranchData):
                        geojson_file = """
                        {
                            "type": "FeatureCollection",
                            "features": ["""
                        # iterating over features (rows in results array)
                        totalLost = 0
                        for bd in branchData_eachWeight:
                            totalLost += float(bd['loss'])
                        for bd in branchData_eachWeight:             
                            # creating point feature 
                            feature = """{
                                "type": "Feature", 
                                "properties": {
                                "Name": "%s",
                                "Loss": "%s",
                                "Total Loss": "%s",
                                "stroke": "%s",
                                "stroke-width" : 3,
                                "stroke-opacity" : 0.9
                                },
                                "geometry": {
                                    "type": "LineString",
                                    "coordinates": [[%s, %s], 
                                                    [%s, %s]]
                                    }            
                            },"""%(bd['BranchNodeIRI'], round(float(bd['loss']), 2), round(totalLost, 2), sequentialHEXColourCodePicker(round(float(bd['loss']), 2), upperbound, lowerbound, None, 8), bd['FromBusLocation'][1], bd['FromBusLocation'][0], bd['ToBusLocation'][1], bd['ToBusLocation'][0])         
                            # adding new line 
                            geojson_file += '\n'+feature   
                        # removing last comma as is last line
                        geojson_file = geojson_file[:-1]
                        # finishing file end 
                        end_geojson = """
                            ]
                        }
                        """
                        geojson_file += end_geojson
                        # saving as geoJSON
                        file_label = 'BranchGrid_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                        geojson_written = open(self.branchLossJSONPath + str(self.numOfBus) + '/' + file_label + '.geojson','w')
                        geojson_written.write(geojson_file)
                        geojson_written.close() 
                        print('---GeoJSON written successfully: GeoJSONCreator_branchGrid---', file_label)
                elif len(cf) == 4: ## SMR number, Carbon tax, weather condition, weight 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2]) 
                    if not cf[3] in self.weighterList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be weight.')
                    else:
                        weightIndex = self.weighterList.index(cf[3]) 
                    
                    specifiedbranchData = branchData[smrIndex][carbonTaxList][weatherIndex][weightIndex]
                    
                    geojson_file = """
                    {
                        "type": "FeatureCollection",
                        "features": ["""
                    totalLost = 0
                    for bd in specifiedbranchData:
                        totalLost += float(bd['loss'])
                    # iterating over features (rows in results array)
                    for bd in specifiedbranchData:
                        # creating point feature 
                        feature = """{
                            "type": "Feature",
                            "properties": {
                            "Name": "%s",
                            "Loss": "%s",
                            "Total Loss": "%s",
                            "stroke": "%s",
                            "stroke-width" : 3,
                            "stroke-opacity" : 0.9
                            },
                            "geometry": {
                                "type": "LineString",
                                "coordinates": [[%s, %s], 
                                                [%s, %s]] 
                                }            
                        },"""%(bd['BranchNodeIRI'], round(float(bd['loss']), 2), round(totalLost, 2), sequentialHEXColourCodePicker(round(float(bd['loss']), 2), upperbound, lowerbound, None, 8), bd['FromBusLocation'][1], bd['FromBusLocation'][0], bd['ToBusLocation'][1], bd['ToBusLocation'][0])        
                        # adding new line 
                        geojson_file += '\n'+feature   
                    # removing last comma as is last line
                    geojson_file = geojson_file[:-1]
                    # finishing file end 
                    end_geojson = """
                        ]
                    }
                    """
                    geojson_file += end_geojson
                    # saving as geoJSON
                    file_label = 'BranchGrid_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(round(cf[3], 2)) + ')'
                    geojson_written = open(self.branchLossJSONPath + str(self.numOfBus) + '/' + file_label + '.geojson','w')
                    geojson_written.write(geojson_file)
                    geojson_written.close() 
                    print('---GeoJSON written successfully: GeoJSONCreator_branchGrid---', file_label)
                else:
                    raise ValueError('Invailed sub list of the specifiedConfigList.')
        else: 
            for i_smr, branchData_eachSMRDesign in enumerate(branchData):
                for i_carbontax, branchData_eachCarbonTax in enumerate(branchData_eachSMRDesign):
                    for i_weather, branchData_eachWeather in enumerate(branchData_eachCarbonTax):
                        for i_weight, branchData_eachWeight in enumerate(branchData_eachWeather):
                            geojson_file = """
                            {
                                "type": "FeatureCollection",
                                "features": ["""
                            totalLost = 0
                            for bd in branchData_eachWeight:
                                totalLost += float(bd['loss'])
                            # iterating over features (rows in results array)
                            for bd in branchData_eachWeight:
                                # creating point feature 
                                feature = """{
                                    "type": "Feature",
                                    "properties": {
                                    "Name": "%s",
                                    "Loss": "%s",
                                    "Total Loss": "%s",
                                    "stroke": "%s",
                                    "stroke-width" : 3,
                                    "stroke-opacity" : 0.9
                                    },
                                    "geometry": {
                                        "type": "LineString",
                                        "coordinates": [[%s, %s], 
                                                        [%s, %s]]
                                        }            
                                },"""%(bd['BranchNodeIRI'], round(float(bd['loss']), 2),  round(totalLost, 2), sequentialHEXColourCodePicker(round(float(bd['loss']), 2), upperbound, lowerbound, None, 8), bd['FromBusLocation'][1], bd['FromBusLocation'][0], bd['ToBusLocation'][1], bd['ToBusLocation'][0])  
                                # adding new line 
                                geojson_file += '\n'+feature   
                            # removing last comma as is last line
                            geojson_file = geojson_file[:-1]
                            # finishing file end 
                            end_geojson = """
                                ]
                            }
                            """
                            geojson_file += end_geojson
                            # saving as geoJSON
                            file_label = 'BranchGrid_(SMR_' + str(NumberOfSMRUnitList[i_smr]) + '_CarbonTax_' + str(CarbonTaxForOPFList[i_carbontax]) + '_weatherCondition_' + str(weatherConditionList[i_weather][2]) + '_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                            geojson_written = open(self.branchLossJSONPath + str(self.numOfBus) + '/' + file_label + '.geojson','w')
                            geojson_written.write(geojson_file)
                            geojson_written.close() 
                            print('---GeoJSON written successfully: GeoJSONCreator_branchGrid---', file_label)
        return 
     
    """This method is to generate the pie chart for regional energy breakdown"""
    def EnergySupplyBreakDownPieChartCreator_RegionalAreas(self, energyBreakdownList, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList, ifSpecifiedResults:bool, specifiedConfigList:list):            
        weatherNameList = []
        for weather in weatherConditionList:
            weatherNameList.append(weather[2])
        
        if ifSpecifiedResults is True:
            if specifiedConfigList == [] or specifiedConfigList == [[]]:
                raise ValueError('specifiedConfigList should contain at list 1 non-empty list.')
            for cf in specifiedConfigList:
                if len(cf) < 3:
                    raise ValueError('The sub list of the specifiedConfigList should contain at least 3 elements specifying the SMR number, carbon tax and weather condition.')
                elif len(cf) == 3: ## SMR number, Carbon tax, weather condition 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2])
                    
                    specifiedEnergyBreakdownList = energyBreakdownList[smrIndex][carbonTaxList][weatherIndex]
                    
                    genLabel_shortList = ['Renewable', 'Fossil fuels', 'Nuclear', 'Others'] ## specified short list of the gen type label 

                    for i_weight, energyBreakdown_eachWeight in enumerate(specifiedEnergyBreakdownList):
                        ## check the storage path
                        subPath = 'SMR_'+ str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(self.weighterList[i_weight])
                        self.mkdirFilePath(self.pieChartPath, 'RegionalAreaEnergyBreakdown/' + subPath + '/')

                        for energyBreakdown_eachRegion in energyBreakdown_eachWeight:
                            ## eliminate the zero items for the long list
                            energyBreakdown_longList_withoutZero = []
                            genLabel_longList_withoutZero = []
                            for eb_i, eb in enumerate(energyBreakdown_eachRegion['percentageBreakdown']):
                                if int(eb) != 0:
                                    energyBreakdown_longList_withoutZero.append(eb)
                                    genLabel_longList_withoutZero.append(energyBreakdown_eachRegion['genTypeLabel'][eb_i])
                            if int(sum(energyBreakdown_longList_withoutZero)) < 100: # and energyBreakdown_eachRegion['outputBreakdown'][-1] > 0:
                                if 'Others' not in genLabel_longList_withoutZero:
                                    energyBreakdown_longList_withoutZero.append(100 - sum(energyBreakdown_longList_withoutZero))
                                    genLabel_longList_withoutZero.append('Others')
                                else:
                                    index_others = genLabel_longList_withoutZero.index('Others')
                                    energyBreakdown_longList_withoutZero[index_others] += 100 - sum(energyBreakdown_longList_withoutZero)

                            ## convert the nuclear type into the Conventional Nuclear
                            if 'Nuclear' in genLabel_longList_withoutZero:
                                i_Nuclear = genLabel_longList_withoutZero.index('Nuclear')
                                genLabel_longList_withoutZero[i_Nuclear] = 'Conventional Nuclear'

                            if 'NaturalGas' in genLabel_longList_withoutZero:
                                i_NaturalGas = genLabel_longList_withoutZero.index('NaturalGas')
                                genLabel_longList_withoutZero[i_NaturalGas] = 'Natural Gas'

                            ## populate the short list of the energy breakdown
                            energyBreakdown_shortList = [0, 0, 0, 0]
                            for gl_i, gl in enumerate(genLabel_longList_withoutZero):
                                if gl in ['Solar', 'Wind', 'Hydro']: 
                                    energyBreakdown_shortList[0] += energyBreakdown_longList_withoutZero[gl_i]
                                elif gl in ['Oil', 'Natural Gas', 'Coal']:
                                    energyBreakdown_shortList[1] += energyBreakdown_longList_withoutZero[gl_i]
                                elif gl in ['Conventional Nuclear', 'SMR']:
                                    energyBreakdown_shortList[2] += energyBreakdown_longList_withoutZero[gl_i]
                                else:
                                    energyBreakdown_shortList[3] += energyBreakdown_longList_withoutZero[gl_i]

                            ## eliminate the zero items for the short list
                            energyBreakdown_shortList_withoutZero = [] 
                            genLabel_shortList_withoutZero = []
                            for ebs_i, ebs in enumerate(energyBreakdown_shortList):
                                if int(ebs) != 0:
                                    energyBreakdown_shortList_withoutZero.append(ebs)
                                    genLabel_shortList_withoutZero.append(genLabel_shortList[ebs_i])
                            
                            ## rearrange the energyBreakdown_longList
                            energyBreakdown_longList_withoutZero_rearrange = []
                            genLabel_longList_withoutZero_rearrange = []
                            colour_longList = [] ## colour list for long list 
                            if 'Wind' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('Wind')
                                i_label = genLabel_longList_withoutZero.index('Wind')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#00A5B5") # colour_longList.append("#13bef2")
                            if 'Solar' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('Solar')
                                i_label = genLabel_longList_withoutZero.index('Solar')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#F39530") # colour_longList.append("#ffcc33")
                            if 'Natural Gas' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('Natural Gas')
                                i_label = genLabel_longList_withoutZero.index('Natural Gas')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#98AFBA") # colour_longList.append("#99A3A4")
                            if 'Coal' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('Coal')
                                i_label = genLabel_longList_withoutZero.index('Coal')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#344A53") # colour_longList.append("#361b20")
                            if 'Oil' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('Oil')
                                i_label = genLabel_longList_withoutZero.index('Oil')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#6B441D") # colour_longList.append("#1B2631") 
                            if 'Conventional Nuclear' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('Conventional Nuclear')
                                i_label = genLabel_longList_withoutZero.index('Conventional Nuclear')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#97CF88") # colour_longList.append("#cc3300")
                            if 'SMR' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('SMR')
                                i_label = genLabel_longList_withoutZero.index('SMR')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#006E4E") # colour_longList.append("#1e8700")
                            if 'Others' in genLabel_longList_withoutZero:
                                genLabel_longList_withoutZero_rearrange.append('Others')
                                i_label = genLabel_longList_withoutZero.index('Others')
                                energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                colour_longList.append("#9D6D9D") # colour_longList.append("#AFED8F")

                            ## colour for short list 
                            colour_shortList = []
                            if 'Renewable' in genLabel_shortList_withoutZero:
                                colour_shortList.append("#6fb6eb")
                            if 'Fossil fuels' in genLabel_shortList_withoutZero:
                                colour_shortList.append("#5F676E")
                            if 'Nuclear' in genLabel_shortList_withoutZero:
                                colour_shortList.append("#6e996f")
                            if 'Others' in genLabel_shortList_withoutZero:
                                colour_shortList.append("#2d37bc")

                            ## Create pie chart
                            plt.pie(energyBreakdown_longList_withoutZero_rearrange, colors = colour_longList, startangle=90, frame=True) ##labels=genLabel_longList_withoutZero_rearrange, autopct='%1.1f%%',
                            plt.axis('off')
                            plt.tight_layout()
                            file_label = 'RegionalEnergyBreakdown_PieChart_' + energyBreakdown_eachRegion['RegionalLACode'] + '.png' 
                            plt.savefig(self.pieChartPath + 'RegionalAreaEnergyBreakdown/' + subPath + '/' + file_label, dpi = 1200, bbox_inches='tight', transparent=True)
                            plt.clf()
                            plt.cla()
                        
                        overlay_image_folderPath = self.pieChartPath + 'RegionalAreaEnergyBreakdown/' + subPath + '/' 
                        energyBreakdownOverlayerFactory(base_image_path, overlay_image_folderPath, arrow_image_path, legend_path)
                            
                elif len(cf) == 4: ## SMR number, Carbon tax, weather condition, weight 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2]) 
                    if not cf[3] in self.weighterList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be weight.')
                    else:
                        weightIndex = self.weighterList.index(cf[3]) 
                    
                    specifiedEnergyBreakdownList = energyBreakdownList[smrIndex][carbonTaxList][weatherIndex][weightIndex]
                    
                    genLabel_shortList = ['Renewable', 'Fossil fuels', 'Nuclear', 'Others'] ## specified short list of the gen type label 
                    
                    ## check the storage path
                    subPath = 'SMR_'+ str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(round(cf[3], 2)) 
                    self.mkdirFilePath(self.pieChartPath, 'RegionalAreaEnergyBreakdown/' + subPath + '/')

                    for energyBreakdown_eachRegion in specifiedEnergyBreakdownList:
                        ## eliminate the zero items for the long list
                        energyBreakdown_longList_withoutZero = []
                        genLabel_longList_withoutZero = []
                        for eb_i, eb in enumerate(energyBreakdown_eachRegion['percentageBreakdown']):
                            if int(eb) != 0:
                                energyBreakdown_longList_withoutZero.append(eb)
                                genLabel_longList_withoutZero.append(energyBreakdown_eachRegion['genTypeLabel'][eb_i])
                        if int(sum(energyBreakdown_longList_withoutZero)) < 100: # and energyBreakdown_eachRegion['outputBreakdown'][-1] > 0:
                            if 'Others' not in genLabel_longList_withoutZero:
                                energyBreakdown_longList_withoutZero.append(100 - sum(energyBreakdown_longList_withoutZero))
                                genLabel_longList_withoutZero.append('Others')
                            else:
                                index_others = genLabel_longList_withoutZero.index('Others')
                                energyBreakdown_longList_withoutZero[index_others] += 100 - sum(energyBreakdown_longList_withoutZero)

                        ## convert the nuclear type into the Conventional Nuclear
                        if 'Nuclear' in genLabel_longList_withoutZero:
                            i_Nuclear = genLabel_longList_withoutZero.index('Nuclear')
                            genLabel_longList_withoutZero[i_Nuclear] = 'Conventional Nuclear'

                        if 'NaturalGas' in genLabel_longList_withoutZero:
                                i_NaturalGas = genLabel_longList_withoutZero.index('NaturalGas')
                                genLabel_longList_withoutZero[i_NaturalGas] = 'Natural Gas'

                        ## populate the short list of the energy breakdown
                        energyBreakdown_shortList = [0, 0, 0, 0]
                        for gl_i, gl in enumerate(genLabel_longList_withoutZero):
                            if gl in ['Solar', 'Wind', 'Hydro']: 
                                energyBreakdown_shortList[0] += energyBreakdown_longList_withoutZero[gl_i]
                            elif gl in ['Oil', 'Natural Gas', 'Coal']:
                                energyBreakdown_shortList[1] += energyBreakdown_longList_withoutZero[gl_i]
                            elif gl in ['Conventional Nuclear', 'SMR']:
                                energyBreakdown_shortList[2] += energyBreakdown_longList_withoutZero[gl_i]
                            else:
                                energyBreakdown_shortList[3] += energyBreakdown_longList_withoutZero[gl_i]

                        ## eliminate the zero items for the short list
                        energyBreakdown_shortList_withoutZero = [] 
                        genLabel_shortList_withoutZero = []
                        for ebs_i, ebs in enumerate(energyBreakdown_shortList):
                            if int(ebs) != 0:
                                energyBreakdown_shortList_withoutZero.append(ebs)
                                genLabel_shortList_withoutZero.append(genLabel_shortList[ebs_i])

                        ## rearrange the energyBreakdown_longList
                        energyBreakdown_longList_withoutZero_rearrange = []
                        genLabel_longList_withoutZero_rearrange = []
                        colour_longList = [] ## colour list for long list 
                        if 'Wind' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('Wind')
                            i_label = genLabel_longList_withoutZero.index('Wind')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#00A5B5") # colour_longList.append("#13bef2")
                        if 'Solar' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('Solar')
                            i_label = genLabel_longList_withoutZero.index('Solar')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#F39530") # colour_longList.append("#ffcc33")
                        if 'Natural Gas' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('Natural Gas')
                            i_label = genLabel_longList_withoutZero.index('Natural Gas')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#98AFBA") # colour_longList.append("#99A3A4")
                        if 'Coal' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('Coal')
                            i_label = genLabel_longList_withoutZero.index('Coal')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#344A53") # colour_longList.append("#361b20")
                        if 'Oil' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('Oil')
                            i_label = genLabel_longList_withoutZero.index('Oil')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#6B441D") # colour_longList.append("#1B2631") 
                        if 'Conventional Nuclear' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('Conventional Nuclear')
                            i_label = genLabel_longList_withoutZero.index('Conventional Nuclear')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#97CF88") # colour_longList.append("#cc3300")
                        if 'SMR' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('SMR')
                            i_label = genLabel_longList_withoutZero.index('SMR')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#006E4E") # colour_longList.append("#1e8700")
                        if 'Others' in genLabel_longList_withoutZero:
                            genLabel_longList_withoutZero_rearrange.append('Others')
                            i_label = genLabel_longList_withoutZero.index('Others')
                            energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                            colour_longList.append("#9D6D9D") # colour_longList.append("#AFED8F")
                        
                        ## colour for short list 
                        colour_shortList = []
                        if 'Renewable' in genLabel_shortList_withoutZero:
                            colour_shortList.append("#6fb6eb")
                        if 'Fossil fuels' in genLabel_shortList_withoutZero:
                            colour_shortList.append("#5F676E")
                        if 'Nuclear' in genLabel_shortList_withoutZero:
                            colour_shortList.append("#6e996f")
                        if 'Others' in genLabel_shortList_withoutZero:
                            colour_shortList.append("#2d37bc")
                        ## Create pie chart
                        plt.pie(energyBreakdown_longList_withoutZero_rearrange, colors = colour_longList, startangle=90, frame=True)
                        plt.axis('off')
                        plt.tight_layout()
                        file_label = 'RegionalEnergyBreakdown_PieChart_' + energyBreakdown_eachRegion['RegionalLACode'] + '.png'                        
                        plt.savefig(self.pieChartPath + 'RegionalAreaEnergyBreakdown/' + subPath + '/' + file_label, dpi = 1200, bbox_inches='tight')
                        plt.clf()
                        plt.cla()                                

                    overlay_image_folderPath = self.pieChartPath + 'RegionalAreaEnergyBreakdown/' + subPath + '/' 
                    energyBreakdownOverlayerFactory(base_image_path, overlay_image_folderPath, arrow_image_path, legend_path)
                
                else:
                    raise ValueError('Invailed sub list of the specifiedConfigList.')
        else:
            for i_smr, energyBreakdown_eachSMRDesign in enumerate(energyBreakdownList):
                for i_carbontax, energyBreakdown_eachCarbonTax in enumerate(energyBreakdown_eachSMRDesign):
                    for i_weather, energyBreakdown_eachWeather in enumerate(energyBreakdown_eachCarbonTax):
                        for i_weight, energyBreakdown_eachWeight in enumerate(energyBreakdown_eachWeather):
                            ## check the storage path
                            subPath = 'SMR_'+ str(NumberOfSMRUnitList[i_smr]) + '_CarbonTax_' + str(CarbonTaxForOPFList[i_carbontax]) + '_weatherCondition_' + str(weatherConditionList[i_weather][2]) + '_weight_' + str(round(self.weighterList[i_weight], 2))                        
                            self.mkdirFilePath(self.pieChartPath, 'RegionalAreaEnergyBreakdown/' + subPath + '/') 
                            for energyBreakdown_eachRegion in energyBreakdown_eachWeight:
                                ## eliminate the zero items for the long list
                                energyBreakdown_longList_withoutZero = []
                                genLabel_longList_withoutZero = []
                                for eb_i, eb in enumerate(energyBreakdown_eachRegion['percentageBreakdown']):
                                    if int(eb) != 0:
                                        energyBreakdown_longList_withoutZero.append(eb)
                                        genLabel_longList_withoutZero.append(energyBreakdown_eachRegion['genTypeLabel'][eb_i])
                                    
                                if int(sum(energyBreakdown_longList_withoutZero)) < 100: # and energyBreakdown_eachRegion['outputBreakdown'][-1] > 0:
                                    if 'Others' not in genLabel_longList_withoutZero:
                                        energyBreakdown_longList_withoutZero.append(100 - sum(energyBreakdown_longList_withoutZero))
                                        genLabel_longList_withoutZero.append('Others')
                                    else:
                                        index_others = genLabel_longList_withoutZero.index('Others')
                                        energyBreakdown_longList_withoutZero[index_others] += 100 - sum(energyBreakdown_longList_withoutZero)

                                ## convert the nuclear type into the Conventional Nuclear
                                if 'Nuclear' in genLabel_longList_withoutZero:
                                    i_Nuclear = genLabel_longList_withoutZero.index('Nuclear')
                                    genLabel_longList_withoutZero[i_Nuclear] = 'Conventional Nuclear'

                                if 'NaturalGas' in genLabel_longList_withoutZero:
                                    i_NaturalGas = genLabel_longList_withoutZero.index('NaturalGas')
                                    genLabel_longList_withoutZero[i_NaturalGas] = 'Natural Gas'

                                ## populate the short list of the energy breakdown
                                energyBreakdown_shortList = [0, 0, 0, 0]
                                for gl_i, gl in enumerate(genLabel_longList_withoutZero):
                                    if gl in ['Solar', 'Wind', 'Hydro']: 
                                        energyBreakdown_shortList[0] += energyBreakdown_longList_withoutZero[gl_i]
                                    elif gl in ['Oil', 'Natural Gas', 'Coal']:
                                        energyBreakdown_shortList[1] += energyBreakdown_longList_withoutZero[gl_i]
                                    elif gl in ['Conventional Nuclear', 'SMR']:
                                        energyBreakdown_shortList[2] += energyBreakdown_longList_withoutZero[gl_i]
                                    else:
                                        energyBreakdown_shortList[3] += energyBreakdown_longList_withoutZero[gl_i]

                                ## eliminate the zero items for the short list
                                energyBreakdown_shortList_withoutZero = [] 
                                genLabel_shortList_withoutZero = []
                                for ebs_i, ebs in enumerate(energyBreakdown_shortList):
                                    if int(ebs) != 0:
                                        energyBreakdown_shortList_withoutZero.append(ebs)
                                        genLabel_shortList_withoutZero.append(genLabel_shortList[ebs_i])
                                
                                ## rearrange the energyBreakdown_longList
                                energyBreakdown_longList_withoutZero_rearrange = []
                                genLabel_longList_withoutZero_rearrange = []
                                colour_longList = [] ## colour list for long list 
                                if 'Wind' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('Wind')
                                    i_label = genLabel_longList_withoutZero.index('Wind')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#00A5B5") # colour_longList.append("#13bef2")
                                if 'Solar' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('Solar')
                                    i_label = genLabel_longList_withoutZero.index('Solar')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#F39530") # colour_longList.append("#ffcc33")
                                if 'Natural Gas' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('Natural Gas')
                                    i_label = genLabel_longList_withoutZero.index('Natural Gas')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#98AFBA") # colour_longList.append("#99A3A4")
                                if 'Coal' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('Coal')
                                    i_label = genLabel_longList_withoutZero.index('Coal')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#344A53") # colour_longList.append("#361b20")
                                if 'Oil' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('Oil')
                                    i_label = genLabel_longList_withoutZero.index('Oil')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#6B441D") # colour_longList.append("#1B2631") 
                                if 'Conventional Nuclear' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('Conventional Nuclear')
                                    i_label = genLabel_longList_withoutZero.index('Conventional Nuclear')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#97CF88") # colour_longList.append("#cc3300")
                                if 'SMR' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('SMR')
                                    i_label = genLabel_longList_withoutZero.index('SMR')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#006E4E") # colour_longList.append("#1e8700")
                                if 'Others' in genLabel_longList_withoutZero:
                                    genLabel_longList_withoutZero_rearrange.append('Others')
                                    i_label = genLabel_longList_withoutZero.index('Others')
                                    energyBreakdown_longList_withoutZero_rearrange.append(energyBreakdown_longList_withoutZero[i_label])
                                    colour_longList.append("#9D6D9D") # colour_longList.append("#AFED8F")
                                
                                ## colour for short list 
                                colour_shortList = []
                                if 'Renewable' in genLabel_shortList_withoutZero:
                                    colour_shortList.append("#6fb6eb")
                                if 'Fossil fuels' in genLabel_shortList_withoutZero:
                                    colour_shortList.append("#5F676E")
                                if 'Nuclear' in genLabel_shortList_withoutZero:
                                    colour_shortList.append("#6e996f")
                                if 'Others' in genLabel_shortList_withoutZero:
                                    colour_shortList.append("#2d37bc")

                                ## Create pie chart
                                plt.pie(energyBreakdown_longList_withoutZero_rearrange, colors = colour_longList, startangle=90, frame=True) ##labels=genLabel_longList_withoutZero_rearrange, autopct='%1.1f%%',
                                plt.axis('off')
                                plt.tight_layout()
                                file_label = 'RegionalEnergyBreakdown_PieChart_' + energyBreakdown_eachRegion['RegionalLACode']+ '.png' 
                                plt.savefig(self.pieChartPath + 'RegionalAreaEnergyBreakdown/' + subPath + '/' + file_label, dpi = 1200, bbox_inches='tight')
                                plt.clf()
                                plt.cla()   
                            overlay_image_folderPath = self.pieChartPath + 'RegionalAreaEnergyBreakdown/' + subPath + '/' 
                            energyBreakdownOverlayerFactory(base_image_path, overlay_image_folderPath, arrow_image_path, legend_path)                       
        return 

    """This method is to generate the GeoJSON files demonstrate total energy output of each region"""
    def GeoJSONCreator_totalOutputOfRegionalAreas(self, energyBreakdownList, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList, ifSpecifiedResults:bool, specifiedConfigList:list):
        ## check the storage path
        self.mkdirFilePath(self.regionalOutputJSONPath, str(self.numOfBus) + '/')
        ## Determine the upper and lower bounds
        regionalTotalOutputList = []
        for energyBreakdown_eachSMRDesign in energyBreakdownList:
            for energyBreakdown_eachCarbonTax in energyBreakdown_eachSMRDesign:
                for energyBreakdown_eachWeather in energyBreakdown_eachCarbonTax:
                    for energyBreakdown_eachWeight in energyBreakdown_eachWeather:
                        nationalTotalGeneration = 0
                        for energyBreakdown_eachRegion in energyBreakdown_eachWeight:
                            regionalTotalOutput = 0
                            for output in energyBreakdown_eachRegion['outputBreakdown']:
                                regionalTotalOutput += float(output) 
                            energyBreakdown_eachRegion['totalOutput'] = round(regionalTotalOutput,2)
                            nationalTotalGeneration += regionalTotalOutput
                            regionalTotalOutputList.append(regionalTotalOutput)

        upperbound = round(float(max(regionalTotalOutputList)), 2)
        lowerbound = 0

        counter =  0
        while upperbound > 10:
            upperbound = upperbound / 10
            counter +=  1
        upperbound = math.ceil(upperbound) * (10**counter)

        ## create the colour bar legend
        createColourBarLegend(self.regionalOutputJSONPath + str(self.numOfBus) + '/', upperbound/1E3, lowerbound/1E3, 'Total output (GW)', 'legend-regionalTotalOutput', None, 7)
 
        weatherNameList = []
        for weather in weatherConditionList:
            weatherNameList.append(weather[2])

        if ifSpecifiedResults is True:
            if specifiedConfigList == [] or specifiedConfigList == [[]]:
                raise ValueError('specifiedConfigList should contain at list 1 non-empty list.')
            for cf in specifiedConfigList:
                if len(cf) < 3:
                    raise ValueError('The sub list of the specifiedConfigList should contain at least 3 elements specifying the SMR number, carbon tax and weather condition.')
                elif len(cf) == 3: ## SMR number, Carbon tax, weather condition 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2])
                    
                    specifiedEnergyBreakdownList = energyBreakdownList[smrIndex][carbonTaxList][weatherIndex]

                    for i_weight, energyBreakdown_eachWeight in enumerate(specifiedEnergyBreakdownList):                     
                        geojson_file = """
                        {
                            "type": "FeatureCollection",
                            "features": ["""
                        # iterating over features (rows in results array)
                        for energyBreakdown_eachRegion in energyBreakdown_eachWeight:
                            boundary =  ast.literal_eval(geojson.dumps(mapping(energyBreakdown_eachRegion['regionalAreaBoundary'])))
                            ## Total energy generation
                            regionalTotalOutput = 0
                            for output in energyBreakdown_eachRegion['outputBreakdown']:
                                regionalTotalOutput += float(output)
                            regionalTotalOutput = round(regionalTotalOutput)
                            feature = """{
                                "type": "Feature",
                                "properties": {
                                "regionalLACode": "%s",
                                "totalOutput": %s,
                                "color": "%s",
                                "fill": "%s",
                                "fill-opacity": 1,
                                "stroke-width" : 0.2,
                                "stroke-opacity" : 0.7
                                },
                                "geometry":  %s             
                            },"""%(energyBreakdown_eachRegion['RegionalLACode'], regionalTotalOutput, 
                            sequentialHEXColourCodePicker(regionalTotalOutput, upperbound, lowerbound, None, 7), 
                            sequentialHEXColourCodePicker(regionalTotalOutput, upperbound, lowerbound, None, 7), 
                            str(boundary).replace("\'", "\""))         
                            # adding new line 
                            geojson_file += '\n' + feature
                            
                        geojson_file = geojson_file[:-1]
                        # finishing file end 
                        end_geojson = """
                            ]
                        }
                        """
                        geojson_file += end_geojson
                        # saving as geoJSON
                        file_label = 'TotalOutputForRegionalArea_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) +'_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                        geojson_written = open(self.regionalOutputJSONPath + str(self.numOfBus) + '/' + file_label + '.geojson','w')
                        geojson_written.write(geojson_file)
                        geojson_written.close() 
                        print('---GeoJSON written successfully: total output of regional area---', file_label)                                        
                elif len(cf) == 4: ## SMR number, Carbon tax, weather condition, weight 
                    if not cf[0] in NumberOfSMRUnitList:
                        raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                    else:
                        smrIndex = NumberOfSMRUnitList.index(cf[0])
                    if not cf[1] in CarbonTaxForOPFList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                    else:
                        carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                    if not cf[2] in weatherNameList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                    else:
                        weatherIndex = weatherNameList.index(cf[2]) 
                    if not cf[3] in self.weighterList:
                        raise ValueError('The second element of the sub list of the specifiedConfigList should be weight.')
                    else:
                        weightIndex = self.weighterList.index(cf[3]) 
                    
                    specifiedEnergyBreakdownList = energyBreakdownList[smrIndex][carbonTaxList][weatherIndex][weightIndex]
                    
                    geojson_file = """
                    {
                        "type": "FeatureCollection",
                        "features": ["""
                    # iterating over features (rows in results array)
                    for energyBreakdown_eachRegion in specifiedEnergyBreakdownList:
                        boundary =  ast.literal_eval(geojson.dumps(mapping(energyBreakdown_eachRegion['regionalAreaBoundary'])))
                        ## Total energy generation
                        regionalTotalOutput = 0
                        for output in energyBreakdown_eachRegion['outputBreakdown']:
                            regionalTotalOutput += float(output)
                        regionalTotalOutput = round(regionalTotalOutput)
                        feature = """{
                            "type": "Feature",
                            "properties": {
                            "regionalLACode": "%s",
                            "totalOutput": %s,
                            "color": "%s",
                            "fill": "%s",
                            "fill-opacity": 1,
                            "stroke-width" : 0.2,
                            "stroke-opacity" : 0.7
                            },
                            "geometry":  %s             
                        },"""%(energyBreakdown_eachRegion['RegionalLACode'], regionalTotalOutput, 
                            sequentialHEXColourCodePicker(regionalTotalOutput, upperbound, lowerbound, None, 7), 
                            sequentialHEXColourCodePicker(regionalTotalOutput, upperbound, lowerbound, None, 7), 
                            str(boundary).replace("\'", "\"")) 
                        # adding new line 
                        geojson_file += '\n' + feature
                        
                    geojson_file = geojson_file[:-1]
                    # finishing file end 
                    end_geojson = """
                        ]
                    }
                    """
                    geojson_file += end_geojson
                    # saving as geoJSON
                    file_label = 'TotalOutputForRegionalArea_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) +'_weight_' + str(round(cf[3], 2)) + ')'
                    geojson_written = open(self.regionalOutputJSONPath + str(self.numOfBus) + '/' +  file_label + '.geojson','w')
                    geojson_written.write(geojson_file)
                    geojson_written.close() 
                    print('---GeoJSON written successfully: total output of regional area---', file_label)                                                     
                else:
                    raise ValueError('Invailed sub list of the specifiedConfigList.')
        else:
            for i_smr, energyBreakdown_eachSMRDesign in enumerate(energyBreakdownList):
                for i_carbontax, energyBreakdown_eachCarbonTax in enumerate(energyBreakdown_eachSMRDesign):
                    for i_weather, energyBreakdown_eachWeather in enumerate(energyBreakdown_eachCarbonTax):
                        for i_weight, energyBreakdown_eachWeight in enumerate(energyBreakdown_eachWeather):                                            
                            geojson_file = """
                            {
                                "type": "FeatureCollection",
                                "features": ["""
                            # iterating over features (rows in results array)
                            for energyBreakdown_eachRegion in energyBreakdown_eachWeight:
                                boundary =  ast.literal_eval(geojson.dumps(mapping(energyBreakdown_eachRegion['regionalAreaBoundary'])))
                                ## Total energy generation
                                regionalTotalOutput = 0
                                for output in energyBreakdown_eachRegion['outputBreakdown']:
                                    regionalTotalOutput += float(output)
                                regionalTotalOutput = round(regionalTotalOutput)
                                feature = """{
                                    "type": "Feature",
                                    "properties": {
                                    "regionalLACode": "%s",
                                    "totalOutput": %s,
                                    "color": "%s",
                                    "fill": "%s",
                                    "fill-opacity": 1,
                                    "stroke-width" : 0.2,
                                    "stroke-opacity" : 0.7
                                    },
                                    "geometry":  %s             
                                },"""%(energyBreakdown_eachRegion['RegionalLACode'], regionalTotalOutput, 
                                sequentialHEXColourCodePicker(regionalTotalOutput, upperbound, lowerbound, None, 7), 
                                sequentialHEXColourCodePicker(regionalTotalOutput, upperbound, lowerbound, None, 7), 
                                str(boundary).replace("\'", "\"")) 
                                # adding new line 
                                geojson_file += '\n' + feature
                                
                            geojson_file = geojson_file[:-1]
                            # finishing file end 
                            end_geojson = """
                                ]
                            }
                            """
                            geojson_file += end_geojson
                            # saving as geoJSON
                            file_label = 'TotalOutputForRegionalArea_(SMR_' + str(NumberOfSMRUnitList[i_smr]) + '_CarbonTax_' + str(CarbonTaxForOPFList[i_carbontax]) + '_weatherCondition_' + str(weatherConditionList[i_weather][2]) + '_weight_' + str(round(self.weighterList[i_weight], 2)) + ')'
                            geojson_written = open(self.regionalOutputJSONPath + str(self.numOfBus) + '/' +  file_label + '.geojson','w')
                            geojson_written.write(geojson_file)
                            geojson_written.close() 
                            print('---GeoJSON written successfully: total output of regional area---', file_label)                                  
            return 

    """This method is to generate the GeoJSON files demonstrate total energy output of each region"""
    def GeoJSONCreator_fossilFuelPowerPlant(self, specifiedConfigList:list):
        ## check the storage path
        self.mkdirFilePath(self.fossilFuelPowerPlantGEOJSON, '')
        for cf in specifiedConfigList:
            if len(cf) == 4: ## SMR number, Carbon tax, weather condition, weight 
                geojsonPath = self.localRootFilePath + '/GeneratorJSONFiles_%s/'%(str(self.numOfBus) + 'bus' + str(self.SMR_LCOE) + 'LCOE') +  str(cf[0]) + '_SMRs_' + str(cf[1]) +'_CarbonTax/' + str(self.numOfBus) + 'BusModel_' + str(cf[0]) + '_SMRs_Introduced_CarbonTax' + str(cf[1]) + '_WeatherCondition_' + str(cf[2]) + '_weighter_' + str(cf[3]) + '_ExtantGenerator.geojson'
                with open(geojsonPath) as f:
                    gj = geojson.load(f)
                fList = gj['features']
                geojson_file = """
                {
                    "type": "FeatureCollection",
                    "features": ["""
                # iterating over features (rows in results array)
                for pp in fList:
                    if pp["properties"]["Fuel Type"] in ["Coal", "NaturalGas"]:
                        if pp["properties"]["Fuel Type"] == "Coal":
                            colour = "#99A3A4"
                        else:
                            colour = "#eb8500"
                        feature = """{
                                    "type": "Feature",
                                    "properties": {
                                    "Fuel Type": "%s",
                                    "Capacity": %s,
                                    "Output": %s,
                                    "Carbon tax rate": %s,
                                    "Status" : "%s",
                                    "marker-color" : "%s",
                                    "marker-size" : "%s",
                                    "IRI": "%s"
                                    },
                                    "geometry": {
                                    "type": "Point",
                                    "coordinates": %s
                                    }                                                                                
                                    },"""%(pp["properties"]["Fuel Type"], pp["properties"]["Capacity"], 
                                           pp["properties"]["Output"], pp["properties"]["Carbon tax rate"], 
                                           pp["properties"]["Status"], colour, pp["properties"]["marker-size"], 
                                           pp["properties"]["IRI"], pp["geometry"]["coordinates"])                                      
                        geojson_file += '\n' + feature               
                if not geojson_file[-1] == "[":
                    geojson_file = geojson_file[:-1]
                # finishing file end 
                end_geojson = """
                    ]
                }
                """
                geojson_file += end_geojson
                # saving as geoJSON
                file_label = 'fossilFuelPowerPlantGeoJSON_(SMR_' + str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) +'_weight_' + str(round(cf[3], 2)) + ')'
                geojson_written = open(self.fossilFuelPowerPlantGEOJSON + '/' +  file_label + '.geojson','w')
                geojson_written.write(geojson_file)
                geojson_written.close() 
                print('---GeoJSON written successfully: fossil fuel power plant GeoJSON_---', file_label)                                                     
            else:
                raise ValueError('Invailed sub list of the specifiedConfigList.')                                
        return 
       
    """This method is to create the file path for figs"""
    def mkdirFilePath(self, path, addingPath):
        folder = os.path.exists(path + addingPath)
        if not folder:                
            os.makedirs(path + addingPath)           
            print("---  new folder %s...  ---" % path + addingPath)
        else:
            print("---  The folder exists! %s  ---" % path + addingPath)

    """Create the heatmap for total cost and CO2 emission"""
    def dataHeatmapCreator_totalCostAndEmission(self, dataMatrix, CarbonTaxForOPFList, NumberOfSMRUnitList, weatherConditionList):
        rowNum = len(NumberOfSMRUnitList)
        colNum = len(CarbonTaxForOPFList)
        self.weightRecorder = []
        self.minTotalCostIndexRecoder = []

        ## colour pattern, "crest" was used at the first time
        cmap = seaborn.diverging_palette(200, 20, sep=20, as_cmap=True)
        
        for k in range(len(weatherConditionList)):
            matrix_minTotalCost = numpy.zeros((rowNum, colNum), dtype = float)
            matrix_minCO2Emission = numpy.zeros((rowNum, colNum), dtype = float)
            matrix_weight = numpy.zeros((rowNum, colNum), dtype = float)
            matrix_minTotalCostIndex = numpy.zeros((rowNum, colNum), dtype = float)
            matrix_minTotalCostForAnnotation = numpy.zeros((rowNum, colNum), dtype = float)
            #row = 0
            for i in range(rowNum): ## SMR design index

                SMRdesign = dataMatrix[i]
                #col = 0
                for j in range(colNum): ## carbon tax index
                    results_sameCarbonTaxAndSameWeather = SMRdesign[j][k]
                    totalCost = results_sameCarbonTaxAndSameWeather[0]
                    minTotalCost = min(totalCost)
                    indexList = []
                    for i_tc in range(len(totalCost)):
                        tc = totalCost[i_tc]
                        if tc == minTotalCost:
                            indexList.append(i_tc)
                    index_minTotalCost = max(indexList)
                    CO2EmissionOftheMinimumCost = results_sameCarbonTaxAndSameWeather[1][totalCost.index(minTotalCost)]
                    matrix_minTotalCost[i, j] = minTotalCost/1E3
                    matrix_minTotalCostForAnnotation[i, j] = float(minTotalCost)/1E3
                    matrix_minCO2Emission[i, j] = CO2EmissionOftheMinimumCost
                    matrix_weight[i, j] = round(self.weighterList[totalCost.index(minTotalCost)], 2)   
                    matrix_minTotalCostIndex[i, j] = int(index_minTotalCost)                 
                    
            self.weightRecorder.append(matrix_weight)
            self.minTotalCostIndexRecoder.append(matrix_minTotalCostIndex)
            
            ## Draw the heatmap of total cost
            seaborn.heatmap(matrix_minTotalCost, linewidth=0.004, cmap=cmap, annot=matrix_minTotalCostForAnnotation, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':5.5}) ## center = 1.8E10, , vmin=1E10, vmax=3.0E10
            plt.title("Total cost at weather condition (B£/yr) %s" % weatherConditionList[k][2])
            plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
            plt.ylabel("SMR Number", fontsize = labelFontSize) 
            plt.tight_layout()
            self.mkdirFilePath(self.diagramPath, "Heatmap_TotalCostAndEmission/")
            plt.savefig(self.diagramPath + 'Heatmap_TotalCostAndEmission/' + 'TotalCost_Heatmap_%s.pdf' % str(weatherConditionList[k][2]), dpi = 1200)
            # plt.show()
            # plt.close()
            plt.clf()
            plt.cla()

            ## Draw the heatmap of carbon emission
            seaborn.heatmap(matrix_minCO2Emission, linewidth=0.004, cmap=cmap, annot=True, fmt=".1f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':7}, vmin=0, vmax=6000) # center = 3000, , vmin=0, vmax=6000
            plt.title("Carbon emission at weather condition (Mt/yr) %s" % weatherConditionList[k][2])
            plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
            plt.ylabel("SMR Number", fontsize = labelFontSize) 
            plt.tight_layout()
            self.mkdirFilePath(self.diagramPath, "Heatmap_TotalCostAndEmission/")
            plt.savefig(self.diagramPath + 'Heatmap_TotalCostAndEmission/' + 'CarbonEmission_Heatmap_%s.pdf' % str(weatherConditionList[k][2]), dpi = 1200, bbox_inches='tight')
            plt.clf()
            plt.cla()

            ## Draw the heatmap of weight
            seaborn.heatmap(matrix_weight, linewidth=0.004, cmap=cmap, annot=True, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':7.5}) ## center = 0.5, , vmin=0, vmax=1
            plt.title("Picked weight at weather condition (-) %s" % weatherConditionList[k][2])
            plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
            plt.ylabel("SMR Number", fontsize = labelFontSize) 
            plt.tight_layout()
            self.mkdirFilePath(self.diagramPath, "Heatmap_TotalCostAndEmission/")
            plt.savefig(self.diagramPath + 'Heatmap_TotalCostAndEmission/' + 'weight_Heatmap_%s.pdf' % str(weatherConditionList[k][2]), dpi = 1200, bbox_inches='tight')
            plt.clf()
            plt.cla()

        ## Draw the heatmap at each weight
        for k in range(len(weatherConditionList)):
            for m in range(len(self.weighterList)):
                matrix_totalCostAtEachWeight = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_CO2EmissionAtEachWeight = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_totalCostAtEachWeightForAnotation = numpy.zeros((rowNum, colNum), dtype = float)
                for i in range(rowNum): ## SMR design index
                    SMRdesign = dataMatrix[i]
                    for j in range(colNum): ## carbon tax index
                        results_sameCarbonTaxAndSameWeather = SMRdesign[j][k]
                        totalCost = results_sameCarbonTaxAndSameWeather[0]
                        co2Emission = results_sameCarbonTaxAndSameWeather[1]
                        matrix_totalCostAtEachWeight[i,j] = totalCost[m]/1E3
                        matrix_totalCostAtEachWeightForAnotation [i,j] = totalCost[m]/1E3
                        matrix_CO2EmissionAtEachWeight[i,j] = co2Emission[m]
 
                ## Draw the heatmap of total cost
                seaborn.heatmap(matrix_totalCostAtEachWeight, linewidth=0.004, cmap=cmap, annot=matrix_totalCostAtEachWeightForAnotation, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList,annot_kws={'size':5.5}) #   center = 1.8E10, , vmin=1E10, vmax=2.6E10
                title = "Total cost at weather condition (B£/yr)" + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'TotalCost_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_TotalCostAndEmission/")
                plt.savefig(self.diagramPath + 'Heatmap_TotalCostAndEmission/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()

                ## Draw the heatmap of carbon emission
                seaborn.heatmap(matrix_CO2EmissionAtEachWeight, linewidth=0.004, cmap=cmap, annot=True, fmt=".1f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':7}) ## center = 3000, , vmin=0, vmax=6000
                title = "Carbon emission at weather condition (Mt/yr)" + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'CarbonEmission_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_TotalCostAndEmission/")
                plt.savefig(self.diagramPath + 'Heatmap_TotalCostAndEmission/' +  label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()        
        return
    
    """This method is used to create emission heatmap"""
    def dataHeatmapCreator_CO2Emission(self, dataMatrix, CarbonTaxForOPFList, NumberOfSMRUnitList, weatherConditionList):
        rowNum = len(NumberOfSMRUnitList)
        colNum = len(CarbonTaxForOPFList)

        ## Draw the heatmap at each weight
        for k in range(len(weatherConditionList)):
            for m in range(len(self.weighterList)):
                matrix_emissionCostAtEachWeight = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_emissionCostAtEachWeight_Annotation = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_emissionCostOPEXRatioAtEachWeight = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_emissionCostTotalCostRatioAtEachWeight = numpy.zeros((rowNum, colNum), dtype = float)
                for i in range(rowNum): ## SMR design index
                    SMRdesign = dataMatrix[i]
                    for j in range(colNum): ## carbon tax index
                        results_sameCarbonTaxAndSameWeather = SMRdesign[j][k]
                        emissionCost = results_sameCarbonTaxAndSameWeather[0]
                        emissionCostOPEXRatio = results_sameCarbonTaxAndSameWeather[1]
                        emissionCostTotalCostRatio = results_sameCarbonTaxAndSameWeather[2]
                        matrix_emissionCostAtEachWeight[i,j] = emissionCost[m]/1E3
                        matrix_emissionCostAtEachWeight_Annotation[i,j] = emissionCost[m]/1E3
                        matrix_emissionCostOPEXRatioAtEachWeight[i,j] = emissionCostOPEXRatio[m]
                        matrix_emissionCostTotalCostRatioAtEachWeight[i,j] = emissionCostTotalCostRatio[m]
                        
                ## Draw the heatmap of emission cost
                cmap = seaborn.diverging_palette(200,20,sep=20,as_cmap=True)
                seaborn.heatmap(matrix_emissionCostAtEachWeight, linewidth=0.004, cmap=cmap, annot=matrix_emissionCostAtEachWeight_Annotation, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':5}) ## center = 0.9, , vmin=0, vmax=2E10
                title = "Emission cost at weather condition (B£/yr)" + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'EmissionCost_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_CO2EmissionCost/")
                plt.savefig(self.diagramPath + 'Heatmap_CO2EmissionCost/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()

                ## Draw the heatmap of emission cost and OPEX ratio
                seaborn.heatmap(matrix_emissionCostOPEXRatioAtEachWeight, linewidth=0.004, cmap="crest", annot = matrix_emissionCostOPEXRatioAtEachWeight, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':7.5}) ##  center = 0.9, , vmin=0, vmax=1
                title = "Emission cost and OPEX ratio at weather condition " + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title, fontsize = 11)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'emissionCostOPEXRatio_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_CO2EmissionCost/")
                plt.savefig(self.diagramPath + 'Heatmap_CO2EmissionCost/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()

                ## Draw the heatmap of emission cost and total cost ratio
                seaborn.heatmap(matrix_emissionCostTotalCostRatioAtEachWeight, linewidth=0.004, cmap="crest", annot = matrix_emissionCostTotalCostRatioAtEachWeight, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':7.5}) ## center = 0.9, , vmin=0, vmax=1
                title = "Emission cost and total cost ratio at weather condition " + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title,fontsize = 10)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'emissionCostTotalCostRatio_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_CO2EmissionCost/")
                plt.savefig(self.diagramPath + 'Heatmap_CO2EmissionCost/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()
        return

    """This method is used to create sub cost heatmap"""
    ## SMR cost, Risk Cost, pure operitional cost + emission cost (=OPEX)
    def dataHeatmapCreator_SubCost(self, totalCostList, OPEXCost, emissionCost, SMRInvestment, CarbonTaxForOPFList, NumberOfSMRUnitList, weatherConditionList):
        rowNum = len(NumberOfSMRUnitList)
        colNum = len(CarbonTaxForOPFList)

        if rowNum != len(totalCostList) or colNum != len(totalCostList[0]):
            raise ValueError('Please check the input SMR number list and the Carbon tax list and make sure they are matched with the processing reuslts.')

        for k in range(len(weatherConditionList)):
            for m in range(len(self.weighterList)):
                matrix_capex = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_pureOPEX = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_SMRCost = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_RiskCost = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_capex_annotation = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_pureOPEX_annotation = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_SMRCost_annotation = numpy.zeros((rowNum, colNum), dtype = float)
                matrix_RiskCost_annotation = numpy.zeros((rowNum, colNum), dtype = float)
                for i in range(rowNum): ## SMR design index
                    for j in range(colNum): ## carbon tax index
                        totalCost = totalCostList[i][j][k][0][m]
                        OPEX_withEmission = OPEXCost[i][j][k][1][m]
                        pureOPEX = OPEX_withEmission - emissionCost[i][j][k][0][m] 
                        matrix_pureOPEX[i,j] = pureOPEX/1E3
                        matrix_capex[i,j] = (totalCost - OPEX_withEmission)/1E3
                        matrix_SMRCost[i,j] = SMRInvestment[i][j][k][m]/1E3
                        matrix_RiskCost[i,j] = (totalCost - OPEX_withEmission - SMRInvestment[i][j][k][m])/1E3

                        matrix_pureOPEX_annotation[i,j] = matrix_pureOPEX[i,j]
                        matrix_capex_annotation[i,j] = matrix_capex[i,j]
                        matrix_SMRCost_annotation[i,j] = matrix_SMRCost[i,j]
                        matrix_RiskCost_annotation[i,j] = matrix_RiskCost[i,j]
                        
                ## Draw the heatmap of pure OPEX
                cmap = seaborn.diverging_palette(200,20,sep=20,as_cmap=True)
                seaborn.heatmap(matrix_pureOPEX, linewidth=0.004, cmap="crest", annot=matrix_pureOPEX_annotation, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':6}) ## center = 0.9,, vmin=1E10, vmax=2E10
                title = "Pure OPEX at weather condition (B£/yr)" + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'PureOPEX_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_pureOPEX/")
                plt.savefig(self.diagramPath + 'Heatmap_pureOPEX/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()

                ## Draw the heatmap of CAPEX
                seaborn.heatmap(matrix_capex, linewidth=0.004, cmap="crest", annot = matrix_capex_annotation, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':6}) ## center = 0.9, , vmin=0, vmax=9E9
                title = "CAPEX at weather condition (B£/yr)" + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title, fontsize = 11)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'CAPEX_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_CAPEX/")
                plt.savefig(self.diagramPath + 'Heatmap_CAPEX/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()

##TODO: SMR investment and risk does not make sense
                ## Draw the heatmap of SMR investment
                seaborn.heatmap(matrix_SMRCost, linewidth=0.004, cmap="crest", annot = matrix_SMRCost_annotation, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':6}) ## center = 0.9, , vmin=0, vmax=3.5E9
                title = "SMR Investment at weather condition (B£/yr)" + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title, fontsize = 11)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'SMRInvestment_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_SMRInvestment/")
                plt.savefig(self.diagramPath + 'Heatmap_SMRInvestment/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()

                ## Draw the heatmap of risk cost
                seaborn.heatmap(matrix_RiskCost, linewidth=0.004, cmap="crest", annot = matrix_RiskCost_annotation, fmt=".2f", square = False, xticklabels = CarbonTaxForOPFList, yticklabels = NumberOfSMRUnitList, annot_kws={'size':6}) # , vmin=0, vmax=2E8  center = 0.9, 
                title = "Risk cost at weather condition (B£/yr)" + weatherConditionList[k][2] + " (weight = " + str(round(self.weighterList[m], 2)) + ")"
                plt.title(title, fontsize = 11)
                plt.xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                plt.ylabel("SMR Number", fontsize = labelFontSize) 
                plt.tight_layout()
                label_png = 'RiskCost_Heatmap_' + str(weatherConditionList[k][2]) + '_weight_' + str(round(self.weighterList[m], 2)) + '.pdf'
                self.mkdirFilePath(self.diagramPath, "Heatmap_RiskCost/")
                plt.savefig(self.diagramPath + 'Heatmap_RiskCost/' + label_png, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()
        return
          
    """Develope the data matrix"""
    def resultsSheetCreator(self, NumberOfSMRUnitList, weatherConditionList, CarbonTaxForOPFList, dataMatrix, fileName:str = None):
        rowNum = len(NumberOfSMRUnitList) * len(self.weighterList) + 3 
        colNum = 2 * len(weatherConditionList) * len(CarbonTaxForOPFList) + 2
        resultSheet = numpy.zeros((rowNum, colNum), dtype = object)

        ## Header line row[0]
        resultSheet[0,0] = 'Design'
        resultSheet[0,1] = 'Weight'

        i = 0
        l = 2 * len(weatherConditionList) * len(CarbonTaxForOPFList)
        while i < l:
            carbonTax_i = i // (2 * len(weatherConditionList))
            carbonTax = str(CarbonTaxForOPFList[carbonTax_i])
            resultSheet[0, i + 2] = carbonTax
            i += 1

        ## Second line row[1]
        resultSheet[1,0] = '----'
        resultSheet[1,1] = '----'

        i = 0
        while i < l:
            weather_i = (i % (2 * len(weatherConditionList))) // 2
            weather = str(weatherConditionList[weather_i][2])
            resultSheet[1, i + 2] = weather
            i += 1

        ## Third line row[2]
        resultSheet[2,0] = '----'
        resultSheet[2,1] = '----'

        i = 0
        while i < l:
            costName_i = i % 2 
            if costName_i == 0:
                costName = 'Total_Cost'
            else:
                costName = 'CO2_Emission'
            resultSheet[2, i + 2] = costName
            i += 1

        ## Fill the first two rows
        row_i = 3 ## the data row starts from row 3
        while row_i < rowNum:
            smr_i = (row_i - 3) // len(self.weighterList)
            smrNum = str(NumberOfSMRUnitList[smr_i]) + '_SMR'
            resultSheet[row_i, 0] = smrNum

            weight_i = (row_i - 3) % len(self.weighterList)
            weight = str(self.weighterList[weight_i])
            resultSheet[row_i, 1] = weight
            row_i += 1

        ## Data sheet starts form row 3 and col 2
        row_i = 3 ## the data row starts from row 3
        col_i = 2
        for i in range(len(NumberOfSMRUnitList)): 
            SMRdesign = dataMatrix[i]
            for j in range(len(CarbonTaxForOPFList)):
                results_sameCarbonTax = SMRdesign[j]
                for k in range(len(weatherConditionList)):
                    results_sameWeather = results_sameCarbonTax[k]
                    totalCost = results_sameWeather[0]
                    CO2Emission = results_sameWeather[1]
                    for m in range(len(self.weighterList)):
                        resultSheet[row_i, col_i] = totalCost[m]
                        resultSheet[row_i, col_i + 1] = CO2Emission[m]
                        row_i += 1
                    row_i -= len(self.weighterList)
                    col_i += 2
            row_i += len(self.weighterList)
            col_i = 2
        
        ## File name 
        if fileName is None:
            fileName = 'SMR_Design_'
            for smr in NumberOfSMRUnitList:
                fileName += str(smr) + '_'
            fileName = fileName[:-1]   
            fileName += '.xlsx'

        resultSheet = pd.DataFrame(resultSheet)
        writer = pd.ExcelWriter(fileName)
        resultSheet.to_excel(writer, sheet_name='Results', float_format = '%.5f', index=False)
        writer.close()
        print("============The Results Sheet is created====================")
        return

    """Create the multiple lines diagram reflecting the weather condition impact under the same weight 0.5"""
    def lineGraph_weatherImpact(self, pickedWeight, currentYear:int, currentYearlyCO2Emission_Mt:float, estimatedCO2Emissions_Mt:float, calculatedCO2Emissions_Mt:float, correspondingCarbonTax:int,
                                divergedPoint:list, 
                                SMRTransitionWindowLowerBound:float, SMRTransitionWindowUpperBound:float, NonSMRTransitionLowerBound:float, NonSMRTransitionUpperBound:float, summary_eachSMRDesign, 
                                NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList):     
        # CarbonTaxForOPFList = CarbonTaxForOPFList[:-1]
        ## will generate 3 figs and each fig has 8 lines (SMR diagram only has 4 lines and the rest: 4 lines for 4 weather condition and 4 line for their corresponding base cases.)
        if not pickedWeight in self.weighterList:
            raiseExceptions("The given weight is not in the list!")
        else:
            weight_index = self.weighterList.index(pickedWeight)

        if len(summary_eachSMRDesign) != len(NumberOfSMRUnitList):
            raiseExceptions("The length of the result list should equal to the number of the SMR list number!")

        bestCostResult = []
        bestSMRNumberResult = []
        bestCO2EmissionResult = []

        baseCostResult = []
        baseCO2EmissionResult = []

        ## x axis scale (carbon tax)
        xmajor = MultipleLocator(50)
        xminor = MultipleLocator(10)

        for w in range(len(weatherConditionList)):
            bestCost_UnderSameWeatherCondition = []
            bestSMRNumber_UnderSameWeatherCondition = []
            bestCO2Emission_UnderSameWeatherCondition = []

            baseCost_UnderSameWeatherCondition = []
            baseCO2Emission_UnderSameWeatherCondition = []

            for c in range(len(CarbonTaxForOPFList)):
                costResult_sameCarbonTaxDifferentSMRNumber = []
                CO2EmissionResult_sameCarbonTaxDifferentSMRNumber = []
                for result_sameSMR in summary_eachSMRDesign:
                    cost = result_sameSMR[c][w][0][weight_index]
                    CO2Emission = result_sameSMR[c][w][1][weight_index]
                    costResult_sameCarbonTaxDifferentSMRNumber.append(cost)
                    CO2EmissionResult_sameCarbonTaxDifferentSMRNumber.append(CO2Emission)
                
                bestCost_underSameCarbonTax = min(costResult_sameCarbonTaxDifferentSMRNumber)
                index_ = costResult_sameCarbonTaxDifferentSMRNumber.index(bestCost_underSameCarbonTax)
                bestNumberOfSMR = NumberOfSMRUnitList[index_]
                bestCO2Emission_underSameCarbonTax = CO2EmissionResult_sameCarbonTaxDifferentSMRNumber[index_]
                
                ## Best solution for the same weather 
                bestCost_UnderSameWeatherCondition.append(bestCost_underSameCarbonTax)
                bestSMRNumber_UnderSameWeatherCondition.append(bestNumberOfSMR)
                bestCO2Emission_UnderSameWeatherCondition.append(bestCO2Emission_underSameCarbonTax)

                ## Base case (0 SMR)
                baseCost_UnderSameWeatherCondition.append(costResult_sameCarbonTaxDifferentSMRNumber[0])
                baseCO2Emission_UnderSameWeatherCondition.append(CO2EmissionResult_sameCarbonTaxDifferentSMRNumber[0])

            bestCostResult.append(bestCost_UnderSameWeatherCondition)
            bestSMRNumberResult.append(bestSMRNumber_UnderSameWeatherCondition)
            bestCO2EmissionResult.append(bestCO2Emission_UnderSameWeatherCondition)

            baseCostResult.append(baseCost_UnderSameWeatherCondition)
            baseCO2EmissionResult.append(baseCO2Emission_UnderSameWeatherCondition)

        ## Replace the non-converged point
        if len(divergedPoint) != 0 and pickedWeight == divergedPoint[2]:
            for w_i, w in enumerate(weatherConditionList):
                if divergedPoint[0] == w[2]: 
                    weatherIndex = w_i
                    break
            for c_i, c in enumerate(CarbonTaxForOPFList):
                if c == divergedPoint[1]:
                    carbonTaxIndex = c_i
                    break
            ## replace the diverged point with the one following the diverged point
            bestCostResult[weatherIndex][carbonTaxIndex] = bestCostResult[weatherIndex][carbonTaxIndex + 1] 
            bestSMRNumberResult[weatherIndex][carbonTaxIndex] = bestSMRNumberResult[weatherIndex][carbonTaxIndex + 1] 
            bestCO2EmissionResult[weatherIndex][carbonTaxIndex] = bestCO2EmissionResult[weatherIndex][carbonTaxIndex + 1] 

        ## set up the clourmap
        cmap = mpl.cm.get_cmap("viridis", len(weatherConditionList)) # viridis RdYlGn
        colors = cmap(numpy.linspace(0, 1, len(weatherConditionList)))
      
        ##-- Plot the multiple line chart of the SMR number vs carbon tax --##
        # y axis scale (SMR number)
        ymajor_1 = MultipleLocator(5)
        yminor_1 = MultipleLocator(1)

        fig, ax1 = plt.subplots()
        ax2 = ax1.twinx()
        ay1 = ax1.twiny()
        ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
        ax1.set_ylabel("Cost-optimal number of SMRs (-)", fontsize = labelFontSize)

        ax1.xaxis.set_minor_locator(xminor)
        ax1.xaxis.set_major_locator(xmajor)
        ax2.xaxis.set_minor_locator(xminor)
        ax2.xaxis.set_major_locator(xmajor)
        ay1.xaxis.set_minor_locator(xminor)
        ay1.xaxis.set_major_locator(xmajor)
        ax1.tick_params(direction="in", which="minor", length=2.5)
        ax1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ax2.tick_params(direction="in", which="minor", length=2.5)
        ax2.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ay1.tick_params(direction="in", which="minor", length=2.5)
        ay1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ax2.tick_params(direction='in')
        ax2.axes.yaxis.set_ticklabels([])
        ay1.tick_params(direction='in')
        ay1.axes.xaxis.set_ticklabels([])
        ax1.yaxis.set_minor_locator(yminor_1)
        ax1.yaxis.set_major_locator(ymajor_1)
        ax2.yaxis.set_minor_locator(yminor_1)
        ax2.yaxis.set_major_locator(ymajor_1)

        ## plot each weather condition
        for i in range(len(bestSMRNumberResult)):
            if weatherConditionList[i][2][1] == 'B':
                label_withSubscript = 'W${_M}$S${_M}$'
            else:
                label_withSubscript = 'W${_%s}$S${_%s}$'% (weatherConditionList[i][2][1], weatherConditionList[i][2][3])

            ax1.plot(CarbonTaxForOPFList, bestSMRNumberResult[i], marker = markersList[i], markersize = 2.5, label = label_withSubscript, color = colors[i])
            ax2.plot(CarbonTaxForOPFList, bestSMRNumberResult[i], color = colors[i], alpha=0)
            ay1.plot(CarbonTaxForOPFList, bestSMRNumberResult[i], color = colors[i], alpha=0)

            # for x, y, label in zip(CarbonTaxForOPFList, bestSMRNumberResult[i], bestSMRNumberResult[i]):
            #     ax1.text(x, y, label, fontsize = dotLabel, alpha = 0.85)  

            ax1.text(0, bestSMRNumberResult[i][0]+0.2, bestSMRNumberResult[i][0], fontsize = 8, alpha = 0.85)  
            # ax1.text(10, bestSMRNumberResult[i][CarbonTaxForOPFList.index(10)]+0.2, bestSMRNumberResult[i][CarbonTaxForOPFList.index(10)], fontsize = 8, alpha = 0.85)  
            ax1.text(20, bestSMRNumberResult[i][CarbonTaxForOPFList.index(20)]+0.2, bestSMRNumberResult[i][CarbonTaxForOPFList.index(20)], fontsize = 8, alpha = 0.85)  
            ax1.text(40, bestSMRNumberResult[i][CarbonTaxForOPFList.index(40)]+0.2, bestSMRNumberResult[i][CarbonTaxForOPFList.index(40)], fontsize = 8, alpha = 0.85)  
            ax1.text(50, bestSMRNumberResult[i][CarbonTaxForOPFList.index(50)]+0.2, bestSMRNumberResult[i][CarbonTaxForOPFList.index(50)], fontsize = 8, alpha = 0.85)  
            ax1.text(60, bestSMRNumberResult[i][CarbonTaxForOPFList.index(60)]+0.2, bestSMRNumberResult[i][CarbonTaxForOPFList.index(60)], fontsize = 8, alpha = 0.85)             
            ax1.text(95, bestSMRNumberResult[i][CarbonTaxForOPFList.index(100)]+0.2, bestSMRNumberResult[i][CarbonTaxForOPFList.index(100)], fontsize = 8, alpha = 0.85)  
            
        ## vertical line
        ax1.vlines(SMRTransitionWindowLowerBound, 0, 50, color = '#808080', alpha=0.5, linestyle = lineStyleList[1]) 
        ax2.vlines(SMRTransitionWindowLowerBound, 0, 50, color = '#808080', alpha=0, linestyle = lineStyleList[1])
        ax1.vlines(SMRTransitionWindowUpperBound, 0, 50, color = '#808080', alpha=0.5, linestyle = lineStyleList[1]) 
        ax2.vlines(SMRTransitionWindowUpperBound, 0, 50, color = '#808080', alpha=0, linestyle = lineStyleList[1])

        # Get the x-coordinates of the lines
        x = numpy.array([SMRTransitionWindowLowerBound, SMRTransitionWindowUpperBound])
        # Shade the area between the lines
        ax1.fill_betweenx(numpy.linspace(0, 50, 100), x[0], x[1], facecolor='#2171b5', alpha=0.3)
        ax2.fill_betweenx(numpy.linspace(0, 50, 100), x[0], x[1], facecolor='#2171b5', alpha=0)
        
        # ax1.text(40, 5, 'Transition window for SMR adoption', fontsize = 10, alpha = 1) 
        arrowPosition = (SMRTransitionWindowUpperBound - SMRTransitionWindowLowerBound) / 2 + SMRTransitionWindowLowerBound
        ax1.annotate('Transition window for SMR adoption', xy=(arrowPosition, 5), xytext=(arrowPosition + 20, 5), arrowprops=dict(arrowstyle='->'), fontsize = 10) 

        ## set legend
        pos = ax1.get_position() 
        ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
        ax1.legend(
            loc="upper center",
            fontsize = legendFontSize,
            ncol=5,
            bbox_to_anchor=(0.5, 0.065),
            frameon=False,
            bbox_transform=fig.transFigure 
            ) 
        plt.tight_layout()
        self.mkdirFilePath(self.diagramPath, "weatherImpact/")
        plt.savefig(self.diagramPath + 'weatherImpact/' + 'SMRvsCarbonTax_(weatherImpact)_weight_%s.pdf' % str(pickedWeight), dpi = 1200, bbox_inches='tight')
        plt.clf()
        plt.cla()
        
        ######################################################################################################################################
        ##--2. Plot the multiple line chart of the total cost vs carbon tax --##
        # plt.title("Total Cost vs. Carbon Tax")
        fig, ax1 = plt.subplots()
        ax2 = ax1.twinx()
        ay1 = ax1.twiny()
        ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
        ax1.set_ylabel("Annualised total cost (£B/yr)", fontsize = labelFontSize)
        ax1.xaxis.set_minor_locator(xminor)
        ax1.xaxis.set_major_locator(xmajor)
        ax2.xaxis.set_minor_locator(xminor)
        ax2.xaxis.set_major_locator(xmajor)
        ay1.xaxis.set_minor_locator(xminor)
        ay1.xaxis.set_major_locator(xmajor)
        ax1.tick_params(direction="in", which="minor", length=2.5)
        ax1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ax2.tick_params(direction="in", which="minor", length=2.5)
        ax2.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ay1.tick_params(direction="in", which="minor", length=2.5)
        ay1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ax2.tick_params(direction='in')
        ax2.axes.yaxis.set_ticklabels([])
        ay1.tick_params(direction='in')
        ay1.axes.xaxis.set_ticklabels([])
        
        for i in range(len(bestCostResult)):
            if weatherConditionList[i][2][1] == 'B':
                label_withSubscript = 'W${_M}$S${_M}$'
            else:
                label_withSubscript = 'W${_%s}$S${_%s}$'% (weatherConditionList[i][2][1], weatherConditionList[i][2][3])

            bestCostResult[i] = numpy.array(bestCostResult[i])/1E3
            baseCostResult[i] = numpy.array(baseCostResult[i])/1E3

            plt.ylim(9, 25)

            ax1.plot(CarbonTaxForOPFList, bestCostResult[i], marker = markersList[i], markersize = 2.5, label = label_withSubscript, color = colors[i], linestyle = lineStyleList[0])
            ax2.plot(CarbonTaxForOPFList, bestCostResult[i], color = colors[i], alpha=0)
            ay1.plot(CarbonTaxForOPFList, bestCostResult[i], color = colors[i], alpha=0)
            ax1.plot(CarbonTaxForOPFList, baseCostResult[i], label = label_withSubscript + ' (NS)', color = colors[i], linestyle = lineStyleList[2], linewidth = 0.8, alpha=0.75)
            ax2.plot(CarbonTaxForOPFList, baseCostResult[i], color = colors[i], alpha=0) 
            ay1.plot(CarbonTaxForOPFList, baseCostResult[i], color = colors[i], alpha=0)
 
            ax1.text(-3.5, bestCostResult[i][0]+0.15, bestSMRNumberResult[i][0], fontsize = 8, alpha = 0.85)
            ax1.text(15, bestCostResult[i][CarbonTaxForOPFList.index(20)]+0.15, bestSMRNumberResult[i][CarbonTaxForOPFList.index(20)], fontsize = 8, alpha = 0.85)  
            ax1.text(40, bestCostResult[i][CarbonTaxForOPFList.index(45)]+0.15, bestSMRNumberResult[i][CarbonTaxForOPFList.index(45)], fontsize = 8, alpha = 0.85)  
            ax1.text(95, bestCostResult[i][CarbonTaxForOPFList.index(100)]+0.2, bestSMRNumberResult[i][CarbonTaxForOPFList.index(100)], fontsize = 8, alpha = 0.85)  
            
        ## vertical line
        ax1.vlines(SMRTransitionWindowUpperBound, 9, 25, color = '#808080', alpha=0.5, linestyle = lineStyleList[1]) 
        ax2.vlines(SMRTransitionWindowUpperBound, 9, 25, color = '#808080', alpha=0, linestyle = lineStyleList[1])
 
        # ax1.text(40, 22, 'End of transition window for SMR adoption', fontsize = 10, alpha = 1) 
        ax1.annotate('End of transition window', xy=(SMRTransitionWindowUpperBound, 22), xytext=(SMRTransitionWindowUpperBound + 20, 21.8), arrowprops=dict(arrowstyle='->'), fontsize = 10)
        ax1.text(SMRTransitionWindowUpperBound + 20, 21,'for SMR adoption', fontsize = 10, alpha = 1)  

        pos = ax1.get_position()
        ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
        ax1.legend(
            loc="upper center",
            fontsize = 10,
            ncol=5,
            bbox_to_anchor=(0.5, 0.08),
            frameon=False,
            bbox_transform=fig.transFigure 
            ) 

        plt.tight_layout()
        self.mkdirFilePath(self.diagramPath, "weatherImpact/")
        plt.savefig(self.diagramPath + 'weatherImpact/' + 'CostvsCarbonTax_(weatherImpact)_weight_%s.pdf' % str(pickedWeight), dpi = 1200, bbox_inches='tight')
        plt.clf()
        plt.cla()

        ######################################################################################################################################  
        ##-- 3. Plot the multiple line chart of the CO2 emission vs carbon tax --##
        fig, ax1 = plt.subplots()
        ax2 = ax1.twinx()
        ay1 = ax1.twiny()
        ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
        ax1.set_ylabel("Annual CO${_2}$ emission (Mt/yr)", fontsize = labelFontSize)
        ax1.xaxis.set_minor_locator(xminor)
        ax1.xaxis.set_major_locator(xmajor)
        ax2.xaxis.set_minor_locator(xminor)
        ax2.xaxis.set_major_locator(xmajor)
        ay1.xaxis.set_minor_locator(xminor)
        ay1.xaxis.set_major_locator(xmajor)
        ax1.tick_params(direction="in", which="minor", length=2.5)
        ax1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ax2.tick_params(direction="in", which="minor", length=2.5)
        ax2.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ay1.tick_params(direction="in", which="minor", length=2.5)
        ay1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
        ax2.tick_params(direction='in')
        ax2.axes.yaxis.set_ticklabels([])
        ay1.tick_params(direction='in')
        ay1.axes.xaxis.set_ticklabels([])

        for i in range(len(bestCO2EmissionResult)):
            if weatherConditionList[i][2][1] == 'B':
                label_withSubscript = 'W${_M}$S${_M}$'
            else:
                label_withSubscript = 'W${_%s}$S${_%s}$'% (weatherConditionList[i][2][1], weatherConditionList[i][2][3])

            ax1.plot(CarbonTaxForOPFList, bestCO2EmissionResult[i], marker = markersList[i], markersize = 2.5, label = label_withSubscript, color = colors[i], linestyle = lineStyleList[0])
            ax2.plot(CarbonTaxForOPFList, bestCO2EmissionResult[i], color = colors[i], alpha=0)
            ay1.plot(CarbonTaxForOPFList, bestCO2EmissionResult[i], color = colors[i], alpha=0)
            ax1.plot(CarbonTaxForOPFList, baseCO2EmissionResult[i], label = label_withSubscript + '(NS)', color = colors[i], linestyle = lineStyleList[2])
            ax2.plot(CarbonTaxForOPFList, baseCO2EmissionResult[i], alpha=0)
            ay1.plot(CarbonTaxForOPFList, baseCO2EmissionResult[i], alpha=0)

        ## vertical line
        ax1.vlines(NonSMRTransitionLowerBound, 18, 100, color = '#808080', alpha=0.5, linestyle = lineStyleList[1]) 
        ax2.vlines(NonSMRTransitionLowerBound, 18, 100, color = '#808080', alpha=0, linestyle = lineStyleList[1])
        ax1.vlines(NonSMRTransitionUpperBound, 18, 100, color = '#808080', alpha=0.5, linestyle = lineStyleList[1]) 
        ax2.vlines(NonSMRTransitionUpperBound, 18, 100, color = '#808080', alpha=0, linestyle = lineStyleList[1])
        
        # Get the x-coordinates of the lines
        x = numpy.array([NonSMRTransitionLowerBound, NonSMRTransitionUpperBound])
        # Shade the area between the lines
        ax1.fill_betweenx(numpy.linspace(18, 100, 100), x[0], x[1], facecolor='gray', alpha=0.3)
        ax2.fill_betweenx(numpy.linspace(18, 100, 100), x[0], x[1], facecolor='gray', alpha=0)

        ## horizontal line for current CO2 emission, 2022: 53.7 Mt
        ax1.axhline(y=float(currentYearlyCO2Emission_Mt), color='#000000', linestyle='dashdot', alpha=0.7, lw = 0.7) 
        ax2.axhline(y=float(currentYearlyCO2Emission_Mt), color='#000000', linestyle='dashdot', alpha=0, lw = 0.7)
        ax1.text(42, float(currentYearlyCO2Emission_Mt)+ 1, 'Reported CO${_2}$ emissions (%s): %s MtCO${_2}$'%(str(int(currentYear)), str(currentYearlyCO2Emission_Mt)), fontsize = 10, alpha = 1)  
       
        ## horizontal line for estimated CO2 emissions 2022: 49.7 Mt
        ax1.axhline(estimatedCO2Emissions_Mt, color='#000000', linestyle='dashdot', alpha=0.7, lw = 0.7)
        ax2.axhline(estimatedCO2Emissions_Mt, color='#000000', linestyle='dashdot', alpha=0, lw = 0.7) 
        ax1.text(42, 35, 'Estimated CO${_2}$ emissions (%s): %s MtCO${_2}$'%(str(int(currentYear)), str(estimatedCO2Emissions_Mt)), fontsize = 10, alpha = 1)  
        ax1.annotate('', xy=(186, int(estimatedCO2Emissions_Mt)), xytext=(186, 37), arrowprops=dict(arrowstyle='->'))    

        ## cross for calculated CO2 emission: 49.5 Mt
        ax1.plot(correspondingCarbonTax, calculatedCO2Emissions_Mt, marker = 'x', markersize = 4, color = '#000000')
        ax2.plot(correspondingCarbonTax, calculatedCO2Emissions_Mt, marker = 'x', markersize = 4, color = '#000000', alpha=0)
        ax1.annotate('Calculated CO${_2}$ emissions: %s MtCO${_2}$'%str(calculatedCO2Emissions_Mt), xy=(correspondingCarbonTax, calculatedCO2Emissions_Mt), xytext=(42, 41), arrowprops=dict(arrowstyle='->'), fontsize = 10)


        ## Transition window of non-smr scenarios 
        arrow_coalTransitionWindow = (NonSMRTransitionUpperBound - NonSMRTransitionLowerBound) / 2 + NonSMRTransitionLowerBound
        ax1.annotate('Transition from coal to natural gas', xy=(arrow_coalTransitionWindow, 92), xytext=(arrow_coalTransitionWindow + 15, 91.4), arrowprops=dict(arrowstyle='->'), fontsize = 10)        

        pos = ax1.get_position() ## set up the legend position
        ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
        ax1.legend(
            loc="upper center",
            fontsize = 10,
            ncol=5,
            bbox_to_anchor=(0.5, 0.08),
            frameon=False,
            bbox_transform=fig.transFigure 
            ) 

        plt.tight_layout()
        self.mkdirFilePath(self.diagramPath, "weatherImpact/")
        plt.savefig(self.diagramPath + 'weatherImpact/' + 'CO2EmissionvsCarbonTax_(weatherImpact)_weight_%s.pdf' % str(pickedWeight), dpi = 1200, bbox_inches='tight')
        plt.clf()
        plt.cla()        
        return

    """Create the multiple lines diagram reflecting the weight impact under different weather conditions"""
    def lineGraph_weightImpact(self, summary_eachSMRDesign, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList):
    
        if len(summary_eachSMRDesign) != len(NumberOfSMRUnitList):
            raiseExceptions("The length of the result list should equal to the number of the SMR list number!")

        ## set up the clourmap
        cmap = mpl.cm.get_cmap("viridis", len(self.weighterList))
        colors = cmap(numpy.linspace(0, 1, len(self.weighterList)))

        ## x axis scale (carbon tax)
        xmajor = MultipleLocator(50)
        xminor = MultipleLocator(10)

        for w in range(len(weatherConditionList)):
            bestCost_UnderSameWeatherCondition = []
            bestSMRNumber_UnderSameWeatherCondition = []
            bestCO2Emission_UnderSameWeatherCondition = []

            baseCost_UnderSameWeatherCondition = []
            baseCO2Emission_UnderSameWeatherCondition = []

            for weight_index in range(len(self.weighterList)):
                bestCost_UnderSameWeatherAndSameWeight = []
                bestSMRNumber_UnderSameWeatherAndSameWeight = []
                bestCO2Emission_UnderSameWeatherAndSameWeight = []

                baseCost_UnderSameWeatherAndSameWeight = []
                baseCO2Emission_UnderSameWeatherAndSameWeight = [] 
                
                for c in range(len(CarbonTaxForOPFList)):
                    costResult_sameCarbonTaxDifferentSMRNumber = []
                    CO2EmissionResult_sameCarbonTaxDifferentSMRNumber = []
                    for result_sameSMR in summary_eachSMRDesign:
                        cost = result_sameSMR[c][w][0][weight_index]
                        CO2Emission = result_sameSMR[c][w][1][weight_index]
                        costResult_sameCarbonTaxDifferentSMRNumber.append(cost)
                        CO2EmissionResult_sameCarbonTaxDifferentSMRNumber.append(CO2Emission)

                    ## pick the minimum 
                    bestCost_underSameCarbonTax = min(costResult_sameCarbonTaxDifferentSMRNumber)
                    index_ = costResult_sameCarbonTaxDifferentSMRNumber.index(bestCost_underSameCarbonTax)
                    bestNumberOfSMR = NumberOfSMRUnitList[index_]
                    bestCO2Emission_underSameCarbonTax = CO2EmissionResult_sameCarbonTaxDifferentSMRNumber[index_]
                    
                    bestCost_UnderSameWeatherAndSameWeight.append(bestCost_underSameCarbonTax)
                    bestSMRNumber_UnderSameWeatherAndSameWeight.append(bestNumberOfSMR)
                    bestCO2Emission_UnderSameWeatherAndSameWeight.append(bestCO2Emission_underSameCarbonTax)

                    ## Pick the base case
                    baseCost_UnderSameWeatherAndSameWeight.append(costResult_sameCarbonTaxDifferentSMRNumber[0])
                    baseCO2Emission_UnderSameWeatherAndSameWeight.append(CO2EmissionResult_sameCarbonTaxDifferentSMRNumber[0])

                ## Optima under the same weight
                bestCost_UnderSameWeatherCondition.append(bestCost_UnderSameWeatherAndSameWeight)
                bestSMRNumber_UnderSameWeatherCondition.append(bestSMRNumber_UnderSameWeatherAndSameWeight)
                bestCO2Emission_UnderSameWeatherCondition.append(bestCO2Emission_UnderSameWeatherAndSameWeight)

                ## Base case under the same weight
                baseCost_UnderSameWeatherCondition.append(baseCost_UnderSameWeatherAndSameWeight)
                baseCO2Emission_UnderSameWeatherCondition.append(baseCO2Emission_UnderSameWeatherAndSameWeight)
      
            
            ##-- Plot the multiple line chart of the SMR number vs carbon tax of each weight under the same weather condition --##
            # y axis scale (SMR number)
            ymajor_1 = MultipleLocator(5)
            yminor_1 = MultipleLocator(1)

            fig, ax1 = plt.subplots()
            ax2 = ax1.twinx()
            ay1 = ax1.twiny()
            ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
            ax1.set_ylabel("Cost-optimal nunmber of SMRs (-)", fontsize = labelFontSize)
            ax1.xaxis.set_minor_locator(xminor)
            ax1.xaxis.set_major_locator(xmajor)
            ax2.xaxis.set_minor_locator(xminor)
            ax2.xaxis.set_major_locator(xmajor)
            ay1.xaxis.set_minor_locator(xminor)
            ay1.xaxis.set_major_locator(xmajor)
            ax1.tick_params(direction="in", which="minor", length=2.5)
            ax1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ax2.tick_params(direction="in", which="minor", length=2.5)
            ax2.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ay1.tick_params(direction="in", which="minor", length=2.5)
            ay1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ax2.tick_params(direction='in')
            ax2.axes.yaxis.set_ticklabels([])
            ay1.tick_params(direction='in')
            ay1.axes.xaxis.set_ticklabels([])
            ax1.yaxis.set_minor_locator(yminor_1)
            ax1.yaxis.set_major_locator(ymajor_1)
            ax2.yaxis.set_minor_locator(yminor_1)
            ax2.yaxis.set_major_locator(ymajor_1)

            ## plot each weight at the same weather condition
            for i in range(len(bestSMRNumber_UnderSameWeatherCondition)):
                weightLabel = 'weight: ' + str(round(self.weighterList[i], 2))
                ax1.plot(CarbonTaxForOPFList, bestSMRNumber_UnderSameWeatherCondition[i], marker = markersList[i], label = weightLabel, color = colors[i], markersize = 2)
                ax2.plot(CarbonTaxForOPFList, bestSMRNumber_UnderSameWeatherCondition[i], color = colors[i], alpha=0)
                ay1.plot(CarbonTaxForOPFList, bestSMRNumber_UnderSameWeatherCondition[i], color = colors[i], alpha=0)

                ax1.text(-5, bestSMRNumber_UnderSameWeatherCondition[i][0] + 0.25, bestSMRNumber_UnderSameWeatherCondition[i][0], fontsize = 8, alpha = 0.85)  
                ax1.text(35, bestSMRNumber_UnderSameWeatherCondition[i][CarbonTaxForOPFList.index(40)] + 0.25, bestSMRNumber_UnderSameWeatherCondition[i][CarbonTaxForOPFList.index(40)], fontsize = 8, alpha = 0.85)  
                ax1.text(95, bestSMRNumber_UnderSameWeatherCondition[i][CarbonTaxForOPFList.index(100)] + 0.25, bestSMRNumber_UnderSameWeatherCondition[i][CarbonTaxForOPFList.index(100)], fontsize = 8, alpha = 0.85)  
                ax1.text(195, bestSMRNumber_UnderSameWeatherCondition[i][CarbonTaxForOPFList.index(200)] + 0.25, bestSMRNumber_UnderSameWeatherCondition[i][CarbonTaxForOPFList.index(200)], fontsize = 8, alpha = 0.85)  

            ## set legend
            pos = ax1.get_position()
            ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
            ax1.legend(
                loc="upper center",
                fontsize = legendFontSize,
                ncol=3,
                bbox_to_anchor=(0.5, 0.072),
                frameon=False,
                bbox_transform=fig.transFigure 
                ) 
            plt.tight_layout()
            self.mkdirFilePath(self.diagramPath, "weightImapct/") 
            plt.savefig(self.diagramPath + 'weightImapct/' + 'SMRvsCarbonTax_(weightImpact)_weather_%s.pdf' % (weatherConditionList[w][2]), dpi = 1200, bbox_inches='tight')
            plt.clf()
            plt.cla()
            
            #################################################################################################################################
            ##-- Plot the multiple line chart of the Annualised Total Cost vs carbon tax of each weight under the same weather condition --##
            fig, ax1 = plt.subplots()
            ax2 = ax1.twinx()
            ay1 = ax1.twiny()
            ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
            ax1.set_ylabel("Annualised total cost (£B/yr)", fontsize = labelFontSize)

            ax1.xaxis.set_minor_locator(xminor)
            ax1.xaxis.set_major_locator(xmajor)
            ax2.xaxis.set_minor_locator(xminor)
            ax2.xaxis.set_major_locator(xmajor)
            ay1.xaxis.set_minor_locator(xminor)
            ay1.xaxis.set_major_locator(xmajor)
            ax1.tick_params(direction="in", which="minor", length=2.5)
            ax1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ax2.tick_params(direction="in", which="minor", length=2.5)
            ax2.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ay1.tick_params(direction="in", which="minor", length=2.5)
            ay1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ax2.tick_params(direction='in')
            ax2.axes.yaxis.set_ticklabels([])
            ay1.axes.xaxis.set_ticklabels([])

            baseCost_UnderSameWeatherCondition[0] = numpy.array(baseCost_UnderSameWeatherCondition[0])/1E3
            ## base case for the current weather condition, the base case is not changed with the weight
            ax1.plot(CarbonTaxForOPFList, baseCost_UnderSameWeatherCondition[0], label = 'No SMR', color = 'red', linestyle = lineStyleList[1], alpha=0.6, linewidth = 1.7)
            ax2.plot(CarbonTaxForOPFList, baseCost_UnderSameWeatherCondition[0], alpha=0)
            ay1.plot(CarbonTaxForOPFList, baseCost_UnderSameWeatherCondition[0], alpha=0)

            for j in range(len(bestCost_UnderSameWeatherCondition)):
                bestCost_UnderSameWeatherCondition[j] = numpy.array(bestCost_UnderSameWeatherCondition[j])/1E3
                weightLabel = 'Weight: ' + str(round(self.weighterList[j], 2))
                ax1.plot(CarbonTaxForOPFList, bestCost_UnderSameWeatherCondition[j], marker = markersList[j], label = weightLabel, color = colors[j], linestyle = lineStyleList[j], markersize = 2)
                ax2.plot(CarbonTaxForOPFList, bestCost_UnderSameWeatherCondition[j], color = colors[j], alpha=0)      
                ay1.plot(CarbonTaxForOPFList, bestCost_UnderSameWeatherCondition[j], color = colors[j], alpha=0)  
            
            pos = ax1.get_position()
            ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
            ax1.legend(
                loc="upper center",
                fontsize = legendFontSize,
                ncol=3,
                bbox_to_anchor=(0.5, 0.072),
                frameon=False,
                bbox_transform=fig.transFigure 
                ) 
            plt.tight_layout()
            self.mkdirFilePath(self.diagramPath, "weightImapct/") 
            plt.savefig(self.diagramPath + 'weightImapct/' + 'CostvsCarbonTax_(weightImpact)_weather_%s.pdf' % (weatherConditionList[w][2]), dpi = 1200, bbox_inches='tight')
            plt.clf()
            plt.cla()

            #################################################################################################################################
            ##-- Plot the multiple line chart of the CO2 emission vs carbon tax --##
            fig, ax1 = plt.subplots()
            ax2 = ax1.twinx()
            ay1 = ax1.twiny()
            ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
            ax1.set_ylabel("Annual CO${_2}$ emission (t/yr)", fontsize = labelFontSize)

            ax1.xaxis.set_minor_locator(xminor)
            ax1.xaxis.set_major_locator(xmajor)
            ax2.xaxis.set_minor_locator(xminor)
            ax2.xaxis.set_major_locator(xmajor)
            ay1.xaxis.set_minor_locator(xminor)
            ay1.xaxis.set_major_locator(xmajor)
            ax1.tick_params(direction="in", which="minor", length=2.5)
            ax1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ax2.tick_params(direction="in", which="minor", length=2.5)
            ax2.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ay1.tick_params(direction="in", which="minor", length=2.5)
            ay1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
            ax2.tick_params(direction='in')
            ax2.axes.yaxis.set_ticklabels([])
            ay1.axes.xaxis.set_ticklabels([])

            ax1.plot(CarbonTaxForOPFList, baseCO2Emission_UnderSameWeatherCondition[0], label = 'No SMR', color = 'red', linestyle = lineStyleList[1], alpha=0.6, linewidth = 1.7)
            ax2.plot(CarbonTaxForOPFList, baseCO2Emission_UnderSameWeatherCondition[0], alpha=0)
            ay1.plot(CarbonTaxForOPFList, baseCO2Emission_UnderSameWeatherCondition[0], alpha=0)

            for i in range(len(bestCO2Emission_UnderSameWeatherCondition)):
                weightLabel = 'Weight = ' + str(round(self.weighterList[i], 2))
                ax1.plot(CarbonTaxForOPFList, bestCO2Emission_UnderSameWeatherCondition[i], marker = markersList[i], label = weightLabel, color = colors[i], linestyle = lineStyleList[i], markersize = 2)
                ax2.plot(CarbonTaxForOPFList, bestCO2Emission_UnderSameWeatherCondition[i], color = colors[i], alpha=0)  
                ay1.plot(CarbonTaxForOPFList, bestCO2Emission_UnderSameWeatherCondition[i], color = colors[i], alpha=0)        
    
            pos = ax1.get_position()
            ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
            ax1.legend(
                loc="upper center",
                fontsize = legendFontSize,
                ncol=3,
                bbox_to_anchor=(0.5, 0.072),
                frameon=False,
                bbox_transform=fig.transFigure 
                ) 
            plt.tight_layout()
            self.mkdirFilePath(self.diagramPath, "weightImapct/") 
            plt.savefig(self.diagramPath + 'weightImapct/' + 'CO2EmissionvsCarbonTax_(weightImpact)_weather_%s.pdf' % (weatherConditionList[w][2]), dpi = 1200, bbox_inches='tight')
            plt.clf()
            plt.cla()
        return
     
    """Multiple line chart demonstrate the carbon emission reduction due to both the carbon tax and SMR introduction under the same weather"""
    def lineGraph_SMRImpactForCO2Emission(self, summary_eachSMRDesign:list, NumberOfSMRUnitList:list, CarbonTaxForOPFList:list, weatherConditionList:list):    
        # CarbonTaxForOPFList = CarbonTaxForOPFList[:-3]        
        if len(summary_eachSMRDesign) != len(NumberOfSMRUnitList):
            raiseExceptions("The length of the result list should equal to the number of the SMR list number!")
        
        ## x axis scale (carbon tax)
        xmajor = MultipleLocator(50)
        xminor = MultipleLocator(10)

        for w in range(len(weatherConditionList)):
            for weight_index in range(len(self.weighterList)):
                CO2Emission_sameWeatherSameWeight = []
                zeroFlag = False
                for sei, result_sameSMR in enumerate(summary_eachSMRDesign):
                    CO2Emission_sameSMRNumber = []
                    for c in range(len(CarbonTaxForOPFList)):
                        CO2Emission = result_sameSMR[c][w][1][weight_index]
                        CO2Emission_sameSMRNumber.append(CO2Emission)
                    if round(CO2Emission_sameSMRNumber[0], 0) == 0 and zeroFlag is False:
                        zeroFlag = True
                    elif round(CO2Emission_sameSMRNumber[0], 0) == 0 and zeroFlag is True:
                        smrNumber = NumberOfSMRUnitList[sei]
                        print('The saturated number of the SMR for the weather condition', weatherConditionList[w][2], 'is', str(smrNumber))
                        break
                    CO2Emission_sameWeatherSameWeight.append(CO2Emission_sameSMRNumber)

                ## Reduce the length of CO2Emission_sameSMRNumber to 6
                interval = math.ceil(len(CO2Emission_sameWeatherSameWeight) / 6)
                CO2Emission_sameWeatherSameWeight_reduced = []
                index_e = 0
                while index_e < len(CO2Emission_sameWeatherSameWeight):
                    CO2Emission_sameWeatherSameWeight_reduced.append(CO2Emission_sameWeatherSameWeight[index_e])
                    index_e += interval
                
                if len(CO2Emission_sameWeatherSameWeight_reduced) < 6 and (index_e - interval) != (len(CO2Emission_sameWeatherSameWeight) - 1):
                    CO2Emission_sameWeatherSameWeight_reduced.append(CO2Emission_sameWeatherSameWeight[-1])

                if CO2Emission_sameWeatherSameWeight_reduced[-1] != CO2Emission_sameWeatherSameWeight[-1]:
                    CO2Emission_sameWeatherSameWeight_reduced.append(CO2Emission_sameWeatherSameWeight[-1])

                ## set up the clourmap
                cmap = mpl.cm.get_cmap("viridis", len(CO2Emission_sameWeatherSameWeight_reduced))
                colors = cmap(numpy.linspace(0, 1, len(CO2Emission_sameWeatherSameWeight_reduced)))
                ##-- Plot the multiple line chart of the CO2 emission vs carbon tax of different SMR numbers at differnt Weight and different weather condition --##
                fig, ax1 = plt.subplots()
                ax2 = ax1.twinx()
                ay1 = ax1.twiny()
                ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                ax1.set_ylabel("CO${_2}$ emission (t/yr)", fontsize = labelFontSize)
                ax1.xaxis.set_minor_locator(xminor)
                ax1.xaxis.set_major_locator(xmajor)
                ax2.xaxis.set_minor_locator(xminor)
                ax2.xaxis.set_major_locator(xmajor)
                ay1.xaxis.set_minor_locator(xminor)
                ay1.xaxis.set_major_locator(xmajor)
                ax1.tick_params(direction="in", which="minor", length=2.5)
                ax1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
                ax2.tick_params(direction="in", which="minor", length=2.5)
                ax2.tick_params(direction="in", which="major", labelsize=10, length=3.5)
                ay1.tick_params(direction="in", which="minor", length=2.5)
                ay1.tick_params(direction="in", which="major", labelsize=10, length=3.5)
                ax2.tick_params(direction='in')
                ax2.axes.yaxis.set_ticklabels([])
                ay1.tick_params(direction='in')
                ay1.axes.xaxis.set_ticklabels([])

                text = weatherConditionList[w][2] + "_weight(" + str(self.weighterList[weight_index]) + ")"
                for i in range(len(CO2Emission_sameWeatherSameWeight_reduced)):  
                    original_i = CO2Emission_sameWeatherSameWeight.index(CO2Emission_sameWeatherSameWeight_reduced[i])
                    ax1.plot(CarbonTaxForOPFList, CO2Emission_sameWeatherSameWeight_reduced[i], color = colors[i], label = str(NumberOfSMRUnitList[original_i]) + " SMRs")
                    ax2.plot(CarbonTaxForOPFList, CO2Emission_sameWeatherSameWeight_reduced[i], color = colors[i], alpha=0) 
                    ay1.plot(CarbonTaxForOPFList, CO2Emission_sameWeatherSameWeight_reduced[i], color = colors[i], alpha=0) 


                if weatherConditionList[w][2] in ['WHSH']:
                    anchor = (0.5, 0.09)
                    maxEmission = 2700
                    labelHight = 1800
                elif weatherConditionList[w][2] in ['WHSL']:
                    anchor = (0.5, 0.09)
                    maxEmission = 3200
                    labelHight = 2300
                elif weatherConditionList[w][2] in ['WLSH']:
                    anchor = (0.5, 0.09)
                    maxEmission = 4800
                    labelHight = 3600
                elif weatherConditionList[w][2] in ['WLSL']:
                    anchor = (0.5, 0.09)
                    maxEmission = 5100
                    labelHight = 4100

                ## vertical line
                ax1.vlines(60, 0, maxEmission, color = '#808080', alpha=0.5, linestyle = lineStyleList[1]) 
                ax2.vlines(60, 0, maxEmission, color = '#808080', alpha=0, linestyle = lineStyleList[1])
                ax1.vlines(70, 0, maxEmission, color = '#808080', alpha=0.5, linestyle = lineStyleList[1])
                ax2.vlines(70, 0, maxEmission, color = '#808080', alpha=0, linestyle = lineStyleList[1])

                plt.annotate('(a)', (25, labelHight), fontsize = annotateSize, xycoords='data', color='#636363')  ## label the zones 
                plt.annotate('(b)', (60, labelHight), fontsize = annotateSize, xycoords='data', color='#636363') 
                plt.annotate('(c)', (90, labelHight), fontsize = annotateSize, xycoords='data', color='#636363') 
                
                ## assign the col number of the legend 
                n_col = 3
                if len(CO2Emission_sameWeatherSameWeight_reduced) > 6:
                    n_col = 4

                ax1.legend(
                    loc="upper center",
                    fontsize = legendFontSize,
                    ncol = n_col,
                    bbox_to_anchor = anchor,
                    frameon=False,
                    bbox_transform=fig.transFigure 
                )   
                plt.tight_layout()
                self.mkdirFilePath(self.diagramPath, "SMRImpactInEmission/")
                plt.savefig(self.diagramPath + 'SMRImpactInEmission/' + 'EmissionvsCarbonTaxOfDifferentSMRNumber_(SMRImpact)_%s.pdf' % text, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()
        return

    """Energy breakdown graph for each SMR design vs carbon tax"""
    def stackAreaGraph_EnergyBreakDownForEachSMRDesign(self, energyBreakdown_eachSMRDesign, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList):
        # CarbonTaxForOPFList = CarbonTaxForOPFList[:-3]       
        if len(energyBreakdown_eachSMRDesign) != len(NumberOfSMRUnitList):
            raiseExceptions("The length of the result list should equal to the number of the SMR list number!")
        ## set up the clourmap
        colorList = ["#ffcc33", "#13bef2", "#008080", "#1B2631", "#99A3A4", "#361b20", "#cc3300", "#1e8700", "#AFED8F"]
        ## ['Solar' 'Wind' 'Hydro' 'Oil' 'NaturalGas' 'Coal' 'Nuclear'  'SMR' 'Others']

        if 'Nuclear' in genTypeLabel:
            i_Nuclear = genTypeLabel.index('Nuclear')
            genTypeLabel[i_Nuclear] = 'Conventional Nuclear'

        if 'NaturalGas' in genTypeLabel:
            i_NaturalGas = genTypeLabel.index('NaturalGas')
            genTypeLabel[i_NaturalGas] = 'Natural Gas'

        for w in range(len(weatherConditionList)):
            for weight_index in range(len(self.weighterList)):
                for result_sameSMR in energyBreakdown_eachSMRDesign:
                    energyBreakdown_sameSMRNumber = [ [] for i in range(len(genTypeLabel))]
                    smrNumber = NumberOfSMRUnitList[energyBreakdown_eachSMRDesign.index(result_sameSMR)]
                    for c in range(len(CarbonTaxForOPFList)):
                        for eb_index, eb in enumerate(result_sameSMR[c][w][weight_index]):
                            energyBreakdown_sameSMRNumber[eb_index].append(eb/1E3)

                    fig, ax1 = plt.subplots()
                    ax2 = ax1.twinx()
                    ay1 = ax1.twiny()
                    ax1.set_xlabel("Carbon tax (£/t)", fontsize = labelFontSize)
                    ax1.set_ylabel("Generation output (GW)", fontsize = labelFontSize)
                    ax1.tick_params(direction='in')
                    ax2.tick_params(direction='in')
                    ax2.axes.yaxis.set_ticklabels([])
                    ay1.tick_params(direction='in') 
                    ay1.axes.xaxis.set_ticklabels([])

                    ax1.stackplot(CarbonTaxForOPFList, energyBreakdown_sameSMRNumber, labels = genTypeLabel, colors = colorList, alpha=0.8)
                    ax2.stackplot(CarbonTaxForOPFList, energyBreakdown_sameSMRNumber, alpha=0) 
                    ay1.stackplot(CarbonTaxForOPFList, energyBreakdown_sameSMRNumber, alpha=0) 
                    
                    pos = ax1.get_position()
                    ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
                    ax1.legend(
                        loc="upper center",
                        fontsize = legendFontSize,
                        ncol=3,
                        bbox_to_anchor=(0.5, 0.12),
                        frameon=False,
                        bbox_transform=fig.transFigure 
                        ) 
                    plt.tight_layout()
                    self.mkdirFilePath(self.diagramPathStack, "EachSMRDesignEnergyBreakDown/")
                    text = 'SMR_' + str(smrNumber) + '_' + weatherConditionList[w][2] + " (" + str(self.weighterList[weight_index]) + ")"        
                    plt.savefig(self.diagramPathStack + 'EachSMRDesignEnergyBreakDown/' + 'EnergyBreakdown_%s.pdf' % text, dpi = 1200, bbox_inches='tight')
                    plt.clf()
                    plt.cla()
        return

    """Energy breakdown graph for optimised SMR design vs carbon tax at each weight level"""
    def stackAreaGraph_EnergyBreakDownForOptimisedDesign(self, summary_eachSMRDesign, energyBreakdown_eachSMRDesign, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList, pickedWeightList):
        # CarbonTaxForOPFList = CarbonTaxForOPFList[:-3]
        
        if len(energyBreakdown_eachSMRDesign) != len(NumberOfSMRUnitList):
            raiseExceptions("The length of the result list should equal to the number of the SMR list number!")
        ## set up the clourmap
        colorList = ["#ffcc33", "#13bef2", "#008080", "#1B2631", "#99A3A4", "#361b20", "#cc3300", "#1e8700", "#AFED8F"]
        ## ['Solar' 'Wind' 'Hydro' 'Oil' 'NaturalGas' 'Coal' 'Nuclear'  'SMR' 'Others']

        if 'Nuclear' in genTypeLabel:
            i_Nuclear = genTypeLabel.index('Nuclear')
            genTypeLabel[i_Nuclear] = 'Conventional Nuclear'

        if 'NaturalGas' in genTypeLabel:
            i_NaturalGas = genTypeLabel.index('NaturalGas')
            genTypeLabel[i_NaturalGas] = 'Natural Gas'

        for w in range(len(weatherConditionList)):
            for pickedWeight in pickedWeightList:
                weight_index = self.weighterList.index(pickedWeight)           
                bestSMRNumberIndex_UnderSameWeatherAndSameWeight = []
                for c in range(len(CarbonTaxForOPFList)):
                    costResult_sameCarbonTaxDifferentSMRNumber = []
                    for result_sameSMR in summary_eachSMRDesign:
                        cost = result_sameSMR[c][w][0][weight_index] ## the index 0 refers to the the cost and 1 refers to the CO2 emission 
                        costResult_sameCarbonTaxDifferentSMRNumber.append(cost)
                    ## pick the minimum 
                    bestCost_underSameCarbonTax = min(costResult_sameCarbonTaxDifferentSMRNumber)
                    index_ = costResult_sameCarbonTaxDifferentSMRNumber.index(bestCost_underSameCarbonTax)
                    bestSMRNumberIndex_UnderSameWeatherAndSameWeight.append(index_)

                energyBreakdown_sameWeatherAndSameWeight = [ [] for i in range(len(genTypeLabel))]
                for eb in range(len(energyBreakdown_sameWeatherAndSameWeight)):
                    for c in range(len(CarbonTaxForOPFList)):
                        smrIndex = bestSMRNumberIndex_UnderSameWeatherAndSameWeight[c]
                        energyBreakdown_singleSource = energyBreakdown_eachSMRDesign[smrIndex][c][w][weight_index][eb]
                        energyBreakdown_sameWeatherAndSameWeight[eb].append(energyBreakdown_singleSource)
              
                fig, ax1 = plt.subplots()
                ax2 = ax1.twinx()
                ay1 = ax1.twiny()
                ax1.set_xlabel("Carbon Tax (£/t)", fontsize = labelFontSize)
                ax1.set_ylabel("Generation Breakdown (MW)", fontsize = labelFontSize)
                ax1.tick_params(direction = 'in')
                ax2.tick_params(direction='in')
                ax2.axes.yaxis.set_ticklabels([])
                ay1.tick_params(direction='in') 
                ay1.axes.xaxis.set_ticklabels([])

                ax1.stackplot(CarbonTaxForOPFList, energyBreakdown_sameWeatherAndSameWeight, labels = genTypeLabel, colors = colorList, alpha=0.8)
                ax2.stackplot(CarbonTaxForOPFList, energyBreakdown_sameWeatherAndSameWeight, alpha=0) 
                ay1.stackplot(CarbonTaxForOPFList, energyBreakdown_sameWeatherAndSameWeight, alpha=0) 
                
                pos = ax1.get_position()
                ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
                ax1.legend(
                    loc="upper center",
                    fontsize = legendFontSize,
                    ncol=3,
                    bbox_to_anchor=(0.5, 0.12),
                    frameon=False,
                    bbox_transform=fig.transFigure 
                    ) 
                plt.tight_layout()
                self.mkdirFilePath(self.diagramPathStack, "OptimisedEnergyBreakdownEnergyBreakDown/")
                text = weatherConditionList[w][2] + "_weight(" + str(pickedWeight) + ")"        
                plt.savefig(self.diagramPathStack + 'OptimisedEnergyBreakdownEnergyBreakDown/' + 'OptimisedEnergyBreakdown_%s.pdf' % text, dpi = 1200, bbox_inches='tight')
                plt.clf()
                plt.cla()
        return

    """Energy breakdown graph for each SMR design vs carbon tax"""
    def stackAreaGraphOverlayedWithBarChart_SMRvsCapacity(self, givenNumberofSMR, reported_consumption, plannedNuclearCapacity):
        colorList = ["#08306b", "#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1", "#c6dbef", "#deebf7"]
        genTypeLabelForCapacity =  ['Coal', 'Oil', 'Natural Gas', 'Bioenergy & Others', 'Conventional Nuclear','Hydro', 'Solar', 'Wind' ]
        capa2022 = [3.9, 1.084, 30.768, 3.861, 6.848, 1.465, 4.743, 23.656]
        
        s_i = 0
        energyBreakdown = [ [] for i in range(len(genTypeLabelForCapacity))]
        while s_i <= givenNumberofSMR:
            for eb_index, eb in enumerate(capa2022):
                energyBreakdown[eb_index].append(eb)
            s_i += 1
        SMRList = [i for i in range(givenNumberofSMR + 1)]
        SMRCapcityList = [i*self.SMRCapability/1E3 for i in range(givenNumberofSMR + 1)]
     
        fig, ax1 = plt.subplots()
        ax2 = ax1.twinx()
        ay1 = ax1.twiny()
        ax1.set_xlabel("Number of SMRs (-)", fontsize = labelFontSize)
        ax1.set_ylabel("Capacity (GW)", fontsize = labelFontSize)
        ax1.tick_params(direction='in')
        ax2.tick_params(direction='in')
        ax2.axes.yaxis.set_ticklabels([])
        ay1.tick_params(direction='in') 
        ay1.axes.xaxis.set_ticklabels([])

        stacks = ax1.stackplot(SMRList, energyBreakdown, labels = genTypeLabelForCapacity, colors = colorList, alpha=0.9)
        ax2.stackplot(SMRList, energyBreakdown, alpha=0) 
        ay1.stackplot(SMRList, energyBreakdown, alpha=0) 

        ## Add bar chart for SMR
        bars = ax1.bar(SMRList, SMRCapcityList, color='#00ff99', alpha=0.7, hatch='.',linewidth=0.1) #  009900
        for bar in bars:
            bar.set_hatch('x'*3)
            bar.set_linewidth(0.01)

        ## horizontal line for current CO2 emission, 2022: 53.7 Mt
        ax1.axhline(y=float(reported_consumption), color='#1a1a1a', linestyle='dashdot', alpha=1, lw = 0.7) #ffffff
        ax2.axhline(y=float(reported_consumption), color='#1a1a1a', linestyle='dashdot', alpha=0, lw = 0.7)
        ax1.axhline(y=float(plannedNuclearCapacity), color='#1a1a1a', linestyle='dashdot', alpha=1, lw = 0.7) #ffffff
        ax2.axhline(y=float(plannedNuclearCapacity), color='#1a1a1a', linestyle='dashdot', alpha=0, lw = 0.7)
        ax1.text(20, float(reported_consumption)+ 1, 'GB average generation (2022): '+ str(reported_consumption) + ' GW', color='#ffffff', fontsize = 10, alpha = 1)  
        ax1.text(16, float(plannedNuclearCapacity)+ 1, 'Target nuclear capacity by 2050: '+ str(plannedNuclearCapacity) + ' GW', color='#ffffff', fontsize = 10, alpha = 1)  
        

        pos = ax1.get_position()
        ax1.set_position([pos.x0, pos.y0, pos.width, pos.height * 0.85])
        ax1.legend(
            stacks + [bars], 
            genTypeLabelForCapacity + ['SMR'],
            loc="upper center",
            fontsize = legendFontSize,
            ncol=3,
            bbox_to_anchor=(0.5, 0.12),
            frameon=False,
            bbox_transform=fig.transFigure 
            ) 
        plt.tight_layout()
        self.mkdirFilePath(self.diagramPathStack, "SMRvsCapacity/")
        plt.savefig(self.diagramPathStack + 'SMRvsCapacity/' + 'SMRvsCapacity.pdf', dpi = 1200, bbox_inches='tight')
        plt.clf()
        plt.cla()
        return

    """The multiple bar chart showing the output of the region"""
    def barChart_outputOfRegion(self, energyBreakdownList, NumberOfSMRUnitList, CarbonTaxForOPFList, weatherConditionList, specifiedConfigList:list):
        weatherNameList = []
        for weather in weatherConditionList:
            weatherNameList.append(weather[2])

        if specifiedConfigList == [] or specifiedConfigList == [[]]:
            raise ValueError('specifiedConfigList should contain at list 1 non-empty list.')
        for cf in specifiedConfigList:
            if len(cf) < 3:
                raise ValueError('The sub list of the specifiedConfigList should contain at least 3 elements specifying the SMR number, carbon tax and weather condition.')
            elif len(cf) == 3: ## SMR number, Carbon tax, weather condition 
                if not cf[0] in NumberOfSMRUnitList:
                    raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                else:
                    smrIndex = NumberOfSMRUnitList.index(cf[0])
                if not cf[1] in CarbonTaxForOPFList:
                    raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                else:
                    carbonTaxList = CarbonTaxForOPFList.index(cf[1])

                if not cf[2] in weatherNameList:
                    raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                else:
                    weatherIndex = weatherNameList.index(cf[2])
                
                specifiedEnergyBreakdownList = energyBreakdownList[smrIndex][carbonTaxList][weatherIndex]
                baseCase_specifiedEnergyBreakdownList = energyBreakdownList[0][carbonTaxList][weatherIndex]
                
                for i_weight, energyBreakdown_eachWeight in enumerate(specifiedEnergyBreakdownList):
                    ## check the storage path
                    subPath = 'SMR_'+ str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(self.weighterList[i_weight])
                    self.mkdirFilePath(self.barChartOutput, '')
                    outputList = [0 for i in range(len(energyBreakdown_eachWeight))]
                    outputList_basecase = [0 for i in range(len(energyBreakdown_eachWeight))]
                    for energyBreakdown_eachRegion in energyBreakdown_eachWeight:
                        LAcode = energyBreakdown_eachRegion["RegionalLACode"]
                        if LAcode[0] == "W":
                            outputList[9] = round(energyBreakdown_eachRegion['totalOutput']/1000, 2)
                        elif LAcode[0] == "S":
                            outputList[10] = round(energyBreakdown_eachRegion['totalOutput']/1000, 2)
                        else:
                            outputList[int(LAcode[-1]) - 1] = round(energyBreakdown_eachRegion['totalOutput']/1000, 2) 

                    for eb_base in baseCase_specifiedEnergyBreakdownList[i_weight]:
                        LAcode = eb_base["RegionalLACode"]
                        if LAcode[0] == "W":
                            outputList_basecase[9] = round(eb_base['totalOutput']/1000, 2)
                        elif LAcode[0] == "S":
                            outputList_basecase[10] = round(eb_base['totalOutput']/1000, 2)
                        else:
                            outputList_basecase[int(LAcode[-1]) - 1] = round(eb_base['totalOutput']/1000, 2) 
                        
                    ## Create bar chart
                    bar_width = 0.35
                    x = numpy.arange(len(officialRegionNameList))

                    plt.barh(x - bar_width/2, outputList, bar_width, label='SMR adoption', color = "#1a7a4c", alpha = 0.7)
                    plt.barh(x + bar_width/2, outputList_basecase, bar_width, label='Base case', color = "#2B493F", alpha = 0.7)
                    plt.xlabel('Regional output (GW)')
                    plt.ylabel('Regions/Countries')
                    plt.yticks(x, officialRegionNameList)  # Set the y-axis labels to the categories
                    plt.legend()
                    plt.legend(
                        loc="upper center",
                        ncol=2,
                        bbox_to_anchor=(0.5, -0.15),
                        frameon=False
                        ) 
                    plt.tight_layout()
                    file_label = 'RegionalOutput_BarChart_' + subPath + '.pdf' 
                    plt.savefig(self.barChartOutput + file_label, dpi = 1200, bbox_inches='tight', transparent=True)
                    plt.clf()
                    plt.cla()                                         
            elif len(cf) == 4: ## SMR number, Carbon tax, weather condition, weight 
                if not cf[0] in NumberOfSMRUnitList:
                    raise ValueError('The first element of the sub list of the specifiedConfigList should be SMR number.')
                else:
                    smrIndex = NumberOfSMRUnitList.index(cf[0])
                if not cf[1] in CarbonTaxForOPFList:
                    raise ValueError('The second element of the sub list of the specifiedConfigList should be carbon tax.')
                else:
                    carbonTaxList = CarbonTaxForOPFList.index(cf[1])
                if not cf[2] in weatherNameList:
                    raise ValueError('The second element of the sub list of the specifiedConfigList should be werather condition.')
                else:
                    weatherIndex = weatherNameList.index(cf[2]) 
                if not cf[3] in self.weighterList:
                    raise ValueError('The second element of the sub list of the specifiedConfigList should be weight.')
                else:
                    weightIndex = self.weighterList.index(cf[3]) 
                
                specifiedEnergyBreakdownList = energyBreakdownList[smrIndex][carbonTaxList][weatherIndex][weightIndex]
                baseCase_specifiedEnergyBreakdownList = energyBreakdownList[0][carbonTaxList][weatherIndex][weightIndex]
                                
                ## check the storage path
                subPath = 'SMR_'+ str(cf[0]) + '_CarbonTax_' + str(cf[1]) + '_weatherCondition_' + str(cf[2]) + '_weight_' + str(cf[3])
                self.mkdirFilePath(self.barChartOutput, '')
                outputList = [0 for i in range(len(specifiedEnergyBreakdownList))]
                outputList_basecase = [0 for i in range(len(specifiedEnergyBreakdownList))]
                for energyBreakdown_eachRegion in specifiedEnergyBreakdownList:
                    LAcode = energyBreakdown_eachRegion["RegionalLACode"]
                    if LAcode[0] == "W":
                        outputList[9] = round(energyBreakdown_eachRegion['totalOutput']/1000, 2)
                    elif LAcode[0] == "S":
                        outputList[10] = round(energyBreakdown_eachRegion['totalOutput']/1000, 2)
                    else:
                        outputList[int(LAcode[-1]) - 1] = round(energyBreakdown_eachRegion['totalOutput']/1000, 2) 

                for eb_base in baseCase_specifiedEnergyBreakdownList:
                    LAcode = eb_base["RegionalLACode"]
                    if LAcode[0] == "W":
                        outputList_basecase[9] = round(eb_base['totalOutput']/1000, 2)
                    elif LAcode[0] == "S":
                        outputList_basecase[10] = round(eb_base['totalOutput']/1000, 2)
                    else:
                        outputList_basecase[int(LAcode[-1]) - 1] = round(eb_base['totalOutput']/1000, 2) 
                        
                ## Create pie chart

                bar_width = 0.35
                x = numpy.arange(len(officialRegionNameList))

                plt.barh(x - bar_width/2, outputList, bar_width, label='SMR adoption', color = "#1a7a4c", alpha = 0.7)
                plt.barh(x + bar_width/2, outputList_basecase, bar_width, label='Base case', color = "#2B493F", alpha = 0.7)
                plt.xlabel('Regional output (GW)')
                plt.ylabel('Regions/Countries')
                plt.yticks(x, officialRegionNameList)  # Set the y-axis labels to the categories
                plt.legend()
                plt.legend(
                    loc="upper center",
                    ncol=2,
                    bbox_to_anchor=(0.5, -0.15),
                    frameon=False
                    ) 
                plt.tight_layout()
                file_label = 'RegionalOutput_BarChart_' + subPath + '.pdf' 
                plt.savefig(self.barChartOutput + file_label, dpi = 1200, bbox_inches='tight', transparent=True)
                plt.clf()
                plt.cla()        
            else:
                raise ValueError('Invailed sub list of the specifiedConfigList.')                    
        return

    """Create the folrder path for maintaining the files for Mapbox visulisation"""
    def MAPBOX_Preparation_FolderPath(self, regionalOutputConfig):
        ## Folder for regional output files
        path_regional = str(Path(__file__).resolve().parent.parent.parent) + "/outputs/MAPBOX_files/SMR_FossilPlant_output/%sbus_LCOE_%s£/"%(str(self.numOfBus), str(self.SMR_LCOE))
        for rc in regionalOutputConfig:
            path = path_regional + "weather_" + str(rc[2]) + "/weight_" + str(rc[3]) + "/carbonTax_" + str(rc[1]) + "/"
            folder = os.path.exists(path)
            if not folder:                
                os.makedirs(path)           
                print("---  new folder %s...  ---" % path)
            else:
                print("---  The folder exists! %s  ---" % path)
        return

if __name__ == '__main__':

    ## 1. Specify the model config, 10-bus or 29 bus 
    configName = str(input('Please specify the number of bus and number of branch (e.g. 1014 for 10-bus and 14-branch, 2999 for 29-bus and 99-branch): '))
    with open('./UK_Power_System_SMR_Replacement/SMR_Replacement/config%s.json'%configName, 'r') as config_file:
        config_data = json.load(config_file)

    ## 2. Specify the LCOE of SMR (£/MWh)
    SMR_LCOE = int(input('Please specify the LCOE of SMR (£/MWh): '))

    ## 3. Specify if generate GeoJSON file
    generateVisualisationJSON_flag = int(input('Please specify if you want to generate the geojson file for visulisation (1 for Yes, 2 for No): '))
    if generateVisualisationJSON_flag == 1:
        generateVisualisationJSON = True
    else: 
        generateVisualisationJSON = False

    ## 4. Specify if this is the post-processing
    ifReadLocalResults_flag = int(input('Please specify if you want to use the existing results for post-processing (1 for Yes, 2 for No): '))
    if ifReadLocalResults_flag == 1:
        ifReadLocalResults = True
    else: 
        ifReadLocalResults = False

    if ifReadLocalResults is False:
        ## 5. Specify if generate Pareto Front figures
        ifGenerateParetoFrontPDF_flag = int(input('Please specify if you want to create PDF files for Pareto Front (1 for Yes, 2 for No): '))
        if ifGenerateParetoFrontPDF_flag == 1:
            ifGenerateParetoFrontPDF = True
        else: 
            ifGenerateParetoFrontPDF = False

        ## 7. Number of the round
        r = int(input('Please confirm the round of this run, ranging from 1 to 6: '))

    ## 6. Specify the path for storing the raw simulation results files
    numberOfBus = config_data["NumOfBus"]
    numOfBranch = config_data["NumOfBranch"]
    rootPath = str(Path(__file__).resolve().parent.parent.parent) + "/outputs/smr_replacements/%sbus%sbranch_LCOE_%s£/"%(str(numberOfBus), str(numOfBranch), str(SMR_LCOE))

    if not ifReadLocalResults:
        folder = os.path.exists(rootPath)
        if not folder:                
            os.makedirs(rootPath)           
            print("---  new folder %s...  ---" % rootPath)
        else:
            print("---  There has npy folder!  ---")
    
    ## TODO: 8. Agent IRI and results update endpoint
    AgentIRI = "http://www.example.com/triplestore/agents/Service__XXXAgent#Service"
    updateEndPointURL = "http://kg.cmclinnovations.com:81/blazegraph_geo/namespace/ukdigitaltwin_test3/sparql"

    ## Initialise the module
    smr_replacement_for_fossil_fuel = SMR_Replacement_with_OptimalFlowAnalysis(numberOfBus, numOfBranch, config_data["slackBusLocation"],
                                                                            config_data["eliminateClosedPlantIRIList"], AgentIRI, config_data["consumptionDataVersion"], 
                                                                            config_data["loadAllocatorName"],  config_data["EBusModelVariableInitialisationMethodName"],
                                                                            config_data["ELineInitialisationMethodName"], config_data["piecewiseOrPolynomial"], 
                                                                            config_data["pointsOfPiecewiseOrcostFuncOrder"], config_data["baseMVA"], config_data["withRetrofit"],
                                                                            config_data["retrofitGenerator"], config_data["retrofitGenerationFuelOrTechType"], config_data["DecommissionedNuclearSitesLocation"],
                                                                            True, config_data["generatorClusterFunctionName"], config_data["newGeneratorType"], config_data["weighterList"],
                                                                            config_data["discountRate"], config_data["bankRate"], config_data["projectLifeSpan"], config_data["yearlyOperationHours"], 
                                                                            config_data["SMRCapitalCost"], SMR_LCOE, config_data["SMROperationalRatio"], config_data["MonetaryValuePerHumanLife"], 
                                                                            config_data["NeighbourhoodRadiusForSMRUnitOf1MW"], config_data["ProbabilityOfReactorFailure"], config_data["SMRCapability"], 
                                                                            config_data["maxmumSMRUnitAtOneSite"], config_data["SMRIntergratedDiscount"], config_data["DecommissioningCostEstimatedLevel"], 
                                                                            config_data["safeDistance"], config_data["pop_size"], config_data["n_offsprings"], config_data["numberOfGenerations"], 
                                                                            ifReadLocalResults, updateEndPointURL)  

    if not ifReadLocalResults:
        ## cutter for the SMR list 
        cutter = 5
        counter_smrChunk = r
        smr_replacement_for_fossil_fuel.powerPlantAndDemandingAreasMapper()
        smr_replacement_for_fossil_fuel.retrofitGeneratorInstanceFinder() ## determine the retrofitListBeforeSelection, population_list and weightedDemandingDistance_list
        smr_replacement_for_fossil_fuel.ModelPythonObjectInputInitialiser_BusAndBranch()

        ## cut the SMRNumberList
        newSMRNumberList = []
        numberOfSMRListChunk = math.ceil(len(config_data["NumberOfSMRUnitList"][r-1]) / cutter)
        for i in range(int(numberOfSMRListChunk)):
            if  (i + 1) * cutter < len(config_data["NumberOfSMRUnitList"][r-1]):
                SMRListChunk = config_data["NumberOfSMRUnitList"][r-1][i *cutter : (i + 1) * cutter]
            else:
                SMRListChunk = config_data["NumberOfSMRUnitList"][r-1][i *cutter :]
            newSMRNumberList.append(SMRListChunk)     
        for smrList in newSMRNumberList:
            summary_eachSMRDesign = []
            divergenceList_eachSMRDesign = []
            netDemanding_smallArea_eachSMRDesign = []
            netDemanding_regionalArea_eachSMRDesign = []
            energyBreakdown_regionalArea_eachSMRDesign = []
            branchRawResult_eachSMRDesign = []
            for numberOfSMRToBeIntroduced in smrList:
                print('===The number of SMR is: ', str(numberOfSMRToBeIntroduced))
                smr_replacement_for_fossil_fuel.siteSelector(numberOfSMRToBeIntroduced)
                smr_replacement_for_fossil_fuel.optimaPicker(ifGenerateParetoFrontPDF)            
                summary_eachCarbonTax = []
                divergenceList_eachCarbonTax = []
                netDemanding_smallArea_eachCarbonTax = []
                netDemanding_regionalArea_eachCarbonTax = []
                energyBreakdown_regionalArea_eachCarbonTax = []
                branchRawResult_eachCarbonTax = []
         
                for CarbonTaxForOPF in config_data["CarbonTaxForOPFList"]:
                    summary_eachWeather = []
                    divergenceList_eachWeather = []
                    netDemanding_smallArea_eachWeather = []
                    netDemanding_regionalArea_eachWeather = []
                    energyBreakdown_regionalArea_eachWeather = []
                    branchRawResult_eachWeather = []                  
                    for weatherCondition in config_data["weatherConditionList"]:
                        smr_replacement_for_fossil_fuel.ModelPythonObjectInputInitialiser_Generator(CarbonTaxForOPF, weatherCondition[0], weatherCondition[1], weatherCondition[2], False)
                        smr_replacement_for_fossil_fuel.OPFModelInputFormatter()
                        smr_replacement_for_fossil_fuel.OptimalPowerFlowAnalysisSimulation()
                        smr_replacement_for_fossil_fuel.ModelOutputFormatter(generateVisualisationJSON) ## JSON file is generated at this step
                        smr_replacement_for_fossil_fuel.CarbonEmissionCalculator()
                        smr_replacement_for_fossil_fuel.netDemandingCalculator(ifReadLocalResults, [])
                        smr_replacement_for_fossil_fuel.EnergyBreakdown_RegionAndSmallArea()
                       
                        summary_eachWeather.append([smr_replacement_for_fossil_fuel.totalCostList, smr_replacement_for_fossil_fuel.totalCO2EmissionList_Mt_yr,
                                                     smr_replacement_for_fossil_fuel.CO2EmissionIntensity_gperkwh, smr_replacement_for_fossil_fuel.SMRInvestmentCost, 
                                                     smr_replacement_for_fossil_fuel.annualisedOPEXList, smr_replacement_for_fossil_fuel.annualisedTotalEmissionCostList_MGBP_yr])
                        del smr_replacement_for_fossil_fuel.totalCostList, smr_replacement_for_fossil_fuel.totalCO2EmissionList_Mt_yr, 
                        smr_replacement_for_fossil_fuel.CO2EmissionIntensity_gperkwh, smr_replacement_for_fossil_fuel.SMRInvestmentCost
                        divergenceList_eachWeather.append(smr_replacement_for_fossil_fuel.divergenceList)
                        del smr_replacement_for_fossil_fuel.divergenceList
                        netDemanding_smallArea_eachWeather.append(smr_replacement_for_fossil_fuel.netDemandingList_smallAreaForEachWeight)
                        del smr_replacement_for_fossil_fuel.netDemandingList_smallAreaForEachWeight
                        netDemanding_regionalArea_eachWeather.append(smr_replacement_for_fossil_fuel.netDemandingList_regionalAreaForEachWeight)
                        del smr_replacement_for_fossil_fuel.netDemandingList_regionalAreaForEachWeight
                        energyBreakdown_regionalArea_eachWeather.append(smr_replacement_for_fossil_fuel.output_regionalAreaForEachWeight) 
                        del smr_replacement_for_fossil_fuel.output_regionalAreaForEachWeight
                        branchRawResult_eachWeather.append(smr_replacement_for_fossil_fuel.branchOutputRecoder)
                        del smr_replacement_for_fossil_fuel.branchOutputRecoder

                    summary_eachCarbonTax.append(summary_eachWeather)
                    divergenceList_eachCarbonTax.append(divergenceList_eachWeather)
                    netDemanding_smallArea_eachCarbonTax.append(netDemanding_smallArea_eachWeather)
                    netDemanding_regionalArea_eachCarbonTax.append(netDemanding_regionalArea_eachWeather)
                    energyBreakdown_regionalArea_eachCarbonTax.append(energyBreakdown_regionalArea_eachWeather)
                    branchRawResult_eachCarbonTax.append(branchRawResult_eachWeather)

                    del summary_eachWeather, divergenceList_eachWeather, netDemanding_smallArea_eachWeather, netDemanding_regionalArea_eachWeather, energyBreakdown_regionalArea_eachWeather, branchRawResult_eachWeather

                summary_eachSMRDesign.append(summary_eachCarbonTax) 
                divergenceList_eachSMRDesign.append(divergenceList_eachCarbonTax)
                netDemanding_smallArea_eachSMRDesign.append(netDemanding_smallArea_eachCarbonTax)
                netDemanding_regionalArea_eachSMRDesign.append(netDemanding_regionalArea_eachCarbonTax)
                energyBreakdown_regionalArea_eachSMRDesign.append(energyBreakdown_regionalArea_eachCarbonTax)
                branchRawResult_eachSMRDesign.append(branchRawResult_eachCarbonTax)

                del summary_eachCarbonTax, divergenceList_eachCarbonTax, netDemanding_smallArea_eachCarbonTax, \
                    netDemanding_regionalArea_eachCarbonTax, energyBreakdown_regionalArea_eachCarbonTax, branchRawResult_eachCarbonTax

            if counter_smrChunk > 1:
                summary_eachSMRDesign = (numpy.load(rootPath + "np_summary_eachSMRDesign.npy", allow_pickle=True)).tolist() + summary_eachSMRDesign 
                divergenceList_eachSMRDesign = (numpy.load(rootPath + "np_divergenceList_eachSMRDesign.npy", allow_pickle=True)).tolist() + divergenceList_eachSMRDesign 
                netDemanding_regionalArea_eachSMRDesign = (numpy.load(rootPath +"np_netDemanding_regionalArea_eachSMRDesign.npy", allow_pickle=True)).tolist() + netDemanding_regionalArea_eachSMRDesign
                energyBreakdown_regionalArea_eachSMRDesign = (numpy.load(rootPath +"np_energyBreakdown_regionalArea_eachSMRDesign.npy", allow_pickle=True)).tolist() + energyBreakdown_regionalArea_eachSMRDesign
                branchRawResult_eachSMRDesign = (numpy.load(rootPath +"np_branchRawResult_eachSMRDesign.npy", allow_pickle=True)).tolist() + branchRawResult_eachSMRDesign
                netDemanding_smallArea_eachSMRDesign = (numpy.load(rootPath +"np_netDemanding_smallArea_eachSMRDesign.npy", allow_pickle=True)).tolist() + netDemanding_smallArea_eachSMRDesign
                
            ## save raw data file
            numpy.save(rootPath + "np_summary_eachSMRDesign.npy", numpy.array(summary_eachSMRDesign))
            del summary_eachSMRDesign
            numpy.save(rootPath + "np_divergenceList_eachSMRDesign.npy", numpy.array(divergenceList_eachSMRDesign))
            del divergenceList_eachSMRDesign
            numpy.save(rootPath + "np_netDemanding_regionalArea_eachSMRDesign.npy", numpy.array(netDemanding_regionalArea_eachSMRDesign))
            del netDemanding_regionalArea_eachSMRDesign
            numpy.save(rootPath + "np_energyBreakdown_regionalArea_eachSMRDesign.npy", numpy.array(energyBreakdown_regionalArea_eachSMRDesign))
            del energyBreakdown_regionalArea_eachSMRDesign
            numpy.save(rootPath + "np_branchRawResult_eachSMRDesign.npy", numpy.array(branchRawResult_eachSMRDesign))
            del branchRawResult_eachSMRDesign
            numpy.save(rootPath + "np_netDemanding_smallArea_eachSMRDesign.npy", numpy.array(netDemanding_smallArea_eachSMRDesign))
            del netDemanding_smallArea_eachSMRDesign

            counter_smrChunk += 1   
    else:
        with open('./UK_Power_System_SMR_Replacement/SMR_Replacement/config_postProcessing_LCOE%s.json'%str(SMR_LCOE), 'r') as config_file_postp:
            config_data_postp = json.load(config_file_postp)

        # total cost and total emission
        summary_eachSMRDesign = (numpy.load(rootPath + "np_summary_eachSMRDesign.npy", allow_pickle=True)).tolist() 
        netDemanding_regionalArea_eachSMRDesign = (numpy.load(rootPath +"np_netDemanding_regionalArea_eachSMRDesign.npy", allow_pickle=True)).tolist()
        energyBreakdown_regionalArea_eachSMRDesign = (numpy.load(rootPath +"np_energyBreakdown_regionalArea_eachSMRDesign.npy", allow_pickle=True)).tolist()
        # branchRawResult_eachSMRDesign = (numpy.load(rootPath +"np_branchRawResult_eachSMRDesign.npy", allow_pickle=True)).tolist()
        # netDemanding_smallArea_eachSMRDesign = (numpy.load(rootPath +"np_netDemanding_smallArea_eachSMRDesign.npy", allow_pickle=True)).tolist()

        """The line charts"""
        for pickedWeight in config_data_postp["pickedWeightList"]:
            smr_replacement_for_fossil_fuel.lineGraph_weatherImpact(pickedWeight, config_data_postp["currentYear"], config_data_postp["currentYearlyCO2Emission_Mt"], 
                                                                    config_data_postp["estimatedCO2Emissions_Mt"], config_data_postp["calculatedCO2Emissions_Mt"],
                                                                    config_data_postp["correspondingCarbonTax"], config_data_postp["divergedPoint"],
                                                                    config_data_postp["SMRTransitionWindowLowerBound"], config_data_postp["SMRTransitionWindowUpperBound"],
                                                                    config_data_postp["NonSMRTransitionLowerBound"], config_data_postp["NonSMRTransitionUpperBound"],
                                                                    summary_eachSMRDesign, config_data["FullListOfSMRUnit"], config_data["CarbonTaxForOPFList"], 
                                                                    config_data["weatherConditionList"])
        # """Capacity figure"""
        smr_replacement_for_fossil_fuel.stackAreaGraphOverlayedWithBarChart_SMRvsCapacity(config_data_postp["givenNumberofSMR"], config_data_postp["reported_consumption"], config_data_postp["plannedNuclearCapacity"])

        """WITH SPECIFIED CONFIGRATION""" 

        if config_data_postp["ifSpecifiedResultsForNetDemanding"] in "True":
            ifSpecifiedResultsForNetDemanding = True
        else:
            ifSpecifiedResultsForNetDemanding = False

        #### smr_replacement_for_fossil_fuel.GeoJSONCreator_netDemandingForSmallArea(netDemanding_smallArea_eachSMRDesign, config_data["FullListOfSMRUnit"], config_data["CarbonTaxForOPFList"], 
        ####                                                             config_data["weatherConditionList"], ifSpecifiedResultsForNetDemanding, config_data_postp["specifiedConfig"])
        smr_replacement_for_fossil_fuel.GeoJSONCreator_netDemandingForRegionalArea(netDemanding_regionalArea_eachSMRDesign, config_data["FullListOfSMRUnit"], config_data["CarbonTaxForOPFList"], 
                                                                    config_data["weatherConditionList"], ifSpecifiedResultsForNetDemanding, config_data_postp["specifiedConfig_brchloss"])
        # smr_replacement_for_fossil_fuel.GeoJSONCreator_branchGrid(branchRawResult_eachSMRDesign, config_data["FullListOfSMRUnit"], config_data["CarbonTaxForOPFList"], 
        #                                                             config_data["weatherConditionList"], ifSpecifiedResultsForNetDemanding, config_data_postp["specifiedConfig_brchloss"])
        smr_replacement_for_fossil_fuel.GeoJSONCreator_totalOutputOfRegionalAreas(energyBreakdown_regionalArea_eachSMRDesign, config_data["FullListOfSMRUnit"], config_data["CarbonTaxForOPFList"], 
                                                                    config_data["weatherConditionList"], ifSpecifiedResultsForNetDemanding, config_data_postp["specifiedConfig_output"])  
        smr_replacement_for_fossil_fuel.GeoJSONCreator_fossilFuelPowerPlant(config_data_postp["specifiedConfig_output"])

        smr_replacement_for_fossil_fuel.MAPBOX_Preparation_FolderPath(config_data_postp["specifiedConfig_output"])

        smr_replacement_for_fossil_fuel.EnergySupplyBreakDownPieChartCreator_RegionalAreas(energyBreakdown_regionalArea_eachSMRDesign, config_data["FullListOfSMRUnit"], config_data["CarbonTaxForOPFList"], 
                                                                                           config_data["weatherConditionList"], ifSpecifiedResultsForNetDemanding, config_data_postp["specifiedConfig_pieChart"])
        
        smr_replacement_for_fossil_fuel.barChart_outputOfRegion(energyBreakdown_regionalArea_eachSMRDesign, config_data["FullListOfSMRUnit"], config_data["CarbonTaxForOPFList"], 
                                                                config_data["weatherConditionList"], config_data_postp["specifiedConfig_barChart"])
    
    print('-----Terminal-----')
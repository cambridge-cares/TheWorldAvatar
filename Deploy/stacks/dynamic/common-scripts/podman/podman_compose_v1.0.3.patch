--- a/podman_compose.py	2024-01-16 10:28:58.751849447 +0000
+++ b/podman_compose.py	2023-12-01 12:42:23.000000000 +0000
@@ -463,25 +463,14 @@
     # podman-create commands, albiet we can only support a 1:1 mapping
     # at the moment
     if declared_secret.get('external', False) or declared_secret.get('name', None):
+        ext_name = declared_secret.get('name', secret_name)
+        if not target and ext_name != secret_name:
+            target = secret_name
         secret_opts += ',uid={}'.format(uid) if uid else ''
         secret_opts += ',gid={}'.format(gid) if gid else ''
         secret_opts += ',mode={}'.format(mode) if mode else ''
-        # The target option is only valid for type=env,
-        # which in an ideal world would work
-        # for type=mount as well.
-        # having a custom name for the external secret
-        # has the same problem as well
-        ext_name = declared_secret.get('name', None)
-        err_str = 'ERROR: Custom name/target reference "{}" for mounted external secret "{}" is not supported'
-        if ext_name and ext_name != secret_name:
-            raise ValueError(err_str.format(secret_name, ext_name))
-        elif target and target != secret_name:
-            raise ValueError(err_str.format(target, secret_name))
-        elif target:
-            print('WARNING: Service "{}" uses target: "{}" for secret: "{}".'
-                    .format(cnt['_service'], target, secret_name)
-                  + ' That is un-supported and a no-op and is ignored.')
-        return [ '--secret', '{}{}'.format(secret_name, secret_opts) ]
+        secret_opts += ',target={}'.format(target) if target else ''
+        return [ '--secret', '{}{}'.format(ext_name, secret_opts) ]
 
     raise ValueError('ERROR: unparseable secret: "{}", service: "{}"'
                         .format(secret_name, cnt['_service']))

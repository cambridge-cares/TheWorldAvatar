<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.cmclinnovations</groupId>
    <artifactId>feature-info-agent</artifactId>
    <version>3.0.0</version>
    <packaging>war</packaging>

    <!-- Project properties -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.release>17</maven.compiler.release>

        <!-- Version of the JPS Base Library to use -->
        <jps.base.version>1.39.1</jps.base.version>
    </properties>

    <!-- Repository locations to deploy to -->
    <distributionManagement>
        <repository>
            <id>repo</id>
            <name>TheWorldAvatar Maven Repository</name>
            <url>https://maven.pkg.github.com/cambridge-cares/TheWorldAvatar/</url>
        </repository>
    </distributionManagement>

    <!-- Parent POM -->
    <parent>
        <groupId>uk.ac.cam.cares.jps</groupId>
        <artifactId>jps-parent-pom</artifactId>
        <version>2.2.0</version>
    </parent>

    <!-- Profiles are used to switch between building for development and production 
    environments. Use "-P profile-id" within an mvn command to build with a profile -->
    <profiles>
        <!-- This profile should be used for development builds. -->
        <profile>
            <id>dev-profile</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!-- Set property to download development logging config -->
                <log.artifact>java-logging-dev</log.artifact>
            </properties>
        </profile>

        <!-- This profile should be used for production builds. -->
        <profile>
            <id>prod-profile</id>
            <properties>
                <!-- Set property to download production logging config -->
                <log.artifact>java-logging-prod</log.artifact>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>

            <!-- Compile and build with Java 17 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <release>17</release>
                </configuration>
            </plugin>

            <!-- Allows maven executions -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
            </plugin>

            <!-- Used to execute unit tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!-- JUnit 5 requires Surefire version 2.22.0 or higher -->
                <version>2.22.0</version>
            </plugin>

            <!-- Used to build into a WAR file and ensures everything in ./WEB-INF
            gets copied into the final WAR file's internal WEB-INF directory. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <!-- Version, configuration, and executions should be pulled from the 
                parent POM unless overridden here. -->
            </plugin>

            <!-- Downloads and extracts ZIP archives from Maven repository -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <!-- Version, configuration, and executions should be pulled from the 
                parent POM unless overridden here. -->
            </plugin>

            <!-- Also build a JAR file with the compiled classes, but no web resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <finalName>feature-info-agent</finalName>      
                    <classifier>classes</classifier>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                    <archive>
                        <manifest>
                            <!-- Adds the copied dependencies to the classpath so the .jar can find them at runtime. -->
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>./lib/</classpathPrefix>
                            <classpathLayoutType>simple</classpathLayoutType>
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>package-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- During deployment, only deploy the JAR file -->
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
                <executions>
                    <execution>
                        <id>deploy-file</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>deploy-file</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <file>${project.build.directory}/feature-info-agent-classes.jar</file>
                            <repositoryId>repo</repositoryId>
                            <url>https://maven.pkg.github.com/cambridge-cares/TheWorldAvatar/</url>
                            <groupId>com.cmclinnovations</groupId>
                            <artifactId>feature-info-agent</artifactId>
                            <version>${project.version}</version>
                            <packaging>jar</packaging>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <!-- Dependencies -->
    <dependencies>

        <!-- JPS Base Library -->
        <dependency>
            <groupId>uk.ac.cam.cares.jps</groupId>
            <artifactId>jps-base-lib</artifactId>
            <version>${jps.base.version}</version>
        </dependency>

        <!-- For interacting with TheStack -->
        <dependency>
            <groupId>com.cmclinnovations</groupId>
            <artifactId>stack-clients</artifactId>
            <version>1.5.5</version>
        </dependency>

        <!-- Java servlet API, version pulled from parent -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>

        <!-- JSON handling -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20220320</version>
            <type>jar</type>
        </dependency>

        <!-- Logging, versions pulled from parent -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
        </dependency>

        <!-- Testing, versions pulled from parent -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>4.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-inline</artifactId>
            <version>4.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>

        <!-- Common IO utilities -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.11.0</version>
        </dependency>

    </dependencies>
</project>
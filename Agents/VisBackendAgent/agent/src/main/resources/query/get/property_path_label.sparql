PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT DISTINCT ?clazz ?name ?subject ?isparent ?isoptional ?multipath ?multipath_proppath ?multisubpath ?multisubpath_proppath
 ?name_multipath ?name_multipath_proppath
WHERE {
  BIND([target] as ?clazz)
  ?shape rdf:type sh:NodeShape ;
         sh:targetClass ?clazz ;
         sh:property ?property .
  ?property sh:name ?propname ;
            sh:path ?predicatepath .
  OPTIONAL {
    ?property sh:hasValue ?parentSubjectValue .
  }
  OPTIONAL {
    ?property sh:qualifiedValueShape ?parent  .
  }
  OPTIONAL {
    ?property sh:minCount ?minCount  .
  }
  # Verify numerical value
  OPTIONAL {
    ?property sh:datatype ?datatype.
  }
  # Optional query for name property label for the property
  OPTIONAL {
    ?property (sh:class|sh:in)/^sh:targetClass/sh:property ?name_property .
    ?name_property sh:name ?name_field;
                   sh:path ?name_predpath.
    FILTER(?name_field = "name")
    
    OPTIONAL {
      ?name_predpath rdf:first?[path] ?name_multipath_initial .
      # If the property path is a nested blank node, extract both the shacl path restriction eg sh:inversePath and path name
      OPTIONAL {
        ?name_multipath_initial ?name_multipath_proppath ?name_multipath_listitem .
        FILTER STRSTARTS(STR(?name_multipath_proppath), STR(sh:))
      }
      # Extract the required path variable
      BIND (IF(?name_multipath_proppath != "" && isBlank(?name_multipath_initial), ?name_multipath_listitem, ?name_multipath_initial) AS ?name_multipath)
      FILTER (BOUND(?name_multipath))
    }
   }

  # Predicate paths may be stored in a list or not, and use of ? helps to extract the related property
   OPTIONAL {
    ?predicatepath rdf:first?[path] ?multipath_initial .
    # If the property path is a nested blank node, extract both the shacl path restriction eg sh:inversePath and path name
    OPTIONAL {
      ?multipath_initial ?multipath_proppath ?multipath_listitem .
      FILTER STRSTARTS(STR(?multipath_proppath), STR(sh:))
    }
    # Extract the required path variable
    BIND (IF(?multipath_proppath != "" && isBlank(?multipath_initial), ?multipath_listitem, ?multipath_initial) AS ?multipath)
    FILTER (BOUND(?multipath))
  }
  OPTIONAL {
    ?property (sh:node/sh:property)+ ?subproperty .
    ?subproperty sh:name ?subname ;
                 sh:path ?subpath .
    OPTIONAL {
      ?subproperty sh:hasValue ?subSubjectValue .
    }
    OPTIONAL {
      ?subproperty sh:qualifiedValueShape ?subparent  .
  	}
    OPTIONAL {
      ?subproperty sh:minCount ?subMinCount  .
  	}
    # Verify numerical value
    OPTIONAL {
      ?subproperty sh:datatype ?subdatatype  .
  	}
    # Optional query for name property label for the subproperty
    OPTIONAL {
      ?subproperty (sh:class|sh:in)/^sh:targetClass/sh:property ?name_property .
      ?name_property sh:name ?name_field;
                     sh:path ?name_predpath.
      FILTER(?name_field = "name")
      OPTIONAL {
        ?name_predpath rdf:first?[path] ?name_multipath_initial .
        # If the property path is a nested blank node, extract both the shacl path restriction eg sh:inversePath and path name
        OPTIONAL {
          ?name_multipath_initial ?name_multipath_proppath ?name_multipath_listitem .
          FILTER STRSTARTS(STR(?name_multipath_proppath), STR(sh:))
        }
        # Extract the required path variable
        BIND (IF(?name_multipath_proppath != "" && isBlank(?name_multipath_initial), ?name_multipath_listitem, ?name_multipath_initial) AS ?name_multipath)
        FILTER (BOUND(?name_multipath))
      }
     }

    OPTIONAL {
      ?subpath rdf:first?[path] ?multisubpath_initial .
      OPTIONAL {
        ?multisubpath_initial ?multisubpath_proppath ?multisubpath_listitem .
        FILTER STRSTARTS(STR(?multisubpath_proppath), STR(sh:))
      }
      BIND (IF(?multisubpath_proppath != "" && isBlank(?multisubpath_initial), ?multisubpath_listitem, ?multisubpath_initial) AS ?multisubpath)
      FILTER (BOUND(?multisubpath))
    }
  }
  BIND (COALESCE(?subname, ?propname) AS ?name)
  # If there is a parent indicator, the property should be a parent
  BIND (BOUND(?parent) || BOUND(?subparent) AS ?isparent)
  # Retrieve sub target value first; Else, attempt to retrieve from parent or return null 
  BIND (IF(BOUND(?subSubjectValue), ?subSubjectValue, 
          IF(BOUND(?parentSubjectValue), ?parentSubjectValue, ?null)
   		) AS ?subject)
  # If a sub predicate path exists, it should have a sub min count property that determines if it is optional;
  # Else, check if the parent path has a min count property to determine if it is optional;
  # No min count indicates an optional property
  BIND (IF(BOUND(?subpath) && !isBlank(?subpath), !BOUND(?subMinCount), !BOUND(?minCount)) AS ?isoptional)
  # Verify if the data type is a number (integer/decimal), and subpath should take precedence
  BIND (IF(BOUND(?subdatatype), ?subdatatype = xsd:integer || ?subdatatype = xsd:decimal , 
         BOUND(?datatype) && (?datatype = xsd:integer || ?datatype =xsd:decimal)) AS ?isnumber)

  # Only retrieve results if there is either a multipath, multisubpath, or name_multipath
  FILTER(BOUND(?multipath) || BOUND(?multisubpath) || BOUND(?name_multipath))
}
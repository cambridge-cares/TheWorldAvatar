package uk.ac.cam.cares.jps.agent.dashboard.json.panel.types;

import uk.ac.cam.cares.jps.agent.dashboard.datamodel.Measure;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.UnitMapper;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.options.canvas.CanvasFrameElement;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.options.canvas.ColorOption;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.options.canvas.TextOption;
import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

import java.util.ArrayDeque;
import java.util.Queue;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about the canvas panel syntax specific to Grafana dashboard.
 *
 * @author qhouyee
 */
public class CanvasPanel extends DefaultGrafanaPanel {
    private String minMaxVals = "";
    private final Queue<CanvasFrameElement> frameElements = new ArrayDeque<>();
    private final Queue<String[]> frameElementPlacements = new ArrayDeque<>();
    private static final String TEXT_FIELD = "text";

    /**
     * Constructor to generate weather conditions for the specified time.
     *
     * @param humidityMeasure      The weather station measure for humidity.
     * @param precipitationMeasure The weather station measure for precipitation.
     * @param databaseId           The database connection ID generated by Grafana.
     * @param requiredTime         An integer option to generate conditions for the specified time up to 4 hours ago. 0 indicates current time, 1 indicates one hour ago, 2 indicates two hours ago.
     */
    public CanvasPanel(Measure humidityMeasure, Measure precipitationMeasure, String databaseId, int requiredTime) {
        super("canvas", databaseId, humidityMeasure);
        // Sets the unit for retrieval based on humidity measure
        super.setUnit(humidityMeasure.getUnit());
        // Set the min max values for thresholds
        this.minMaxVals = "\"max\":100,\"min\":0,";
        // Set up an initial description template
        String description = "A panel displaying the precipitation and humidity ";
        // Construct the query by retrieving the corresponding columns
        // Retrieve the humidity column only if it exists or else, error should be thrown
        Queue<String[]> humidityMetadata = humidityMeasure.getTimeSeriesData();
        String humidityColumn = "";
        if (!humidityMetadata.isEmpty()) {
            humidityColumn = humidityMetadata.poll()[1];
        } else {
            throw new IllegalArgumentException("Missing humidity column! Please ensure the data is valid.");
        }
        // Retrieve the precipitation column only if it exists or else, error should be thrown
        Queue<String[]> precipitationMetadata = precipitationMeasure.getTimeSeriesData();
        String precipitationColumn = "";
        if (!precipitationMetadata.isEmpty()) {
            precipitationColumn = precipitationMetadata.poll()[1];
        } else {
            throw new IllegalArgumentException("Missing precipitation column! Please ensure the data is valid.");
        }
        String query = "SELECT CONCAT(${__to:date:HH},':', ${__to:date:mm}) AS " + StringHelper.formatEscapeQuoteSQL(StringHelper.WEATHER_STATION_TIMING_FIELD) + "," +
                "CASE WHEN " + precipitationColumn + "<0.2 THEN 'â˜€' " +
                "WHEN " + precipitationColumn + ">=0.2 AND " + precipitationColumn + "<4 THEN '\uD83C\uDF26' " +
                "WHEN " + precipitationColumn + ">=4 AND " + precipitationColumn + "<30 THEN '\uD83C\uDF27' " +
                "WHEN " + precipitationColumn + ">=30 AND " + precipitationColumn + "<100 THEN '\uD83C\uDF27\uD83C\uDF27' END AS " +
                StringHelper.formatEscapeQuoteSQL(StringHelper.WEATHER_STATION_PRECIPITATION_FIELD) + "," +
                humidityColumn + " AS " + StringHelper.formatEscapeQuoteSQL(StringHelper.WEATHER_STATION_HUMIDITY_FIELD) +
                " FROM \\\"" + humidityMeasure.getTimeSeriesTable() + "\\\" " +
                "WHERE time BETWEEN TO_TIMESTAMP(${__to}/1000) - INTERVAL '5 hour' AND TO_TIMESTAMP(${__to}/1000)%s " +
                "ORDER BY time DESC LIMIT 1";
        switch (requiredTime) {
            case 0:
                // When required time is current time
                super.setTitle("T-00 (Now)");
                description = description + "at current time.";
                query = String.format(query, ""); // query should not change
                break;
            case 1:
                super.setTitle("T-01");
                description = description + "from 1 hour ago.";
                query = String.format(query, "- INTERVAL '" + requiredTime + " hour ' "); // query deduct the corresponding number of hours
                break;
            case 2:
            case 3:
            case 4:
                super.setTitle("T-0" + requiredTime);
                description = description + "from " + requiredTime + " hours ago.";
                query = String.format(query, "- INTERVAL '" + requiredTime + " hour ' "); // query deduct the corresponding number of hours
                break;
            default:
                throw new IllegalArgumentException("Invalid option: Only up to four hours ago is allowed!");
        }
        super.setDescription(description);
        super.setQuery(new StringBuilder(query));
        // Generate nested frame elements
        // First time element
        CanvasFrameElement element = new CanvasFrameElement("Timing", new TextOption(StringHelper.WEATHER_STATION_TIMING_FIELD, false),
                new ColorOption("#ccccdb26", ""), "50");
        this.frameElements.offer(element);
        this.frameElementPlacements.offer(new String[]{"75", "150", "5", "5"});
        // An emoji based on rainfall
        element = new CanvasFrameElement("Rainfall", new TextOption(StringHelper.WEATHER_STATION_PRECIPITATION_FIELD, false),
                new ColorOption(TEXT_FIELD, ""), "50");
        this.frameElements.offer(element);
        this.frameElementPlacements.offer(new String[]{"75", "150", "70", "0"});
        // Displays the humidity numbers
        element = new CanvasFrameElement("Humidity", new TextOption(StringHelper.WEATHER_STATION_HUMIDITY_FIELD, false),
                new ColorOption(TEXT_FIELD, StringHelper.WEATHER_STATION_HUMIDITY_FIELD), "30");
        this.frameElements.offer(element);
        this.frameElementPlacements.offer(new String[]{"75", "100", "140", "15"});
        // A static emoji
        element = new CanvasFrameElement("Droplet", new TextOption("\uD83D\uDCA7", true),
                new ColorOption(TEXT_FIELD, ""), "50");
        this.frameElements.offer(element);
        this.frameElementPlacements.offer(new String[]{"75", "80", "140", "95"});
    }

    /**
     * Standard Constructor for larger canvases.
     *
     * @param panelType         An integer option to create a specific canvas panel. 1: Latest temperature conditions; 2: Latest wind conditions.
     * @param measureOfInterest The weather station measure that should be displayed. Option 1 requires temperature, while option 2 requires wind direction.
     * @param feelsLikeMeasure  The weather station measure that stores the feels like values (ie heat index for option 1, wind chill for option 2).
     * @param databaseId        The database connection ID generated by Grafana.
     */
    public CanvasPanel(int panelType, Measure measureOfInterest, Measure feelsLikeMeasure, String databaseId) {
        super("canvas", databaseId, feelsLikeMeasure);
        // Sets the unit which should be based on the feels like measure
        super.setUnit(feelsLikeMeasure.getUnit());
        // Set Description for panel
        String description = "A panel displaying the latest weather conditions for " + measureOfInterest.getName() + ".";
        super.setDescription(description);
        // Construct the query by retrieving the corresponding columns
        // Retrieve the measure's column only if it exists or else, error should be thrown
        Queue<String[]> measureMetadata = measureOfInterest.getTimeSeriesData();
        String measureOfInterestColumn = "";
        if (!measureMetadata.isEmpty()) {
            measureOfInterestColumn = measureMetadata.poll()[1];
        } else {
            throw new IllegalArgumentException("Missing measure of interest column! Please ensure the data is valid.");
        }
        // Retrieve the feels like column only if it exists or else, error should be thrown
        Queue<String[]> feelsLikeMetadata = feelsLikeMeasure.getTimeSeriesData();
        String feelsLikeColumn = "";
        if (!feelsLikeMetadata.isEmpty()) {
            feelsLikeColumn = feelsLikeMetadata.poll()[1];
        } else {
            throw new IllegalArgumentException("Missing the feels like column! Please ensure the data is valid.");
        }
        String query = "";
        switch (panelType) {
            case 1:
                super.setTitle("Latest Temperature");
                query = "SELECT " + measureOfInterestColumn + " AS " + StringHelper.formatEscapeQuoteSQL(StringHelper.WEATHER_STATION_TEMPERATURE_FIELD) + "," +
                        feelsLikeColumn + " AS " + StringHelper.formatEscapeQuoteSQL(StringHelper.WEATHER_STATION_FEELS_LIKE_TEMPERATURE_FIELD) +
                        " FROM \\\"" + feelsLikeMeasure.getTimeSeriesTable() + "\\\" " +
                        "WHERE time BETWEEN TO_TIMESTAMP(${__to}/1000) - INTERVAL '5 hour' AND TO_TIMESTAMP(${__to}/1000) " +
                        "ORDER BY time DESC LIMIT 1";
                CanvasFrameElement element = new CanvasFrameElement("Temperature Measure", new TextOption(StringHelper.WEATHER_STATION_TEMPERATURE_FIELD, false),
                        new ColorOption(TEXT_FIELD, ""), "40");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"50", "150", "40", "0"});
                // An emoji where font color does not matter
                element = new CanvasFrameElement("Emoji", new TextOption("\uD83C\uDF21", true),
                        new ColorOption(TEXT_FIELD, ""), "50");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"70", "100", "20", "185"});
                // A static text element
                element = new CanvasFrameElement("Feels Like Text", new TextOption("Feels like:", true),
                        new ColorOption(TEXT_FIELD, ""), "25");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"50", "150", "100", "0"});
                element = new CanvasFrameElement("Feels Like Measure", new TextOption(StringHelper.WEATHER_STATION_FEELS_LIKE_TEMPERATURE_FIELD, false),
                        new ColorOption(TEXT_FIELD, ""), "30");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"75", "150", "90", "150"});
                break;
            case 2:
                query = "SELECT CASE WHEN " + measureOfInterestColumn + ">=337.5 OR " + measureOfInterestColumn + "<22.5 THEN 'â¬†' " +
                        "WHEN " + measureOfInterestColumn + ">=22.5 AND " + measureOfInterestColumn + "<67.5 THEN 'â†—' " +
                        "WHEN " + measureOfInterestColumn + ">=67.5 AND " + measureOfInterestColumn + "<112.5 THEN 'âž¡' " +
                        "WHEN " + measureOfInterestColumn + ">=112.5 AND " + measureOfInterestColumn + "<157.5 THEN 'â†˜' " +
                        "WHEN " + measureOfInterestColumn + ">=157.5 AND " + measureOfInterestColumn + "<202.5 THEN 'â¬‡' " +
                        "WHEN " + measureOfInterestColumn + ">=202.5 AND " + measureOfInterestColumn + "<247.5 THEN 'â†™' " +
                        "WHEN " + measureOfInterestColumn + ">=247.5 AND " + measureOfInterestColumn + "<292.5 THEN 'â¬…' " +
                        "WHEN " + measureOfInterestColumn + ">=292.5 AND " + measureOfInterestColumn + "<337.5 THEN 'â†– " +
                        "END AS " + StringHelper.formatEscapeQuoteSQL(StringHelper.WEATHER_STATION_WIND_DIRECTION_FIELD) + "," +
                        feelsLikeColumn + " AS " + StringHelper.formatEscapeQuoteSQL(StringHelper.WEATHER_STATION_WIND_CHILL_FIELD) +
                        " FROM \\\"" + feelsLikeMeasure.getTimeSeriesTable() + "\\\" " +
                        "WHERE time BETWEEN TO_TIMESTAMP(${__to}/1000) - INTERVAL '5 hour' AND TO_TIMESTAMP(${__to}/1000) " +
                        "ORDER BY time DESC LIMIT 1";
                super.setTitle("Latest Wind Conditions");
                element = new CanvasFrameElement("Direction", new TextOption(StringHelper.WEATHER_STATION_WIND_DIRECTION_FIELD, false),
                        new ColorOption(TEXT_FIELD, ""), "40");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"60", "60", "25", "55"});
                // A static text element
                element = new CanvasFrameElement("Direction Text", new TextOption("Direction", true),
                        new ColorOption(TEXT_FIELD, ""), "16");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"50", "100", "75", "40"});
                // An emoji where font color does not matter
                element = new CanvasFrameElement("Emoji", new TextOption("\uD83C\uDF90", true),
                        new ColorOption(TEXT_FIELD, ""), "70");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"100", "100", "160", "0"});
                // A static text element
                element = new CanvasFrameElement("Feels Like Text", new TextOption("Feels like:", true),
                        new ColorOption(TEXT_FIELD, ""), "25");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"50", "150", "100", "0"});
                element = new CanvasFrameElement("Feels Like Measure", new TextOption(StringHelper.WEATHER_STATION_WIND_CHILL_FIELD, false),
                        new ColorOption(TEXT_FIELD, ""), "40");
                this.frameElements.offer(element);
                this.frameElementPlacements.offer(new String[]{"50", "170", "110", "130"});
                break;
            default:
                throw new IllegalArgumentException("Invalid option: Only 1 or 2 is allowed!");
        }
        super.setQuery(new StringBuilder(query));
    }

    /**
     * Construct the Canvas Panel syntax as a String.
     *
     * @param height    Height of the panel.
     * @param width     Width of the panel.
     * @param xPosition X position within the dashboard.
     * @param yPosition Y position within the dashboard.
     * @return The panel syntax as a String.
     */
    @Override
    public String construct(int height, int width, int xPosition, int yPosition) {
        StringBuilder frameElementSyntax = new StringBuilder();
        while (!this.frameElements.isEmpty()) {
            if (frameElementSyntax.length() > 0) frameElementSyntax.append(",");
            String[] placements = this.frameElementPlacements.poll();
            String elementSyntax = this.frameElements.poll().construct(placements[0], placements[1], placements[2], placements[3]);
            frameElementSyntax.append(elementSyntax);
        }
        return "{" + super.genCommonJson(height, width, xPosition, yPosition) +
                // Field Configuration
                "\"fieldConfig\":{" +
                // Default field configuration
                "\"defaults\":{\"color\":{\"mode\": \"continuous-blues\"}," +
                "\"thresholds\":{\"mode\": \"absolute\"," +
                "\"steps\": [{\"color\":\"green\",\"value\":null}]," +
                this.minMaxVals +
                "\"mappings\": []," +
                "\"unit\":\"" + UnitMapper.getUnitSyntax(super.getUnit()) + "\"" +
                "}," +// End of defaults
                "\"overrides\": []" +
                "}," + // End of field configuration
                // Options
                "\"options\":{" +
                "\"inlineEditing\":false," +
                "\"showAdvancedTypes\":false," +
                // Root options
                "\"root\":{" +
                "\"background\":{\"color\": {\"fixed\":\"transparent\"}}," +
                "\"border\":{\"color\": {\"fixed\":\"dark-green\"}}," +
                "\"constraint\":{\"horizontal\":\"left\",\"vertical\":\"top\"}," +
                "\"elements\":[" + frameElementSyntax + "]," +
                "\"name\":\"Element\"," +
                "\"placement\":{\"height\":100,\"left\":0,\"top\":0,\"width\":100}," +
                "\"type\":\"frame\"" +
                "}" + // end of root options
                "}" + // end of options
                "}" + // end of field configuration
                "}";
    }
}

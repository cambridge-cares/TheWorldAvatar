package uk.ac.cam.cares.jps.agent.dashboard.json.panel.types;

import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.UnitMapper;
import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;


import java.util.List;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about time series chart syntax specific to Grafana dashboard.
 *
 * @author qhouyee
 */
public class TimeSeriesChart extends TemplatePanel {
    private String thresholdStyle = "off";
    private String thresholdKeyValue = "";

    /**
     * Standard Constructor.
     *
     * @param measure            The measure name for this variable.
     * @param itemGroup          The item group for this measure - asset type or rooms.
     * @param unit               Optional measure unit symbol. Can be null.
     * @param databaseId         The database connection ID generated by Grafana.
     * @param timeSeriesMetadata A list of items and their metadata for the specified measure.
     * @param thresholds         An array of threshold: Position 1 - min threshold; Position 2- max threshold.
     */
    public TimeSeriesChart(String measure, String itemGroup, String unit, String databaseId, List<String[]> timeSeriesMetadata, String[] thresholds) {
        super(measure, itemGroup, databaseId, timeSeriesMetadata);
        // Sets the unit for retrieval
        super.setUnit(unit);
        // Set Title for panel
        // Title is: Measure of Item Group [Unit]
        String titleContent = StringHelper.addSpaceBetweenCapitalWords(measure) + " of " + StringHelper.addSpaceBetweenCapitalWords(itemGroup);
        titleContent = unit.equals("null") ? titleContent : titleContent + " [" + unit + "]"; // Unit is optional
        super.setTitle(titleContent);
        // Set Description for panel
        // Description should follow the measure name and item group
        String description = "A chart displaying the time series of " + measure.toLowerCase() + " for " + itemGroup.toLowerCase();
        super.setDescription(description);
        // If there are thresholds, override the following items
        if (thresholds.length != 0) {
            this.thresholdStyle = "area";
            this.thresholdKeyValue = "\"thresholds\":{\"mode\": \"absolute\", \"steps\": [" +
                    "{\"color\":\"red\",\"value\":null},{\"color\":\"green\",\"value\":" + thresholds[0] + "}," +
                    "{\"color\":\"red\",\"value\":" + thresholds[1] + "}]},";
        }
    }

    /**
     * Construct the Time Series Chart syntax as a String.
     *
     * @param height    Height of the panel.
     * @param width     Width of the panel.
     * @param xPosition X position within the dashboard.
     * @param yPosition Y position within the dashboard.
     * @return The Time Series Chart syntax as a String.
     */
    @Override
    public String construct(int height, int width, int xPosition, int yPosition) {
        return "{" + super.genCommonJson(height, width, xPosition, yPosition) +
                // Chart type must be set to time series
                ",\"type\": \"timeseries\"," +
                // Field Configuration
                "\"fieldConfig\": { " +
                // Default field configuration
                "\"defaults\": {\"color\": {\"mode\": \"palette-classic\"}," +
                // Custom parts of field configurations
                "\"custom\":{" + "\"axisCenteredZero\":false,\"axisColorMode\":\"text\"," +
                "\"axisLabel\":\"\",\"axisPlacement\":\"auto\", \"barAlignment\":0, \"drawStyle\":\"line\"," +
                "\"fillOpacity\":0,\"gradientMode\":\"none\"," +
                "\"hideFrom\":{\"legend\":false, \"tooltip\":false, \"viz\":false}," +
                "\"lineInterpolation\":\"linear\", \"lineWidth\":1, \"pointSize\":5," +
                "\"scaleDistribution\":{\"type\":\"linear\"}, \"showPoints\":\"auto\", \"spanNulls\":false," +
                "\"stacking\":{\"group\":\"A\", \"mode\":\"none\"}, \"thresholdsStyle\":{\"mode\":\"" + this.thresholdStyle + "\"}" +
                "}," + // End of custom parts
                this.thresholdKeyValue +
                "\"mappings\": []," +
                "\"unit\":\"" + UnitMapper.getUnitSyntax(super.getUnit()) + "\"" +
                "}," + // End of defaults
                "\"overrides\": []" +
                "}," + // End of field configuration
                // Options
                "\"options\":{" +
                // Legend options
                "\"legend\":{\"calcs\": [], \"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true}," +
                // Tooltip options
                "\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}" +
                "}" + // end of options
                "}";
    }
}

package uk.ac.cam.cares.jps.agent.dashboard.json.panel.types;

import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.UnitMapper;
import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

import java.util.List;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about pie chart syntax specific to Grafana dashboard.
 *
 * @author qhouyee
 */
public class PieChart extends TemplatePanel {
    /**
     * Standard Constructor.
     *
     * @param measure            The measure name for this variable.
     * @param itemGroup          The item group for this measure.
     * @param unit               Optional measure unit symbol. Can be null.
     * @param databaseId         The database connection ID generated by Grafana.
     * @param timeSeriesMetadata A list of items and their metadata for the specified measure.
     */
    public PieChart(String measure, String itemGroup, String unit, String databaseId, List<String[]> timeSeriesMetadata) {
        super(measure, itemGroup, databaseId, timeSeriesMetadata);
        // Sets the unit for retrieval
        super.setUnit(unit);
        // Title is: Latest Measure Distribution [Unit]
        String titleContent = "Latest " + StringHelper.addSpaceBetweenCapitalWords(measure) + " distribution";
        titleContent = unit.equals("null") ? titleContent : titleContent + " [" + unit + "]"; // Unit is optional
        super.setTitle(titleContent);
        // Description should follow the measure name and item group
        String description = "A pie chart displaying the latest distribution for " + measure.toLowerCase() + " of " + itemGroup;
        super.setDescription(description);
    }

    /**
     * Construct the Pie Chart syntax as a String.
     *
     * @param height    Height of the panel.
     * @param width     Width of the panel.
     * @param xPosition X position within the dashboard.
     * @param yPosition Y position within the dashboard.
     * @return The chart syntax as a String.
     */
    @Override
    public String construct(int height, int width, int xPosition, int yPosition) {
        return "{" + super.genCommonJson(height, width, xPosition, yPosition) +
                ",\"type\":\"piechart\"," +
                // Plugin version
                "\"pluginVersion\":\"10.0.3\"," +
                // Field Configuration
                "\"fieldConfig\": {" +
                // Default field configuration
                "\"defaults\": {\"color\": {\"mode\": \"palette-classic\"}," +
                // Custom parts of field configurations
                "\"custom\":{" + "\"hideFrom\":{\"legend\":false,\"tooltip\":false,\"viz\":false}" +
                "}," + // End of custom part+
                "\"mappings\": []," +
                "\"unit\":\"" + UnitMapper.getUnitSyntax(super.getUnit()) + "\"" +
                "}," + // End of defaults
                "\"overrides\": []" +
                "}," + // End of field configuration
                // Options
                "\"options\":{" +
                // Legend options
                "\"legend\":{\"displayMode\":\"list\",\"placement\":\"right\",\"showLegend\":true}," +
                // Tooltip options
                "\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}," +
                // Other options
                "\"displayLabels\":[\"percent\"]," +
                "\"pieType\":\"donut\"," +
                "\"reduceOptions\": {\"calcs\":[\"lastNotNull\"],\"fields\":\"\",\"values\":false}" +
                "}" + // end of options
                "}";
    }
}

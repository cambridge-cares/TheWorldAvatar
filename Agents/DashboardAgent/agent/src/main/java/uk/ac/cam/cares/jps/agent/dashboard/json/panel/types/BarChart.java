package uk.ac.cam.cares.jps.agent.dashboard.json.panel.types;

import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.TemporalInterval;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.UnitMapper;
import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

import java.util.List;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about bar chart syntax specific to Grafana dashboard.
 *
 * @author qhouyee
 */
public class BarChart extends TemplatePanel {
    private static final String WHEN_SQL_START = " WHEN '${";
    private static final String WHEN_SQL_END = ":csv}'='";

    /**
     * Standard Constructor.
     *
     * @param measure            The measure name for this variable.
     * @param itemGroup          The item group for this measure - asset type or rooms.
     * @param unit               Optional measure unit symbol. Can be null.
     * @param databaseId         The database connection ID generated by Grafana.
     * @param timeSeriesMetadata A list of items and their metadata for the specified measure.
     */
    public BarChart(String measure, String itemGroup, String unit, String databaseId, List<String[]> timeSeriesMetadata) {
        super(measure, databaseId);
        // Sets the unit for retrieval
        super.setUnit(unit);
        // Set Title for panel
        // Title is: Measure trends [Unit]
        String titleContent = StringHelper.addSpaceBetweenCapitalWords(measure) + " trends";
        titleContent = unit.equals("null") ? titleContent : titleContent + " [" + unit + "]"; // Unit is optional
        super.setTitle(titleContent);
        // Set Description for panel
        // Description should follow the measure name and item group
        String description = "A bar chart displaying the trends for " + measure.toLowerCase() + " over a specific period";
        super.setDescription(description);
        String tableName = timeSeriesMetadata.get(0)[2];
        String timeIntervalVariableName = StringHelper.formatVariableName(StringHelper.INTERVAL_VARIABLE_NAME);
        // Set a query for the specified time interval
        String query = "SELECT CASE" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN to_char(time,'DD-Mon-YY')" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN to_char(time,'DD-Mon')" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN 'Week '|| to_char(time,'W Mon-YY')" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN to_char(time,'Mon-YY')" +
                " END AS \\\"interval\\\",${" +
                // Custom csv parameter must be lower case with no spacing ie: measurenameitemgroup
                StringHelper.formatVariableName(measure) + StringHelper.formatVariableName(itemGroup) + ":csv} " +
                "FROM \\\"" + tableName + "\\\" " +
                // Time interval according to template variable
                "WHERE CASE" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'6 day' AND TO_TIMESTAMP(${__to}/1000)" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'1 month'+interval'1 day' AND TO_TIMESTAMP(${__to}/1000)" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'1 month'+interval'1 day' AND TO_TIMESTAMP(${__to}/1000)" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'1 year'+interval'1 day' AND TO_TIMESTAMP(${__to}/1000)" +
                " END " +
                // Arrange results starting from the latest interval and go backwards
                "ORDER BY CASE" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN (EXTRACT(DOW FROM time)-EXTRACT(DOW FROM TO_TIMESTAMP(${__to}/1000))+6)%7" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN (EXTRACT(DOY FROM time)-EXTRACT(DOY FROM TO_TIMESTAMP(${__to}/1000))+365)%366" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN (EXTRACT(WEEK FROM time)-EXTRACT(WEEK FROM TO_TIMESTAMP(${__to}/1000))+51)%52" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN (EXTRACT(MONTH FROM time)-EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))+11)%12" +
                " END;";
        super.setQuery(new StringBuilder(query));
        // Apply an aggregate transformation before renaming the fields
        super.transformations.addGroupByTransformation("range", timeSeriesMetadata);
        // Add a white space as the group by transformation in Grafana appends the following
        super.transformations.addOrganizeTransformation(" (range)", timeSeriesMetadata);
    }

    /**
     * Construct the Bar Chart syntax as a String.
     *
     * @param height    Height of the panel.
     * @param width     Width of the panel.
     * @param xPosition X position within the dashboard.
     * @param yPosition Y position within the dashboard.
     * @return The Bar Chart syntax as a String.
     */
    @Override
    public String construct(int height, int width, int xPosition, int yPosition) {
        return "{" + super.genCommonJson(height, width, xPosition, yPosition) +
                // Chart type must be set to time series
                ",\"type\": \"barchart\"," +
                // Plugin version
                "\"pluginVersion\": \"10.0.3\"," +
                // Field Configuration
                "\"fieldConfig\": { " +
                // Default field configuration
                "\"defaults\": {\"color\": {\"mode\": \"palette-classic\"}," +
                // Custom parts of field configurations
                "\"custom\":{" + "\"axisCenteredZero\":false,\"axisColorMode\":\"text\"," +
                "\"axisLabel\":\"\",\"axisPlacement\":\"auto\", \"barAlignment\":0, \"drawStyle\":\"line\"," +
                "\"fillOpacity\":80,\"gradientMode\":\"none\",\"lineWidth\":1," +
                "\"hideFrom\":{\"legend\":false, \"tooltip\":false, \"viz\":false}," +
                "\"scaleDistribution\":{\"type\":\"linear\"}, \"showPoints\":\"auto\", \"spanNulls\":false," +
                "\"stacking\":{\"group\":\"A\", \"mode\":\"none\"}, \"thresholdsStyle\":{\"mode\":\"off\"}" +
                "}," + // End of custom part
                // Thresholds
                "\"thresholds\":{\"mode\": \"absolute\", \"steps\": [{\"color\":\"green\",\"value\":null},{\"color\":\"red\",\"value\":80}]}," +
                "\"mappings\": []," +
                "\"unit\":\"" + UnitMapper.getUnitSyntax(super.getUnit()) + "\"" +
                "}," + // End of defaults
                "\"overrides\": []" +
                "}," + // End of field configuration
                // Options
                "\"options\":{" +
                // Legend options
                "\"legend\":{\"calcs\": [], \"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true}," +
                // Tooltip options
                "\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}," +
                // Bar chart options
                "\"barRadius\":0,\"barWidth\":0.8,\"fullHighlight\":false,\"groupWidth\":0.7," +
                "\"orientation\":\"auto\",\"showValue\":\"never\",\"stacking\":\"normal\"," +
                "\"xTickLabelRotation\":0,\"xTickLabelSpacing\":100" +
                "}" + // end of options
                "}";
    }
}

package uk.ac.cam.cares.jps.agent.dashboard.json.panel.types;

import uk.ac.cam.cares.jps.agent.dashboard.datamodel.Measure;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.TemporalInterval;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.UnitMapper;
import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

import java.util.ArrayDeque;
import java.util.Queue;
import java.util.stream.Collectors;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about bar chart syntax specific to Grafana dashboard.
 *
 * @author qhouyee
 */
public class BarChart extends DefaultGrafanaPanel {
    // Default options
    private String orientationOption = "auto";
    private String stackingOption = "normal";
    private String showValueOption = "never";
    private String groupWidthOption = "0.7";
    private static final String INTERVAL_VAR_NAME = "interval";
    private static final String WHEN_SQL_START = " WHEN '${";
    private static final String WHEN_SQL_END = ":csv}'='";
    private static final String CURR_MONTH_SQL_VARIABLE = "currmonth";
    private static final String REF_MONTH_SQL_VARIABLE = "refmonth";

    /**
     * Standard Constructor.
     *
     * @param measure    The data model for constructing this panel.
     * @param itemGroup  The item group for this measure.
     * @param databaseId The database connection ID generated by Grafana.
     * @param chartType  An integer option to create a specific bar chart panel. 1: measure for the current month; 2: measure trends over last period; 3: measure trends over current period; 4: daily comparison for reference vs current month; 5: weekly comparison for reference vs current month.
     */
    public BarChart(Measure measure, String itemGroup, String databaseId, int chartType) {
        super("barchart", databaseId, measure);
        String measureName = measure.getName();
        String unit = measure.getUnit();
        // Sets the unit for retrieval
        super.setUnit(unit);
        // Set up the title content as well as the empty description and query as an initialisation step
        // Their actual values will be populated accordingly to the chart type required
        String titleContent = StringHelper.addSpaceBetweenCapitalWords(measureName);
        String description = "";
        String query = "";
        String tableName = measure.getTimeSeriesTable();
        // Process the inputs based on the chart type required
        switch (chartType) {
            case 1:
                titleContent += " for current month";
                description = "A bar chart displaying the " + measureName.toLowerCase() + " for the current month";
                query = "SELECT to_char(time,'Mon-YY') AS " + StringHelper.formatEscapeQuoteSQL(INTERVAL_VAR_NAME) + "," +
                        "${" + StringHelper.formatVariableName(measureName) + StringHelper.formatVariableName(itemGroup) + ":csv} " +
                        "FROM " + StringHelper.formatEscapeQuoteSQL(tableName) +
                        " WHERE time BETWEEN DATE_TRUNC('MONTH', TO_TIMESTAMP(${__to}/1000)) AND TO_TIMESTAMP(${__to}/1000)";
                // Modify the following options
                this.orientationOption = "horizontal";
                this.stackingOption = "none";
                this.showValueOption = "always";
                this.groupWidthOption = "1";
                this.applyTransformations(measure.getTimeSeriesData());
                break;
            case 2:
                titleContent += " trends for last period";
                description = "A bar chart displaying the trends for " + measureName.toLowerCase() + " over the last period of the specified interval";
                query = this.genTrendsQueryConfiguration(measureName, itemGroup, tableName, false);
                this.applyTransformations(measure.getTimeSeriesData());
                break;
            case 3:
                titleContent += " trends for current period";
                description = "A bar chart displaying the trends for " + measureName.toLowerCase() + " over the current period of the specified interval";
                query = this.genTrendsQueryConfiguration(measureName, itemGroup, tableName, true);
                this.applyTransformations(measure.getTimeSeriesData());
                break;
            case 4:
                titleContent = "Daily comparisons for " + titleContent;
                description = "A bar chart displaying the daily comparisons for " + measureName.toLowerCase() + " between the current and reference month";
                query = this.genComparisonQueryConfiguration(tableName, true, measure.getTimeSeriesData());
                // Modify the following options
                this.stackingOption = "none";
                this.showValueOption = "always";
                this.applyTransformations();
                break;
            case 5:
                titleContent = "Weekly comparisons for " + titleContent;
                description = "A bar chart displaying the weekly comparisons for " + measureName.toLowerCase() + " between the current and reference month";
                query = this.genComparisonQueryConfiguration(tableName, false, measure.getTimeSeriesData());
                // Modify the following options
                this.stackingOption = "none";
                this.showValueOption = "always";
                this.applyTransformations();
                break;
            default:
                throw new IllegalArgumentException("Invalid input for bar chart type. Only 1,2, 3, 4, or 5 is accepted as valid argument.");
        }
        // Title follows the following format in which middle part is dynamic based on inputs: Measure MIDDLE_CONTENT_BASED_ON_CHART_TYPE [Unit]
        titleContent = unit == null ? titleContent : titleContent + " [" + unit + "]"; // Unit is optional
        super.setTitle(titleContent);
        super.setDescription(description);
        super.setQuery(new StringBuilder(query));
    }

    /**
     * Generate the query configuration for trends.
     *
     * @param measure        The measure name for this variable.
     * @param itemGroup      The item group for this measure - asset type, rooms, or smart meters.
     * @param tableName      The name of the table containing the data.
     * @param isCurrentTrend A boolean indicating if we should generate the syntax for current trend or not.
     */
    private String genTrendsQueryConfiguration(String measure, String itemGroup, String tableName, boolean isCurrentTrend) {
        String timeIntervalVariableName = StringHelper.formatVariableName(StringHelper.INTERVAL_VARIABLE_NAME);
        String dailyOverWeekTimeFrameClause = isCurrentTrend ? "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'7 day' AND TO_TIMESTAMP(${__to}/1000)" : "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'14 day' AND DATE_TRUNC('DAY', TO_TIMESTAMP(${__to}/1000))-INTERVAL'7 day'";
        String dailyOverMonthTimeFrameClause = isCurrentTrend ? "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'1 month' AND TO_TIMESTAMP(${__to}/1000)" : "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'2 month' AND DATE_TRUNC('DAY', TO_TIMESTAMP(${__to}/1000))-INTERVAL'1 month'";
        String weeklyOverMonthTimeFrameClause = isCurrentTrend ? "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'1 month' AND TO_TIMESTAMP(${__to}/1000)" : "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'2 month' AND DATE_TRUNC('WEEK', TO_TIMESTAMP(${__to}/1000))-INTERVAL'1 month'";
        String monthlyTimeFrameClause = isCurrentTrend ? "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'1 year' AND TO_TIMESTAMP(${__to}/1000)" : "THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL'2 year' AND DATE_TRUNC('MONTH', TO_TIMESTAMP(${__to}/1000))-INTERVAL'1 year'";
        return "SELECT CASE" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN to_char(time,'DD-Mon-YY')" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN to_char(time,'DD-Mon')" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN 'Week '|| to_char(time,'W Mon-YY')" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN to_char(time,'Mon-YY')" +
                " END AS " + StringHelper.formatEscapeQuoteSQL(INTERVAL_VAR_NAME) + ",${" +
                // Custom csv parameter must be lower case with no spacing ie: measurenameitemgroup
                StringHelper.formatVariableName(measure) + StringHelper.formatVariableName(itemGroup) + ":csv} " +
                "FROM " + StringHelper.formatEscapeQuoteSQL(tableName) +
                // Time interval according to template variable
                " WHERE CASE" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' " + dailyOverWeekTimeFrameClause +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' " + dailyOverMonthTimeFrameClause +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' " + weeklyOverMonthTimeFrameClause +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' " + monthlyTimeFrameClause +
                " END " +
                // Arrange results starting from the latest interval and go backwards
                "ORDER BY CASE" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' OR '${" +
                timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN (EXTRACT(DOY FROM time)-EXTRACT(DOY FROM TO_TIMESTAMP(${__to}/1000))+365)%366" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN (EXTRACT(WEEK FROM time)-EXTRACT(WEEK FROM TO_TIMESTAMP(${__to}/1000))+51)%52" +
                WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN (EXTRACT(MONTH FROM time)-EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))+11)%12" +
                " END;";
    }

    /**
     * Generate the query configuration for comparison.
     *
     * @param tableName          The name of the table containing the data.
     * @param isDaily            A boolean indicating if we should generate the syntax for daily or weekly intervals.
     * @param timeSeriesMetadata A queue of time series metadata for the specified measure.
     */
    private String genComparisonQueryConfiguration(String tableName, boolean isDaily, Queue<String[]> timeSeriesMetadata) {
        String refMonthVar = StringHelper.formatVariableName(StringHelper.REF_MONTH_VARIABLE_NAME);
        String measureSummationSyntax = timeSeriesMetadata.stream()
                .map(meterMetadata -> meterMetadata[1])
                .collect(Collectors.joining("+"));
        String intervalSyntax = isDaily ? "'Day ' || TO_CHAR(time,'DD')" : "'Week ' || TO_CHAR(time,'W')";
        return "SELECT " + intervalSyntax + " AS " + StringHelper.formatEscapeQuoteSQL(INTERVAL_VAR_NAME) + "," +
                // For reference month, we must query and ensure data is from the start of the month to the end relative from the current time
                "CASE WHEN time BETWEEN " +
                // To get start of reference month, get current month from specified timestamp and deduct the required number of months as interval
                "DATE_TRUNC('MONTH',TO_TIMESTAMP(${__to}/1000))-" +
                // Interval to be subtracted from current month to get reference month
                "CAST(CASE WHEN EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))-${" + refMonthVar + "}<=0 THEN EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))-${" + refMonthVar + "}+12 " +
                "ELSE EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))-${" + refMonthVar + "} END||' month' AS Interval)" +
                " AND " +
                // Similar query to above but this gets the end of the month by adding INTERVAL '1 month'
                "DATE_TRUNC('MONTH',TO_TIMESTAMP(${__to}/1000))+INTERVAL '1 month'-" +
                // Interval to be subtracted from current month to get reference month
                "CAST(CASE WHEN EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))-${" + refMonthVar + "}<=0 THEN EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))-${" + refMonthVar + "}+12 " +
                "ELSE EXTRACT(MONTH FROM TO_TIMESTAMP(${__to}/1000))-${" + refMonthVar + "} END||' month' AS Interval)" +
                // END of the first case when
                " THEN " + measureSummationSyntax +
                " END AS " + StringHelper.formatEscapeQuoteSQL(REF_MONTH_SQL_VARIABLE) + "," +
                // For current month, get from start of month to current time
                " CASE WHEN time BETWEEN DATE_TRUNC('MONTH',TO_TIMESTAMP(${__to}/1000)) AND TO_TIMESTAMP(${__to}/1000) THEN " + measureSummationSyntax +
                " END AS " + StringHelper.formatEscapeQuoteSQL(CURR_MONTH_SQL_VARIABLE) +
                " FROM " + StringHelper.formatEscapeQuoteSQL(tableName) +
                // These comparisons will only be available up to a year ago
                " WHERE time BETWEEN TO_TIMESTAMP(${__to}/1000)-INTERVAL '1 year' AND TO_TIMESTAMP(${__to}/1000)" +
                " ORDER BY " + INTERVAL_VAR_NAME + ";";
    }

    /**
     * Applies the transformations required for time-based bar charts for comparisons.
     */
    private void applyTransformations() {
        Queue<String[]> comparisonFrames = new ArrayDeque<>();
        comparisonFrames.offer(new String[]{"Current Month", CURR_MONTH_SQL_VARIABLE});
        comparisonFrames.offer(new String[]{StringHelper.REF_MONTH_VARIABLE_NAME, REF_MONTH_SQL_VARIABLE});
        applyTransformations(comparisonFrames);
    }

    /**
     * Applies the transformations required for these bar charts. In this case, it depends on the input.
     *
     * @param timeSeriesMetadata A queue of time series metadata for the specified measure.
     */
    private void applyTransformations(Queue<String[]> timeSeriesMetadata) {
        // Apply an aggregate transformation before renaming the fields
        super.transformations.addGroupByTransformation("range", timeSeriesMetadata);
        // Add a white space as the group by transformation in Grafana appends the following
        super.transformations.addOrganizeTransformation(" (range)", timeSeriesMetadata);
    }

    /**
     * Construct the Bar Chart syntax as a String.
     *
     * @param height    Height of the panel.
     * @param width     Width of the panel.
     * @param xPosition X position within the dashboard.
     * @param yPosition Y position within the dashboard.
     * @return The Bar Chart syntax as a String.
     */
    @Override
    public String construct(int height, int width, int xPosition, int yPosition) {
        return "{" + super.genCommonJson(height, width, xPosition, yPosition) +
                // Plugin version
                "\"pluginVersion\": \"10.0.3\"," +
                // Field Configuration
                "\"fieldConfig\": { " +
                // Default field configuration
                "\"defaults\": {\"color\": {\"mode\": \"palette-classic\"}," +
                // Custom parts of field configurations
                "\"custom\":{" + "\"axisCenteredZero\":false,\"axisColorMode\":\"text\"," +
                "\"axisLabel\":\"\",\"axisPlacement\":\"auto\", \"barAlignment\":0, \"drawStyle\":\"line\"," +
                "\"fillOpacity\":80,\"gradientMode\":\"none\",\"lineWidth\":1," +
                "\"hideFrom\":{\"legend\":false, \"tooltip\":false, \"viz\":false}," +
                "\"scaleDistribution\":{\"type\":\"linear\"}, \"showPoints\":\"auto\", \"spanNulls\":false," +
                "\"stacking\":{\"group\":\"A\", \"mode\":\"none\"}, \"thresholdsStyle\":{\"mode\":\"off\"}" +
                "}," + // End of custom part
                // Thresholds
                "\"thresholds\":{\"mode\": \"absolute\", \"steps\": [{\"color\":\"green\",\"value\":null},{\"color\":\"red\",\"value\":80}]}," +
                "\"mappings\": []," +
                "\"unit\":\"" + UnitMapper.getUnitSyntax(super.getUnit()) + "\"" +
                "}," + // End of defaults
                "\"overrides\": []" +
                "}," + // End of field configuration
                // Options
                "\"options\":{" +
                // Legend options
                "\"legend\":{\"calcs\": [], \"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true}," +
                // Tooltip options
                "\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}," +
                // Bar chart options
                "\"barRadius\":0,\"barWidth\":0.8,\"fullHighlight\":false,\"groupWidth\":" + this.groupWidthOption + "," +
                "\"orientation\":\"" + this.orientationOption + "\",\"showValue\":\"" + this.showValueOption + "\",\"stacking\":\"" + this.stackingOption + "\"," +
                "\"xTickLabelRotation\":0,\"xTickLabelSpacing\":100" +
                "}" + // end of options
                "}";
    }
}

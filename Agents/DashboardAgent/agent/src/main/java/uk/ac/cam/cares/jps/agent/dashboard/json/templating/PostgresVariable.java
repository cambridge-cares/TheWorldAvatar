package uk.ac.cam.cares.jps.agent.dashboard.json.templating;

import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.stream.Collectors;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about PostgreSQL template variable syntax specific to Grafana dashboard. At the moment,
 * the PostgreSQL variables are used to link each asset to their corresponding time series column to perform correct SQL queries.
 *
 * @author qhouyee
 */
class PostgresVariable extends TemplateVariable {
    private final String label;
    private final String description;
    private final String databaseConnectionId;
    private final String querySyntax;

    /**
     * Constructor for a variable that filters out the specified variable based on the key value pair input.
     *
     * @param variableName  The name for this variable.
     * @param databaseId    The database connection ID generated by Grafana.
     * @param keyValuePairs A map containing the key value pair that is to be included into the query component.
     */
    public PostgresVariable(String variableName, String databaseId, Map<String, String> keyValuePairs) {
        // Variable name will be a combination of measure name and item type to make it unique
        super(variableName, 2, false, false);
        // Empty label as the label will not be displayed
        this.label = variableName;
        // Description should follow the measure name and item type
        this.description = "A hidden filter that displays the " + StringHelper.addSpaceBetweenCapitalWords(variableName).toLowerCase()
                + " as requested by the user";
        // Append each value in the list in the required format
        String queryTemplate = "SELECT k AS \\\"__text\\\", v AS \\\"__value\\\" FROM (values %s) AS v(k,v);";
        StringBuilder temp = new StringBuilder();
        this.databaseConnectionId = databaseId;
        // Sort the key value pairs
        List<Map.Entry<String, String>> sortedEntries = keyValuePairs.entrySet()
                .stream()
                .sorted(Comparator.comparingInt(entry -> Integer.parseInt(entry.getValue())))
                .collect(Collectors.toList());
        for (Map.Entry<String, String> entry : sortedEntries) {
            // Only append a comma at the start if it is not the first value
            if (temp.length() != 0) temp.append(", ");
            // Append the name and the corresponding column name
            temp.append("('").append(entry.getKey()).append("', '")
                    .append(entry.getValue()).append("')");
        }
        this.querySyntax = String.format(queryTemplate, temp);
    }

    /**
     * Constructor for a variable to filter the item groups (asset, room, system) associated with a specific facility.
     *
     * @param itemGroup        The item group for filtering.
     * @param facilityItemData A queue of data containing the item name and facility name in this order.
     * @param databaseId       The database connection ID generated by Grafana.
     */
    public PostgresVariable(String itemGroup, Queue<String[]> facilityItemData, String databaseId) {
        // Ensure that this variable can be viewed on the dashboard
        super(itemGroup, 0, true, true);
        // Add label for the type
        if (itemGroup.equals(StringHelper.ROOM_KEY)) {
            this.label = "Rooms";
        } else if (itemGroup.equals(StringHelper.SYSTEM_KEY)) {
            this.label = "Smart Meter";
        } else {
            this.label = StringHelper.addSpaceBetweenCapitalWords(itemGroup);
        }
        // Description should follow the item type
        this.description = "A filter for the items of " + this.label.toLowerCase() + " type.";
        // Append each value in the list in the required format
        String queryTemplate = "SELECT v AS \\\"__value\\\" FROM (values %s) AS v(k,v) WHERE k IN (${%s});";
        StringBuilder temp = new StringBuilder();
        this.databaseConnectionId = databaseId;
        // For each data, add a mapping for facility to item
        while (!facilityItemData.isEmpty()) {
            String[] currentData = facilityItemData.poll();
            if (temp.length() != 0) temp.append(", ");
            temp.append("('").append(currentData[1]).append("', '")
                    .append(currentData[0]).append("')");
        }
        this.querySyntax = String.format(queryTemplate, temp, StringHelper.FACILITY_KEY);
    }

    /**
     * Constructor for a variable that filters the measures associated with an item group.
     *
     * @param measure      The measure name for this variable.
     * @param itemGroup    The item group associated with this measure.
     * @param itemMeasures A queue of data containing the item name and their corresponding RDB column in this order.
     * @param databaseId   The database connection ID generated by Grafana.
     */
    public PostgresVariable(String measure, String itemGroup, Queue<String[]> itemMeasures, String databaseId) {
        // Variable name will be a combination of measure name and item type to make it unique
        super(measure + itemGroup, 2, true, true);
        // Empty label as the label will not be displayed
        this.label = "";
        // Description should follow the measure name and item type
        this.description = "A hidden filter that displays the corresponding time series of " + StringHelper.addSpaceBetweenCapitalWords(measure).toLowerCase()
                + " for " + StringHelper.addSpaceBetweenCapitalWords(itemGroup).toLowerCase();
        // Append each value in the list in the required format
        String queryTemplate = "SELECT v AS \\\"__value\\\" FROM (values %s) AS v(k,v) WHERE k IN (${%s});";
        StringBuilder temp = new StringBuilder();
        this.databaseConnectionId = databaseId;
        while (!itemMeasures.isEmpty()) {
            String[] currentMeasure = itemMeasures.poll();
            // Only append a comma at the start if it is not the first value
            if (temp.length() != 0) temp.append(", ");
            // Append the name and the corresponding column name
            temp.append("('").append(currentMeasure[0]).append("', '")
                    .append(currentMeasure[1]).append("')");
        }
        String itemVariable = StringHelper.formatVariableName(itemGroup); // Format variable name according to its formatted name
        this.querySyntax = String.format(queryTemplate, temp, itemVariable);
    }

    /**
     * Construct the Postgres variable as a String.
     *
     * @return The Postgres variable syntax as a String.
     */
    @Override
    protected String construct() {
        // Construct the common elements
        return super.genCommonJson() +
                // Variable display label
                "\"label\": \"" + this.label + "\"," +
                // Postgres datasource
                "\"datasource\": {\"type\": \"postgres\", \"uid\": \"" + this.databaseConnectionId + "\"}," +
                // Description for this variable
                "\"description\": \"" + this.description + "\"," +
                // Query values of this variable
                "\"definition\": \"" + this.querySyntax + "\"," +
                "\"query\": \"" + this.querySyntax + "\"," +
                // Default settings but unsure what they are for
                "\"regex\": \"\"," +
                "\"sort\" : 0," +
                // Variable type must be set as query to work
                "\"type\": \"query\"" +
                "}";
    }
}

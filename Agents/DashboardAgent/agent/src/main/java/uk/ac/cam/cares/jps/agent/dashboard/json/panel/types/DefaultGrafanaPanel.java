package uk.ac.cam.cares.jps.agent.dashboard.json.panel.types;

import uk.ac.cam.cares.jps.agent.dashboard.datamodel.Measure;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.options.TransformationOptions;
import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information about the default panel syntax
 * specific to Grafana dashboard. This is a super class that is intended to be implemented by the subclass, and only provide common syntax.
 *
 * @author qhouyee
 */
public abstract class DefaultGrafanaPanel extends TemplatePanel {
    private final String measure;
    private String unit = "null";
    private StringBuilder querySyntax = new StringBuilder();
    protected final TransformationOptions transformations;

    /**
     * A constructor that sets up common aspects of the panels.
     *
     * @param panelType  The panel type that has to be included for the dashboard.
     * @param itemGroup  The item group for this measure.
     * @param databaseId The database connection ID generated by Grafana.
     * @param measure    The measure data model for this panel.
     */
    protected DefaultGrafanaPanel(String panelType, String itemGroup, String databaseId, Measure measure) {
        this(panelType, databaseId, measure);
        // Create the query syntax from the parameters
        // Assumes that each measure of a specific item group belongs to only 1 table
        this.querySyntax.append("SELECT time AS \\\"time\\\", ${")
                // Custom csv parameter must be lower case with no spacing ie: measurenameitemgroup
                .append(StringHelper.formatVariableName(measure.getName())).append(StringHelper.formatVariableName(itemGroup)).append(":csv} ")
                .append("FROM \\\"").append(measure.getTimeSeriesTable()).append("\\\" WHERE $__timeFilter(time)");
        this.transformations.addOrganizeTransformation(measure.getTimeSeriesData());
    }

    /**
     * A constructor that initialises the measure and database connection ID, but requires users to set the query and transformation options.
     *
     * @param panelType  The panel type that has to be included for the dashboard.
     * @param databaseId The database connection ID generated by Grafana.
     * @param measure    The measure data model for this panel.
     */
    protected DefaultGrafanaPanel(String panelType, String databaseId, Measure measure) {
        super(panelType, databaseId);
        this.measure = measure.getName();
        this.transformations = new TransformationOptions();
    }

    /**
     * Gets the measure of this panel.
     */
    public String getMeasure() {
        return this.measure;
    }

    public String getUnit() {
        return this.unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    /**
     * Sets the title.
     */
    protected void setTitle(String title) {
        super.setTitle(title);
    }

    /**
     * Sets the description.
     */
    protected void setDescription(String description) {
        super.setDescription(description);
    }

    /**
     * Sets the query syntax.
     */
    protected void setQuery(StringBuilder query) {
        this.querySyntax = query;
    }

    /**
     * Construct the common JSON parts for panel as a StringBuilder which will continue to append specific syntax for different query types.
     *
     * @return The variable syntax as a StringBuilder.
     */
    protected String genCommonJson(int height, int width, int xPosition, int yPosition) {
        return super.genCommonJson(height, width, xPosition, yPosition) +
                // Targets the written queries with their configuration to execute and retrieve data
                "\"targets\": [{" + this.dataSource.construct() +
                // Query configurations
                "\"editorMode\":\"code\",\"format\":\"table\",\"rawQuery\":true,\"refId\":\"A\"," +
                "\"sql\":{\"columns\": [{\"parameters\": [],\"type\":\"function\"}], \"groupBy\": [{\"property\":{\"type\":\"string\"},\"type\":\"groupBy\"}],\"limit\":50}," +
                // Query to be executed
                "\"rawSql\":\"" + this.querySyntax + "\"}]," +
                "\"transformations\":" + this.transformations.construct() + ",";
    }

    /**
     * An abstract method to construct the variable syntax required. This method must be overridden to be executed in the implemented classes.
     */
    public abstract String construct(int height, int width, int xPosition, int yPosition);
}

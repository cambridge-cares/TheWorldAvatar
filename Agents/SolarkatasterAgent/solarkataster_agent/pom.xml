<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    <groupId>uk.ac.cam.cares.jps</groupId>
    <artifactId>solarkataster_agent</artifactId>
    <version>1.0.0</version>
    <packaging>war</packaging>
    
    <!-- Project properties -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        
        <!-- Version of the JPS Base Library to use -->
        <jps.base.version>1.30.0</jps.base.version>
    </properties>
    
    <!-- Parent POM -->
    <parent>
        <groupId>uk.ac.cam.cares.jps</groupId>
        <artifactId>jps-parent-pom</artifactId>
        <version>2.1.0</version>
    </parent>
    
    <!-- Profiles are used to switch between building for development and production 
    environments. Use "-P profile-id" within an mvn command to build with a profile -->
    <profiles>
        <!-- This profile should be used for development builds. -->
        <profile>
            <id>dev-profile</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!-- Set property to download development logging config -->
                <log.artifact>java-logging-dev</log.artifact>
            </properties>
        </profile>
        
        <!-- This profile should be used for production builds. -->
        <profile>
            <id>prod-profile</id>
            <properties>
                <!-- Set property to download production logging config -->
                <log.artifact>java-logging-prod</log.artifact>
            </properties>
        </profile>
    </profiles>
    
    <build>
        <plugins>
            
            <!-- Compile and build with Java 11 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
            
            <!-- Allows maven executions -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
            </plugin>
            
            <!-- Used to execute unit tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!-- JUnit 5 requires Surefire version 2.22.0 or higher -->
                <version>2.22.0</version>
            </plugin>
                        
            <!-- Used to build into a WAR file and ensures everything in ./WEB-INF
            gets copied into the final WAR file's internal WEB-INF directory. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <!-- Version, configuration, and executions should be pulled from the 
                parent POM unless overridden here. -->
            </plugin>
            
            <!-- Downloads and extracts ZIP archives from Maven repository -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <!-- Version, configuration, and executions should be pulled from the 
                parent POM unless overridden here. -->
            </plugin>
            
        </plugins>
    </build>
    
    <!-- Dependencies -->
    <dependencies>
        
        <!-- JPS Base Library -->
        <dependency>
            <groupId>uk.ac.cam.cares.jps</groupId>
            <artifactId>jps-base-lib</artifactId>
            <version>${jps.base.version}</version>
        </dependency>
        
        <!-- Java servlet API, version pulled from parent -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>
        
        <!-- JSON handling -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20180813</version>
            <type>jar</type>
        </dependency>
        
        <!-- Logging, versions pulled from parent -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
        </dependency>
        
        <!-- Testing, versions pulled from parent -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.11.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-inline</artifactId>
            <version>3.11.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
###############################################################################
# This file describes the process of the training of the models used in Marie #
###############################################################################


In folder Wiki_basic_info

# TARGET: 

a list of URIs of all species 
a list of SMILES of all species 
a map between SMILES and URIs 
a list of labels and alt labels of valuable species
a list of formula of valuable species 
a list of chemistry-related properties
a list of chemistry-related classes and subclasses 



1. To retreive all the chemical species and their SMILES string from Wikdiata
	
	###################################################################################
	# with nodejs and @comunica/actor-init-sparql installed 
	a) node wiki_retrieve_species.js
	
	the script produces 837 files, each containing 100 species and their SMILES

	this provides a FULL list of URIs of all wikidata instances with their SMILES

	###################################################################################
	b) python length_filter.py	

	the script filters out species with too long a SMILES string, produces WIKI_URI_LIST

	WIKI_URI_LIST contains a sorted list of URIs of around 120,000 selected species

	the script also produces SMILES_URI_DICT

	SMILES_URI_DICT contains a mapping between SMILES and URI of all instances,
	which will be later used as the SMILES lookup dict

	A URI_SMILES_DICT is also produced for the training process (Make Universal Translator)

	###################################################################################

	c) python dict_test.py 
	
	to test the SMILES lookup dictionary is properly created 

	###################################################################################

    d) python ./test/WIKI_URI_LIST_test.py

    to test whether the WIKI_URI_LIST is properly created, where the URIs are sorted
    by their length from short to long
	###################################################################################


2. Based on WIKI_URI_LIST, retrieve chemistry-related properties, classes and the label and alternative labels of species

	Make a dictionary that maps instances and the properties and classes connected to it, which will be used to generate questions of better quality 
	
	###################################################################################

	a) python query_properties.py 
		
	take WIKI_URI_LIST, make query to Wikidata and get all properties related to those species. 

	the script produces distinct_properties, containing the properties and their labels and alt labels, 135 properties are expected

					    instance_property_mapping_first_2000
						instance_property_mapping_random_3000, containing the mapping between instances and related properties and the according labels and alt_labels 

	###################################################################################
	
	b) python query_species_classes_and_labels.py (long running time)

	

##############################################################################################
##############################################################################################

In folder JPS_basic_info

# TARGET:

1. a list of properties in ontokin and ontocompchem
2. a list of species and reactions in ontokin and species in ontocompchem 
3. for each type of reactions 

	- query_reaction_property (ontokin, reaction) 
	- select_mechanism_by_reaction (ontokin, reaction)
	- select_reaction_by_species (ontokin, reaction)
	
	- query_thermodynamic (ontokin, properties, species)
	- query_quantum_chemistry (ontocompchem, properties, species)

        

# This Dockerfile has been adapted from the VS Code example at https://code.visualstudio.com/docs/containers/quickstart-python

# Base image is a lightweight version of Python
FROM python:3.10-slim-bullseye

# Install required software
USER root
RUN apt-get update \
    && apt-get install -y git openjdk-11-jdk-headless \
    && apt-get clean

# Expose the port on which our server will run
EXPOSE 5000

# Turns off buffering for easier container logging
ENV PYTHONUNBUFFERED=1
RUN echo ABCD
# Install the required Python libraries
COPY docker_test_requirements.txt .
RUN python -m pip install -r docker_test_requirements.txt

# Install the twa package in development mode
RUN mkdir /pytemp
COPY twa ./pytemp/twa
COPY setup.py ./pytemp/
COPY README.md ./pytemp/
RUN python -m pip install --upgrade pip
RUN cd ./pytemp && python -m pip install -e .


# # Re-install the version of JPS_BASE_LIB that is been developing
# # (this will be required if the new features are not merged back to main)
# RUN jpsrm uninstall JpsBaseLib
# RUN mkdir /jpstemp
# COPY /_temp/jps-base-lib.jar ./jpstemp/jps-base-lib.jar
# COPY /_temp/lib ./jpstemp/lib
# RUN jpsrm install JpsBaseLib ./jpstemp/

# Set the default working directory, then copy the Python source code into it
WORKDIR /app
ADD tests /app/tests

# Switch to a non-root user before running the server, for security reasons
# (See https://code.visualstudio.com/docs/containers/python-user-rights)
RUN useradd appuser && chown -R appuser /app

# Creating the user doesn't create their home directory for some reason, so create it now
RUN mkdir /home/appuser
RUN chown -R appuser:appuser /home/appuser
RUN chmod -R 755 /home/appuser

# Start the gunicorn server on port 5000, using a Flask object called 'app' imported from the 'python_agent' module
# Note that port 5000 is *inside the container*; this can be mapped to a port on the host when running the container on the command line or in docker-compose.yml
USER appuser
# The ENTRYPOINT is provided in docker-compose.test.yml file
# ENTRYPOINT ["gunicorn", "--bind", "0.0.0.0:5000", "tests.entry_point:create_rng_app()"]
